window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  FarmData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1162TioYBE6azs68IGRQg3", "FarmData");
    "use strict";
    var landPositionList = [ cc.v2(140, 190), cc.v2(-40, 90), cc.v2(-220, -10), cc.v2(180, 20), cc.v2(0, -80), cc.v2(-180, -180), cc.v2(220, -160), cc.v2(40, -260), cc.v2(-140, -360) ];
    var changeRate = 500;
    var landDetail = [ {
      index: 0,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 1,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 24,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 1,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 1,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 20,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 2,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 1,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 16,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 3,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 1,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 12,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 4,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 1,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 9,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 5,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 1,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 5,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 6,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 0,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 2,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 7,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 3,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 1,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    }, {
      index: 8,
      type: 0,
      growthStatue: -1,
      healthStatue: {
        bug: 0,
        reap: 0,
        water: 0,
        withered: 0
      },
      isUse: false,
      isLock: 3,
      waterTime: -1,
      restTime: -1,
      plantTime: -1,
      reapTime: -1,
      unlockLevel: 1,
      insectAppearTime: -1,
      isReduceProduce: -1,
      protectEndTime: -1,
      protectType: -1
    } ];
    var landUnlockLevelList = [ 24, 20, 16, 12, 9, 5, 2, 1, 1 ];
    var landUnlockAndLevelUpCost = [ {
      cost: 69e3,
      levelUpCost: 5e4
    }, {
      cost: 39e3,
      levelUpCost: 5e4
    }, {
      cost: 16e3,
      levelUpCost: 5e4
    }, {
      cost: 6600,
      levelUpCost: 5e4
    }, {
      cost: 1600,
      levelUpCost: 5e4
    }, {
      cost: 500,
      levelUpCost: 5e4
    }, {
      cost: 50,
      levelUpCost: 5e4
    }, {
      cost: 0,
      levelUpCost: 5e4
    }, {
      cost: 0,
      levelUpCost: 5e4
    } ];
    var plantInfo = [ {
      type: 0,
      name: "carrot",
      cycle: 3,
      levelUplimite: 60,
      price: 10,
      limitedLevel: 5,
      waterIntervel: 5,
      witheredTime: 1440
    }, {
      type: 1,
      name: "corn",
      cycle: 12,
      levelUplimite: 54,
      price: 12,
      limitedLevel: 5,
      waterIntervel: 5,
      witheredTime: 1440
    }, {
      type: 2,
      name: "pea",
      cycle: 33,
      levelUplimite: 45,
      price: 18,
      limitedLevel: 5,
      waterIntervel: 10,
      witheredTime: 1440
    }, {
      type: 3,
      name: "tomato",
      cycle: 75,
      levelUplimite: 45,
      price: 24,
      limitedLevel: 5,
      waterIntervel: 20,
      witheredTime: 2880
    }, {
      type: 4,
      name: "papper",
      cycle: 180,
      levelUplimite: 45,
      price: 32,
      limitedLevel: 5,
      waterIntervel: 50,
      witheredTime: 2880
    }, {
      type: 5,
      name: "cabbage",
      cycle: 375,
      levelUplimite: 36,
      price: 40,
      limitedLevel: 5,
      waterIntervel: 60,
      witheredTime: 2880
    }, {
      type: 6,
      name: "peanut",
      cycle: 540,
      levelUplimite: 36,
      price: 52,
      limitedLevel: 5,
      waterIntervel: 60,
      witheredTime: 2880
    }, {
      type: 7,
      name: "pumpkin",
      cycle: 735,
      levelUplimite: 27,
      price: 65,
      limitedLevel: 5,
      waterIntervel: 120,
      witheredTime: 2880
    }, {
      type: 8,
      name: "paddy",
      cycle: 990,
      levelUplimite: 18,
      price: 82,
      limitedLevel: 5,
      waterIntervel: 120,
      witheredTime: 2880
    } ];
    var farmInfo = {
      level: 1,
      exp: 0,
      coin: 0
    };
    var warehouseData = [ {
      type: 1,
      number: 4
    } ];
    var shopSeedData = [ {
      type: 0,
      price: 10
    }, {
      type: 1,
      price: 12
    }, {
      type: 2,
      price: 18
    }, {
      type: 3,
      price: 24
    }, {
      type: 4,
      price: 32
    }, {
      type: 5,
      price: 40
    }, {
      type: 6,
      price: 52
    }, {
      type: 7,
      price: 65
    }, {
      type: 8,
      price: 82
    } ];
    var seedData = [ {
      type: 0,
      number: 5,
      level: 1,
      isUnlock: true,
      unlockLevel: 1,
      price: 1,
      plantCount: 0,
      basicProduce: 4
    }, {
      type: 1,
      number: 10,
      level: 1,
      isUnlock: true,
      unlockLevel: 3,
      price: 2,
      plantCount: 0,
      basicProduce: 5
    }, {
      type: 2,
      number: 15,
      level: 1,
      isUnlock: true,
      unlockLevel: 5,
      price: 6,
      plantCount: 0,
      basicProduce: 6
    }, {
      type: 3,
      number: 2,
      level: 1,
      isUnlock: true,
      unlockLevel: 7,
      price: 14,
      plantCount: 0,
      basicProduce: 6
    }, {
      type: 4,
      number: 3,
      level: 1,
      isUnlock: true,
      unlockLevel: 9,
      price: 24,
      plantCount: 0,
      basicProduce: 7
    }, {
      type: 5,
      number: 0,
      level: 1,
      isUnlock: true,
      unlockLevel: 11,
      price: 35,
      plantCount: 0,
      basicProduce: 8
    }, {
      type: 6,
      number: 0,
      level: 1,
      isUnlock: false,
      unlockLevel: 13,
      price: 48,
      plantCount: 0,
      basicProduce: 8
    }, {
      type: 7,
      number: 0,
      level: 1,
      isUnlock: false,
      unlockLevel: 15,
      price: 60,
      plantCount: 0,
      basicProduce: 8
    }, {
      type: 8,
      number: 0,
      level: 1,
      isUnlock: false,
      unlockLevel: 17,
      price: 88,
      plantCount: 0,
      basicProduce: 10
    } ];
    var propsData = [ {
      type: 0,
      number: 1
    }, {
      type: 1,
      number: 3
    }, {
      type: 2,
      number: 4
    }, {
      type: 3,
      number: 2
    }, {
      type: 4,
      number: 5
    } ];
    var propShopList = [ {
      type: 0,
      price: 500,
      effectTime: 60,
      name: "single speed up",
      timeStr: "1 h"
    }, {
      type: 1,
      price: 980,
      effectTime: 120,
      name: "single speed up",
      timeStr: "2 h"
    }, {
      type: 2,
      price: 1920,
      effectTime: 240,
      name: "single speed up",
      timeStr: "4 h"
    }, {
      type: 3,
      price: 3800,
      effectTime: 480,
      name: "single speed up",
      timeStr: "8 h"
    }, {
      type: 4,
      price: 4e3,
      effectTime: 60,
      name: "all speed up",
      timeStr: "1 h"
    }, {
      type: 5,
      price: 7900,
      effectTime: 120,
      name: "all speed up",
      timeStr: "2 h"
    }, {
      type: 6,
      price: 15600,
      effectTime: 240,
      name: "all speed up",
      timeStr: "4 h"
    }, {
      type: 7,
      price: 31e3,
      effectTime: 480,
      name: "all speed up",
      timeStr: "8 h"
    }, {
      type: 8,
      price: 600,
      effectTime: 240,
      name: "auto watering",
      timeStr: "4 h"
    }, {
      type: 9,
      price: 1200,
      effectTime: 480,
      name: "auto watering",
      timeStr: "8 h"
    }, {
      type: 10,
      price: 2400,
      effectTime: 960,
      name: "auto watering",
      timeStr: "16 h"
    }, {
      type: 11,
      price: 7200,
      effectTime: 1920,
      name: "auto watering",
      timeStr: "48 h"
    }, {
      type: 12,
      price: 500,
      effectTime: 360,
      name: "protection spray",
      timeStr: "6 h"
    }, {
      type: 13,
      price: 900,
      effectTime: 720,
      name: "protection spray",
      timeStr: "12 h"
    }, {
      type: 14,
      price: 3400,
      effectTime: 2880,
      name: "protection spray",
      timeStr: "48 h"
    } ];
    var propList = [ {
      effectTime: 1,
      cost: 100,
      type: 1
    }, {
      effectTime: 2,
      cost: 200,
      type: 1
    }, {
      effectTime: 3,
      cost: 300,
      type: 1
    }, {
      effectTime: 4,
      cost: 400,
      type: 1
    }, {
      effectTime: 5,
      cost: 500,
      type: 1
    }, {
      effectTime: 6,
      cost: 600,
      type: 1
    } ];
    var OperationReward = [ {
      name: "water",
      exp: 100,
      coins: 0
    }, {
      name: "plant",
      exp: 100,
      coins: 0
    }, {
      name: "withered",
      exp: 100,
      coins: 0
    }, {
      name: "protect",
      exp: 100,
      coins: 0
    }, {
      name: "pestControl",
      exp: 100,
      coins: 0
    }, {
      name: "help",
      exp: 300,
      coins: 30
    }, {
      name: "fertilize",
      exp: 200,
      coins: 0
    } ];
    var WHTER_COUNT_MAX = 5;
    var PRODUCE_RATE = .5;
    function getPlantProduce(level, type) {
      var produce;
      type < 2 ? produce = this.seedData[type].basicProduce + 3 * (level - 1) : type < 5 ? produce = this.seedData[type].basicProduce + 2 * (level - 1) : type < 9 && (produce = this.seedData[type].basicProduce + 1 * (level - 1));
      return produce;
    }
    function getLevelUpExp(level) {
      var sum = 4e3, i = 2;
      while (i < level) {
        i++;
        sum += (i - 1) * (5e3 + 1e3 * Math.floor(i / 5));
      }
      return sum;
    }
    function getReapExp(type, produce) {
      var exp = 0;
      switch (type) {
       case 0:
        exp = 500 * produce;
        break;

       case 1:
        exp = 1600 * produce;
        break;

       case 2:
        exp = 3760 * produce;
        break;

       case 3:
        exp = 8350 * produce;
        break;

       case 4:
        exp = 17200 * produce;
        break;

       case 5:
        exp = 31300 * produce;
        break;

       case 6:
        exp = 45100 * produce;
        break;

       case 7:
        exp = 61400 * produce;
        break;

       case 8:
        exp = 67500 * produce;
      }
      console.log(exp);
      return exp;
    }
    var insectAppearTimeList = [ [ 0, 0, 0 ], [ 0, 0, 0 ], [ 0, 0, 0 ], [ 0, 50, 20 ], [ 20, 120, 60 ], [ 20, 240, 120 ], [ 30, 360, 180 ], [ 30, 480, 240 ], [ 30, 600, 360 ] ];
    var insectAppearPositionList = [ [ [ cc.v2(0, -110), cc.v2(-60, -65), cc.v2(-10, -80), cc.v2(70, -80) ], [ cc.v2(-60, -40), cc.v2(-10, -10), cc.v2(-0, -75), cc.v2(70, -60) ], [ cc.v2(-60, 20), cc.v2(-10, 30), cc.v2(-10, -30), cc.v2(70, -10) ] ], [ [ cc.v2(-60, -85), cc.v2(-10, -50), cc.v2(0, -100), cc.v2(70, -80) ], [ cc.v2(-60, 5), cc.v2(-7, 40), cc.v2(0, -40), cc.v2(20, -40) ], [ cc.v2(-60, -80), cc.v2(-30, 40), cc.v2(10, 0), cc.v2(60, 50) ] ], [ [ cc.v2(-60, -60), cc.v2(-20, 0), cc.v2(10, -80), cc.v2(90, -40) ], [ cc.v2(-60, -60), cc.v2(-20, 0), cc.v2(10, -80), cc.v2(90, -40) ], [ cc.v2(-60, -45), cc.v2(-20, 30), cc.v2(10, -60), cc.v2(90, 0) ] ], [ [ cc.v2(-20, -90), cc.v2(-20, -50), cc.v2(20, -60), cc.v2(30, -80) ], [ cc.v2(-20, 40), cc.v2(-20, -10), cc.v2(20, 20), cc.v2(30, -30) ], [ cc.v2(-70, 40), cc.v2(-20, 80), cc.v2(20, 30), cc.v2(80, 10) ] ], [ [ cc.v2(-70, -70), cc.v2(-20, -50), cc.v2(0, -100), cc.v2(50, -70) ], [ cc.v2(-50, -70), cc.v2(-10, -40), cc.v2(0, -90), cc.v2(50, -55) ], [ cc.v2(-50, -60), cc.v2(0, -30), cc.v2(20, -20), cc.v2(80, -55) ] ], [ [ cc.v2(-50, -90), cc.v2(-15, -50), cc.v2(20, -100), cc.v2(80, -80) ], [ cc.v2(-50, -90), cc.v2(-15, -50), cc.v2(6, -90), cc.v2(80, -80) ], [ cc.v2(-50, -60), cc.v2(-15, -15), cc.v2(5, -60), cc.v2(80, -40) ] ], [ [ cc.v2(-50, -90), cc.v2(-15, -60), cc.v2(6, -100), cc.v2(60, -80) ], [ cc.v2(-105, 30), cc.v2(-15, 35), cc.v2(20, -15), cc.v2(100, -10) ], [ cc.v2(-105, 50), cc.v2(-15, 75), cc.v2(20, 20), cc.v2(95, 50) ] ], [ [ cc.v2(-70, -45), cc.v2(-35, 0), cc.v2(40, -45), cc.v2(70, 0) ], [ cc.v2(-50, -45), cc.v2(-35, 20), cc.v2(50, -45), cc.v2(65, 15) ], [ cc.v2(-50, -5), cc.v2(-20, 75), cc.v2(50, -10), cc.v2(90, 70) ] ], [ [ cc.v2(-80, -85), cc.v2(-20, -50), cc.v2(15, -110), cc.v2(80, -80) ], [ cc.v2(-80, -50), cc.v2(-20, -20), cc.v2(15, -75), cc.v2(80, -40) ], [ cc.v2(-80, -25), cc.v2(-20, 0), cc.v2(15, -60), cc.v2(80, -30) ] ] ];
    var seedLevelUp = cc.Enum({
      BASIC_COUNT: 3,
      LEVELUP_RATE: .2
    });
    var costTime = cc.Enum({
      ONE_MIN: 60,
      HALF_AN_HOUR: 1800,
      ONE_HOUR: 3600
    });
    var IndirectTime = 300;
    var waterStartPos = [ cc.v2(-85, 130), cc.v2(-20, 150), cc.v2(0, 140), cc.v2(50, 110), cc.v2(80, 120) ];
    var waterEndPos = [ cc.v2(-85, -90), cc.v2(-20, -70), cc.v2(0, -100), cc.v2(50, -100), cc.v2(80, -80) ];
    var shopLimitedList = [ 1, 15, 30, 50, 75, 100, 125, 160, 180 ];
    var plantLimitedList = [ 1, 3, 6, 10, 14, 18, 22, 25, 30 ];
    var plantUnlockSeedReward = [ 5, 4, 3, 2, 2, 2, 2, 2, 2 ];
    var wordTips = {
      1001: "The coins is not enough!",
      1002: "Please click the land to plant!",
      1003: "The crops is mature!",
      1004: "illegal operate!",
      1005: "sorry , you need more diamond!",
      1006: "sorry , you need more money!",
      1007: "exchange success!",
      1008: "The props is not enough!",
      1009: "The seed is not enough!"
    };
    var seedLabel = [ {
      name: "carrot",
      matureTime: "3 min"
    }, {
      name: "corn",
      matureTime: "12 min"
    }, {
      name: "pea",
      matureTime: "33 min"
    }, {
      name: "tomato",
      matureTime: "1hour 15 min"
    }, {
      name: "pepper",
      matureTime: "3 hours"
    }, {
      name: "cabbage",
      matureTime: "6 hours 15 min"
    }, {
      name: "peanut",
      matureTime: "9 hours"
    }, {
      name: "pumpkin",
      matureTime: "12 hours  15 min"
    }, {
      name: "paddy",
      matureTime: "16 hours 30 min"
    } ];
    var expThreshold = 1e3;
    module.exports = {
      landPositionList: landPositionList,
      landDetail: landDetail,
      costTime: costTime,
      plantInfo: plantInfo,
      IndirectTime: IndirectTime,
      propList: propList,
      OperationReward: OperationReward,
      warehouseData: warehouseData,
      seedData: seedData,
      propsData: propsData,
      shopSeedData: shopSeedData,
      seedLevelUp: seedLevelUp,
      WHTER_COUNT_MAX: WHTER_COUNT_MAX,
      PRODUCE_RATE: PRODUCE_RATE,
      propShopList: propShopList,
      waterStartPos: waterStartPos,
      waterEndPos: waterEndPos,
      shopLimitedList: shopLimitedList,
      plantLimitedList: plantLimitedList,
      insectAppearTimeList: insectAppearTimeList,
      insectAppearPositionList: insectAppearPositionList,
      landUnlockLevelList: landUnlockLevelList,
      landUnlockAndLevelUpCost: landUnlockAndLevelUpCost,
      wordTips: wordTips,
      plantUnlockSeedReward: plantUnlockSeedReward,
      changeRate: changeRate,
      seedLabel: seedLabel,
      expThreshold: expThreshold,
      getPlantProduce: getPlantProduce,
      getLevelUpExp: getLevelUpExp,
      getReapExp: getReapExp
    };
    cc._RF.pop();
  }, {} ],
  FarmManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "193c6QZAghC/pW9ZoOS707h", "FarmManager");
    "use strict";
    var FarmData = require("./FarmData");
    var FarmUtils = require("./framUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        carema: cc.Node,
        landContainer: cc.Node,
        ground: cc.Prefab,
        farm: cc.Node,
        waterFall: cc.Prefab,
        insect: cc.Prefab,
        fingerFire: cc.Prefab
      },
      onLoad: function onLoad() {
        this.nodePos = this.carema.getPosition();
        this.farm.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.farm.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        this.farm.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.farm.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        cc.systemEvent.on("UPDATE_FARM", this.updateFarmInfo, this);
        cc.systemEvent.on("UPDATE_LAND", this.updateLandData, this);
        cc.systemEvent.on("UPDATE_WAREHOUSE", this.updateWarehouseData, this);
        cc.systemEvent.on("UPDATE_SEED", this.updateSeedData, this);
        cc.systemEvent.on("UPDATE_PROPS", this.updatePropsData, this);
        cc.systemEvent.on("SAVE_LAND_DATA", this.saveLandInfo, this);
        cc.systemEvent.on("ADD_COINS", this.addCoins, this);
        cc.systemEvent.on("HIDE_LAND_STATUE", this.hideAllPlantStatue, this);
        cc.systemEvent.on("SHOW_LAND_STATUE", this.showAllPlantStatue, this);
        cc.systemEvent.on("FERT_ALLLAND_TIME", this.fertAllLandSpeed, this);
        cc.systemEvent.on("WATER_ALLLAND_TIME", this.waterAllLandSpeed, this);
        cc.systemEvent.on("UPDATE_LAND_STATUE", this.checkLandStatue, this);
        this.farm.on("manager_land", this.managerLandStatues, this);
        cc.game.FarmUtils = FarmUtils;
        cc.game.FarmData = FarmData;
        this.init();
        this.initNodePool();
        cc.director.FarmManager = this;
        var manager = cc.director.getCollisionManager();
        manager.enabled = true;
      },
      init: function init() {
        cc.director.currentPlantIndex = -1;
        cc.director.currentPropsIndex = -1;
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        if (!farmInfo) {
          farmInfo = {
            level: 1,
            exp: 0,
            coin: 0
          };
          FarmUtils.setLocalData(farmInfo, "localFarmInfo");
        }
        if (cc.director.ServerManager) return;
        cc.director.ServerManager = require("../ServerManager");
      },
      initNodePool: function initNodePool() {
        var nodePool = new cc.NodePool();
        for (var i = 0; i < 30; i++) {
          var item = cc.instantiate(this.waterFall);
          nodePool.put(item);
        }
        cc.director.nodePool = nodePool;
        var insectPool = new cc.NodePool();
        var item1;
        for (var j = 0; j < 36; j++) {
          item1 = cc.instantiate(this.insect);
          insectPool.put(item1);
        }
        cc.director.insectPool = insectPool;
      },
      testTime: function testTime() {
        var serverTime = FarmUtils.getServerTime();
        if (!serverTime) {
          var currennt = Math.floor(new Date().getTime() / 1e3);
          FarmUtils.saveServerTime(currennt);
          FarmUtils.saveSyncServerTime();
        }
      },
      onTouchStart: function onTouchStart(event) {
        var fingerFire = cc.instantiate(this.fingerFire);
        var position = event.getLocation();
        var nodePos = this.farm.convertToNodeSpaceAR(position);
        fingerFire.parent = this.farm;
        fingerFire.position = nodePos;
        this.fFire = fingerFire;
        this.fFire.active = false;
      },
      onTouchMove: function onTouchMove(event) {
        (Math.abs(event.touch._prevPoint.x - event.touch._startPoint.x) >= 10 || Math.abs(event.touch._prevPoint.x - event.touch._startPoint.x) >= 10) && (this.fFire.active = true);
        var pos = event.getDelta();
        this.fFire.x += pos.x;
        this.fFire.y += pos.y;
      },
      onTouchEnd: function onTouchEnd() {
        cc.systemEvent.emit("MANAGER_LAND", {
          index: 20
        });
        this.fFire.removeFromParent();
      },
      onTouchCancel: function onTouchCancel() {
        this.fFire.removeFromParent();
      },
      initFarmContainer: function initFarmContainer() {
        var positionList = FarmData.landPositionList;
        var landDetail;
        landDetail = FarmUtils.checkLocalData("landData") ? FarmUtils.getLocalData("landData") : FarmData.landDetail;
        for (var i = 0; i < landDetail.length; i++) {
          var item_land = cc.instantiate(this.ground);
          item_land.position = positionList[landDetail[i].index];
          item_land.parent = this.landContainer;
          item_land.getComponent("groundLand").initGroundLand(landDetail[i]);
        }
        this.saveLandInfo();
      },
      getNextUnlockLand: function getNextUnlockLand() {
        var list = FarmData.landUnlockLevelList;
        var currentLevel, farmInfo;
        farmInfo = FarmUtils.getLocalData("localFarmInfo");
        currentLevel = farmInfo ? farmInfo.level : 1;
        console.log(list, currentLevel, "179");
        var index = -1;
        for (var i = 0; i < list.length - 1; i++) if (list[i] > currentLevel && list[i + 1] <= currentLevel) {
          index = i;
          break;
        }
        if (index >= 0) return index;
      },
      isLandUnlockBylevelUp: function isLandUnlockBylevelUp() {
        var nextIndex = this.getNextUnlockLand();
        console.log(nextIndex, "191");
        var nextIndexLand = this.landContainer.children[nextIndex];
        var canUnlockLand = this.landContainer.children[nextIndex + 1];
        console.log(nextIndexLand, canUnlockLand);
        var s1 = nextIndexLand.getComponent("groundLand");
        var s2 = canUnlockLand.getComponent("groundLand");
        console.log(s1, s2);
        if (0 == s1.info.isLock) return;
        s1.displayLandStatue(0, false);
        if (3 == s2.info.isLock && 2 == s2.info.isLock) return;
        s2.displayLandStatue(2, false);
      },
      updateLandData: function updateLandData(event) {
        var singleData = event;
        var landData = FarmUtils.getLocalData("landData");
        var index = -1;
        if (!!landData) for (var i = 0; i < landData.length; i++) singleData.index == landData[i].index && (index = i);
        index >= 0 && landData.splice(index, 1, singleData);
        FarmUtils.setLocalData(landData, "landData");
      },
      updateWarehouseData: function updateWarehouseData(event) {
        var singleData = event.data;
        var warehouseData = FarmUtils.getLocalData("warehouseData");
        if (warehouseData) {
          var len = warehouseData.length;
          if (1 == event.mode) {
            var tag1 = -1;
            for (var i = 0; i < len; i++) if (singleData.type == warehouseData[i].type) {
              warehouseData[i].number += singleData.number;
              tag1 = i;
              break;
            }
            tag1 < 0 && warehouseData.push(singleData);
            cc.systemEvent.emit("OBTAIN_CROPS", {
              data: singleData,
              worldPos: event.worldPos
            });
          } else {
            var tag2 = -1;
            for (var _i = 0; _i < len; _i++) if (singleData.type == warehouseData[_i].type) {
              singleData.number >= warehouseData[_i].number ? warehouseData.splice(_i, 1) : warehouseData[_i].number -= singleData.number;
              tag2 = _i;
              break;
            }
            tag2 < 0 && cc.log("error:something wroing when you sell from you warehouse!");
          }
        } else {
          if (1 != event.mode) return;
          warehouseData = [];
          warehouseData.push(singleData);
          cc.systemEvent.emit("OBTAIN_CROPS", {
            data: singleData,
            worldPos: event.worldPos
          });
        }
        FarmUtils.setLocalData(warehouseData, "warehouseData");
      },
      updateFarmInfo: function updateFarmInfo(event) {
        var exp = event.exp;
        var coins = event.coins;
        var worldPos = event.worldPos;
        var num = -1;
        var islevelUp = false;
        cc.systemEvent.emit("ADD_COINS", coins);
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        farmInfo || (farmInfo = {
          level: 1,
          exp: 0,
          coin: 0
        });
        var current = farmInfo.level;
        farmInfo.exp += exp;
        this.computedExpLevelUpCount(farmInfo);
        current < farmInfo.level && (islevelUp = true);
        num = farmInfo.exp / FarmData.getLevelUpExp(farmInfo.level + 1);
        FarmUtils.setLocalData(farmInfo, "localFarmInfo");
        cc.systemEvent.emit("START_TO_END", {
          worldPos: worldPos,
          num: num,
          exp: exp,
          islevelUp: islevelUp
        });
      },
      computedExpLevelUpCount: function computedExpLevelUpCount(info) {
        var nextLevelExp = FarmData.getLevelUpExp(info.level + 1);
        if (nextLevelExp > info.exp) ; else {
          info.exp -= nextLevelExp;
          info.level += 1;
          this.computedExpLevelUpCount(info);
        }
      },
      checkLandStatue: function checkLandStatue() {
        var landData = FarmUtils.getLocalData("landData");
        if (!!landData) for (var i = 0; i < landData.length; i++) if (2 == landData[i].isLock) {
          var land = this.landContainer.children[i];
          "ground" == land.name && land.getComponent("groundLand").displayLandStatue(2, false);
        }
      },
      isLandUnlockedAfterLevelUp: function isLandUnlockedAfterLevelUp(level) {
        var list = FarmData.landUnlockLevelList;
        var indexList = [];
        for (var i = 0; i < list.length; i++) level >= list[i] && indexList.push(i);
        if (indexList.length > 0) {
          var landData = FarmUtils.getLocalData("landData");
          if (!!landData) for (var _i2 = 0; _i2 < indexList.length; _i2++) {
            var index = indexList[_i2];
            var item = landData[index];
            if (!!item.isLock) {
              var node = this.landContainer.children[index];
              var wp = node.parent.convertToWorldSpaceAR(node.position);
              var obj = {};
              obj.worldPos = wp;
              obj.index = index;
              cc.director.farmDialog.showLandUnlockPormpt(obj);
            }
          }
        }
        var nIndex = FarmData.plantLimitedList.indexOf(level);
        nIndex >= 0 && cc.systemEvent.emit("SHOW_PLANT_UNLOCK", {
          type: nIndex
        });
      },
      updateSeedData: function updateSeedData(event) {
        var data = event.data;
        var seedData = FarmUtils.getLocalData("seedData");
        seedData || (seedData = FarmData.seedData);
        var len = seedData.length, index = -1;
        for (var i = 0; i < len; i++) if (data.type == seedData[i].type) {
          index = i;
          break;
        }
        if (index >= 0) {
          var item = seedData[index];
          if (1 == data.mode) {
            item.number += data.number;
            cc.systemEvent.emit("UPDATE_FARM_COINS");
          } else if (2 == data.mode) {
            item.number -= data.number;
            cc.systemEvent.emit("UPDATE_OPERATE_NUMBER", {
              number: item.number
            });
          } else 3 == mode ? item.level++ : 4 == mode && (item.isUnlock = true);
        }
        FarmUtils.setLocalData(seedData, "seedData");
      },
      updatePropsData: function updatePropsData(event) {
        var data = event.data;
        console.log(data);
        var propsData = FarmUtils.getLocalData("propsData");
        propsData || (propsData = FarmData.propsData);
        var len = propsData.length, index = -1;
        for (var i = 0; i < len; i++) if (data.type == propsData[i].type) {
          index = i;
          break;
        }
        if (index >= 0) {
          var item = propsData[index];
          if (1 == data.mode) {
            item.number++;
            cc.systemEvent.emit("UPDATE_FARM_COINS");
          } else if (2 == data.mode) {
            item.number--;
            cc.systemEvent.emit("UPDATE_OPERATE_NUMBER", {
              number: item.number
            });
            item.number <= 0 && propsData.splice(index, 1);
          } else 3 == mode && (item.isUnlock = true);
        } else {
          var tempItem = {
            type: data.type,
            number: 1
          };
          propsData.push(tempItem);
        }
        FarmUtils.setLocalData(propsData, "propsData");
      },
      addCoins: function addCoins(event) {
        if ("number" != typeof event) {
          cc.log("params is not a number,please check!---------------addCoins");
          return;
        }
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        farmInfo.coin += event;
        FarmUtils.setLocalData(farmInfo, "localFarmInfo");
        cc.systemEvent.emit("UPDATE_FARM_COINS", {
          number: event
        });
      },
      saveLandInfo: function saveLandInfo() {
        var hasData = FarmUtils.checkLocalData("landData");
        if (!hasData) {
          var data = FarmData.landDetail;
          FarmUtils.setLocalData(data, "landData");
        }
      },
      getCurrentAllLandExp: function getCurrentAllLandExp() {
        var children = this.landContainer.children;
        var sum = 0;
        for (var i = 0; i < children.length; i++) if ("ground" == children[i].name) {
          var obj = children[i].getComponent("groundLand");
          if (!obj.info.isUse) continue;
          sum += obj.getCurrentLandExp();
        }
        return sum;
      },
      collectAllLandExp: function collectAllLandExp() {
        var children = this.landContainer.children;
        for (var i = 0; i < children.length; i++) if ("ground" == children[i].name) {
          var obj = children[i].getComponent("groundLand");
          if (!obj.info.isUse) continue;
          sum += obj.progressNode.collectExp();
        }
      },
      resetAllLandExp: function resetAllLandExp() {
        var children = this.landContainer.children;
        for (var i = 0; i < children.length; i++) if ("ground" == children[i].name) {
          var obj = children[i].getComponent("groundLand");
          if (!obj.info.isUse) continue;
          obj.progressNode.resetAccumulateStartTime();
        }
      },
      waterAllLand: function waterAllLand(effectTime) {
        var landData = FarmUtils.getLocalData("landData");
        var len = landData.length;
        for (var i = 0; i < len; i++) landData[i].waterTime += effectTime;
        FarmUtils.setLocalData(landData, "landData");
      },
      jumpToMainScreen: function jumpToMainScreen() {
        cc.systemEvent.emit("FADEIN_COULD_ANIMA");
        this.scheduleOnce(function() {
          cc.director.loadScene("mainScreen");
          cc.director.sceneMsg = "farm";
        }, 1);
      },
      hideAllPlantStatue: function hideAllPlantStatue() {
        var children = this.landContainer.children;
        for (var i = 0; i < children.length; i++) children[i].getComponent("groundLand").changePlantStatue(1);
      },
      showAllPlantStatue: function showAllPlantStatue() {
        var children = this.landContainer.children;
        for (var i = 0; i < children.length; i++) "ground" == children[i].name && children[i].getComponent("groundLand").changePlantStatue(2);
      },
      fertAllLandSpeed: function fertAllLandSpeed(event) {
        var type, reduceTime;
        type = event.type;
        reduceTime = FarmData.propShopList[type].effectTime * FarmData.costTime.ONE_HOUR;
        var children = this.landContainer.children;
        for (var i = 0; i < children.length; i++) {
          var s = children[i].getComponent("groundLand");
          s.updatePlantReapRestTime(reduceTime);
          s.fertAnimation(type);
        }
      },
      waterAllLandSpeed: function waterAllLandSpeed(event) {
        var num, reduceTime, children;
        num = event.number;
        children = this.landContainer.children;
        reduceTime = num * FarmData.costTime.ONE_MIN;
        for (var i = 0; i < children.length; i++) {
          var s = children[i].getComponent("groundLand");
          s.updatePlantReapRestTime(reduceTime);
          s.waterAnimation(num);
        }
      },
      managerLandStatues: function managerLandStatues(event) {
        var index = event.detail.index;
        var children = this.landContainer.children;
        for (var i = 0; i < children.length; i++) {
          if (i == index || "ground" != children[i].name) continue;
          children[i].getComponent("groundLand").managerLand(2);
        }
        this.cacheTime = 6;
        if (cc.director.getScheduler().isScheduled(this.renormalLand, this)) return;
        this.schedule(this.renormalLand, 1);
      },
      renormalLand: function renormalLand() {
        if (this.cacheTime && this.cacheTime > 0) this.cacheTime--; else {
          this.unschedule(this.renormalLand);
          var children = this.landContainer.children;
          for (var i = 0; i < children.length; i++) "ground" == children[i].name && children[i].getComponent("groundLand").managerLand(2);
        }
      },
      onEnable: function onEnable() {
        FarmUtils.login();
        this.testTime();
        this.initFarmContainer();
        FarmUtils.resize();
      },
      start: function start() {
        cc.systemEvent.emit("FADEOUT_COULD_ANIMA");
        this.scheduleOnce(function() {
          this.isNeedEjectOfflinePrompt();
        }, 2);
      },
      isNeedEjectOfflinePrompt: function isNeedEjectOfflinePrompt() {
        var exp = this.getCurrentAllLandExp();
        exp >= FarmData.expThreshold && cc.director.farmDialog.showOfflineExpPrompt();
      },
      onDestroy: function onDestroy() {},
      jump: function jump() {}
    });
    cc._RF.pop();
  }, {
    "../ServerManager": "ServerManager",
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  GameManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6bbf2hBEXBEW6SadF+6Jndd", "GameManager");
    "use strict";
    var lifeInterval = 3600;
    var Utils = require("./utils");
    var GameData = require("./gameData");
    var MaxLife = 8;
    cc.Class({
      extends: cc.Component,
      properties: {
        timeDisplay: cc.Node,
        lifeNumber: cc.Label,
        animaTips: require("./mainScreen/animaTips"),
        changeName: require("./mainScreen/changeName"),
        tipsPrompt: require("./mainScreen/tipsPrompt")
      },
      onLoad: function onLoad() {
        cc.game.addPersistRootNode(this.node);
        cc.systemEvent.on("TIME_COUNT_FUNC", this.checkTimeCount, this);
        cc.systemEvent.on("UPDATE_DATA_GAME", this.updateData, this);
        cc.game.on(cc.game.EVENT_HIDE, this.updateData, this);
        cc.systemEvent.on("LOAD_TIPS_SHOW", this.showLoadingAnimation, this);
        cc.systemEvent.on("LOAD_TIPS_HIDE", this.hideLoadingAnimation, this);
        cc.systemEvent.on("CHANGE_NAME_SHOW", this.showChangeNamePrompt, this);
        cc.systemEvent.on("CHANGE_NAME_HIDE", this.hideChangeNamePrompt, this);
        cc.systemEvent.on("TIPS_PROMPT_SHOW", this.showTipsPromptView, this);
        cc.systemEvent.on("TIPS_PROMPT_HIDE", this.hideTipsPromptView, this);
      },
      updateData: function updateData() {
        var data = GameData.getGameData();
        Utils.updateGameInfo(data);
        console.log("update game data!");
      },
      showLoadingAnimation: function showLoadingAnimation() {
        this.animaTips.showView();
      },
      hideLoadingAnimation: function hideLoadingAnimation() {
        this.animaTips.hideView();
      },
      showChangeNamePrompt: function showChangeNamePrompt() {
        this.changeName.showView();
      },
      hideChangeNamePrompt: function hideChangeNamePrompt() {
        this.changeName.hideView();
      },
      showTipsPromptView: function showTipsPromptView(event) {
        this.tipsPrompt.showView(event.type);
      },
      hideTipsPromptView: function hideTipsPromptView() {
        this.tipsPrompt.hideView();
      },
      checkTimeCount: function checkTimeCount(event) {
        var isScheduled = cc.director.getScheduler().isScheduled(this.timeDowmCount, this);
        isScheduled || this.timeCount();
      },
      timeCount: function timeCount() {
        if (GameData.lifeNumber < MaxLife) {
          var endTime = cc.sys.localStorage.getItem("costTime");
          if (!endTime) {
            endTime = Math.floor(new Date().getTime() / 1e3) + lifeInterval;
            cc.sys.localStorage.setItem("restTime", endTime);
          } else endTime = JSON.parse(endTime) + lifeInterval;
          this.time = endTime;
          this.schedule(this.timeDowmCount, 1);
        }
      },
      timeDowmCount: function timeDowmCount() {
        var label = Utils.countDonwTime(this.time);
        if (!label) {
          this.unschedule(this.timeDowmCount);
          if (GameData.lifeNumber < MaxLife) {
            GameData.lifeNumber++;
            var cur = Math.floor(new Date().getTime() / 1e3);
            cc.sys.localStorage.setItem("costTime", cur);
            window.NativeManager.reportLifeChanged(GameData.lifeNumber);
            GameData.storeGameData();
            cc.systemEvent.emit("UPDATE_LIFE");
            if (GameData.lifeNumber >= MaxLife) cc.sys.localStorage.removeItem("restTime"); else {
              var restTime = Math.floor(new Date().getTime() / 1e3) + lifeInterval;
              cc.sys.localStorage.setItem("restTime", restTime);
            }
          }
          return;
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./gameData": "gameData",
    "./mainScreen/animaTips": "animaTips",
    "./mainScreen/changeName": "changeName",
    "./mainScreen/tipsPrompt": "tipsPrompt",
    "./utils": "utils"
  } ],
  LeaderBoardManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6cd1fwtApVCo4ZgZvDdlD0G", "LeaderBoardManager");
    "use strict";
    var md5Encode = function md5Encode(data) {
      function fflog(msg) {
        try {
          console.log(msg);
        } catch (e) {}
      }
      function to_zerofilled_hex(n) {
        var t1 = (n >>> 24).toString(16);
        var t2 = (16777215 & n).toString(16);
        return "00".substr(0, 2 - t1.length) + t1 + "000000".substr(0, 6 - t2.length) + t2;
      }
      function chars_to_bytes(ac) {
        var retval = [];
        for (var i = 0; i < ac.length; i++) retval = retval.concat(str_to_bytes(ac[i]));
        return retval;
      }
      function int64_to_bytes(num) {
        var retval = [];
        for (var i = 0; i < 8; i++) {
          retval.push(255 & num);
          num >>>= 8;
        }
        return retval;
      }
      function rol(num, places) {
        return num << places & 4294967295 | num >>> 32 - places;
      }
      function fF(b, c, d) {
        return b & c | ~b & d;
      }
      function fG(b, c, d) {
        return d & b | ~d & c;
      }
      function fH(b, c, d) {
        return b ^ c ^ d;
      }
      function fI(b, c, d) {
        return c ^ (b | ~d);
      }
      function bytes_to_int32(arr, off) {
        return arr[off + 3] << 24 | arr[off + 2] << 16 | arr[off + 1] << 8 | arr[off];
      }
      function str_to_bytes(str) {
        var retval = [];
        for (var i = 0; i < str.length; i++) if (str.charCodeAt(i) <= 127) retval.push(str.charCodeAt(i)); else {
          var tmp = encodeURIComponent(str.charAt(i)).substr(1).split("%");
          for (var j = 0; j < tmp.length; j++) retval.push(parseInt(tmp[j], 16));
        }
        return retval;
      }
      function int128le_to_hex(a, b, c, d) {
        var ra = "";
        var t = 0;
        var ta = 0;
        for (var i = 3; i >= 0; i--) {
          ta = arguments[i];
          t = 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= ta;
          ra += to_zerofilled_hex(t);
        }
        return ra;
      }
      var databytes = null;
      if ("string" == typeof data) databytes = str_to_bytes(data); else {
        if (data.constructor != Array) {
          fflog("input data type mismatch");
          return null;
        }
        if (0 === data.length) databytes = data; else if ("string" == typeof data[0]) databytes = chars_to_bytes(data); else {
          if ("number" != typeof data[0]) {
            fflog("input data type mismatch");
            return null;
          }
          databytes = data;
        }
      }
      var org_len = databytes.length;
      databytes.push(128);
      var tail = databytes.length % 64;
      if (tail > 56) {
        for (var i = 0; i < 64 - tail; i++) databytes.push(0);
        tail = databytes.length % 64;
      }
      for (i = 0; i < 56 - tail; i++) databytes.push(0);
      databytes = databytes.concat(int64_to_bytes(8 * org_len));
      var h0 = 1732584193;
      var h1 = 4023233417;
      var h2 = 2562383102;
      var h3 = 271733878;
      var a = 0, b = 0, c = 0, d = 0;
      function _add(n1, n2) {
        return 4294967295 & n1 + n2;
      }
      var updateRun = function updateRun(nf, sin32, dw32, b32) {
        var temp = d;
        d = c;
        c = b;
        b = _add(b, rol(_add(a, _add(nf, _add(sin32, dw32))), b32));
        a = temp;
      };
      for (i = 0; i < databytes.length / 64; i++) {
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        var ptr = 64 * i;
        updateRun(fF(b, c, d), 3614090360, bytes_to_int32(databytes, ptr), 7);
        updateRun(fF(b, c, d), 3905402710, bytes_to_int32(databytes, ptr + 4), 12);
        updateRun(fF(b, c, d), 606105819, bytes_to_int32(databytes, ptr + 8), 17);
        updateRun(fF(b, c, d), 3250441966, bytes_to_int32(databytes, ptr + 12), 22);
        updateRun(fF(b, c, d), 4118548399, bytes_to_int32(databytes, ptr + 16), 7);
        updateRun(fF(b, c, d), 1200080426, bytes_to_int32(databytes, ptr + 20), 12);
        updateRun(fF(b, c, d), 2821735955, bytes_to_int32(databytes, ptr + 24), 17);
        updateRun(fF(b, c, d), 4249261313, bytes_to_int32(databytes, ptr + 28), 22);
        updateRun(fF(b, c, d), 1770035416, bytes_to_int32(databytes, ptr + 32), 7);
        updateRun(fF(b, c, d), 2336552879, bytes_to_int32(databytes, ptr + 36), 12);
        updateRun(fF(b, c, d), 4294925233, bytes_to_int32(databytes, ptr + 40), 17);
        updateRun(fF(b, c, d), 2304563134, bytes_to_int32(databytes, ptr + 44), 22);
        updateRun(fF(b, c, d), 1804603682, bytes_to_int32(databytes, ptr + 48), 7);
        updateRun(fF(b, c, d), 4254626195, bytes_to_int32(databytes, ptr + 52), 12);
        updateRun(fF(b, c, d), 2792965006, bytes_to_int32(databytes, ptr + 56), 17);
        updateRun(fF(b, c, d), 1236535329, bytes_to_int32(databytes, ptr + 60), 22);
        updateRun(fG(b, c, d), 4129170786, bytes_to_int32(databytes, ptr + 4), 5);
        updateRun(fG(b, c, d), 3225465664, bytes_to_int32(databytes, ptr + 24), 9);
        updateRun(fG(b, c, d), 643717713, bytes_to_int32(databytes, ptr + 44), 14);
        updateRun(fG(b, c, d), 3921069994, bytes_to_int32(databytes, ptr), 20);
        updateRun(fG(b, c, d), 3593408605, bytes_to_int32(databytes, ptr + 20), 5);
        updateRun(fG(b, c, d), 38016083, bytes_to_int32(databytes, ptr + 40), 9);
        updateRun(fG(b, c, d), 3634488961, bytes_to_int32(databytes, ptr + 60), 14);
        updateRun(fG(b, c, d), 3889429448, bytes_to_int32(databytes, ptr + 16), 20);
        updateRun(fG(b, c, d), 568446438, bytes_to_int32(databytes, ptr + 36), 5);
        updateRun(fG(b, c, d), 3275163606, bytes_to_int32(databytes, ptr + 56), 9);
        updateRun(fG(b, c, d), 4107603335, bytes_to_int32(databytes, ptr + 12), 14);
        updateRun(fG(b, c, d), 1163531501, bytes_to_int32(databytes, ptr + 32), 20);
        updateRun(fG(b, c, d), 2850285829, bytes_to_int32(databytes, ptr + 52), 5);
        updateRun(fG(b, c, d), 4243563512, bytes_to_int32(databytes, ptr + 8), 9);
        updateRun(fG(b, c, d), 1735328473, bytes_to_int32(databytes, ptr + 28), 14);
        updateRun(fG(b, c, d), 2368359562, bytes_to_int32(databytes, ptr + 48), 20);
        updateRun(fH(b, c, d), 4294588738, bytes_to_int32(databytes, ptr + 20), 4);
        updateRun(fH(b, c, d), 2272392833, bytes_to_int32(databytes, ptr + 32), 11);
        updateRun(fH(b, c, d), 1839030562, bytes_to_int32(databytes, ptr + 44), 16);
        updateRun(fH(b, c, d), 4259657740, bytes_to_int32(databytes, ptr + 56), 23);
        updateRun(fH(b, c, d), 2763975236, bytes_to_int32(databytes, ptr + 4), 4);
        updateRun(fH(b, c, d), 1272893353, bytes_to_int32(databytes, ptr + 16), 11);
        updateRun(fH(b, c, d), 4139469664, bytes_to_int32(databytes, ptr + 28), 16);
        updateRun(fH(b, c, d), 3200236656, bytes_to_int32(databytes, ptr + 40), 23);
        updateRun(fH(b, c, d), 681279174, bytes_to_int32(databytes, ptr + 52), 4);
        updateRun(fH(b, c, d), 3936430074, bytes_to_int32(databytes, ptr), 11);
        updateRun(fH(b, c, d), 3572445317, bytes_to_int32(databytes, ptr + 12), 16);
        updateRun(fH(b, c, d), 76029189, bytes_to_int32(databytes, ptr + 24), 23);
        updateRun(fH(b, c, d), 3654602809, bytes_to_int32(databytes, ptr + 36), 4);
        updateRun(fH(b, c, d), 3873151461, bytes_to_int32(databytes, ptr + 48), 11);
        updateRun(fH(b, c, d), 530742520, bytes_to_int32(databytes, ptr + 60), 16);
        updateRun(fH(b, c, d), 3299628645, bytes_to_int32(databytes, ptr + 8), 23);
        updateRun(fI(b, c, d), 4096336452, bytes_to_int32(databytes, ptr), 6);
        updateRun(fI(b, c, d), 1126891415, bytes_to_int32(databytes, ptr + 28), 10);
        updateRun(fI(b, c, d), 2878612391, bytes_to_int32(databytes, ptr + 56), 15);
        updateRun(fI(b, c, d), 4237533241, bytes_to_int32(databytes, ptr + 20), 21);
        updateRun(fI(b, c, d), 1700485571, bytes_to_int32(databytes, ptr + 48), 6);
        updateRun(fI(b, c, d), 2399980690, bytes_to_int32(databytes, ptr + 12), 10);
        updateRun(fI(b, c, d), 4293915773, bytes_to_int32(databytes, ptr + 40), 15);
        updateRun(fI(b, c, d), 2240044497, bytes_to_int32(databytes, ptr + 4), 21);
        updateRun(fI(b, c, d), 1873313359, bytes_to_int32(databytes, ptr + 32), 6);
        updateRun(fI(b, c, d), 4264355552, bytes_to_int32(databytes, ptr + 60), 10);
        updateRun(fI(b, c, d), 2734768916, bytes_to_int32(databytes, ptr + 24), 15);
        updateRun(fI(b, c, d), 1309151649, bytes_to_int32(databytes, ptr + 52), 21);
        updateRun(fI(b, c, d), 4149444226, bytes_to_int32(databytes, ptr + 16), 6);
        updateRun(fI(b, c, d), 3174756917, bytes_to_int32(databytes, ptr + 44), 10);
        updateRun(fI(b, c, d), 718787259, bytes_to_int32(databytes, ptr + 8), 15);
        updateRun(fI(b, c, d), 3951481745, bytes_to_int32(databytes, ptr + 36), 21);
        h0 = _add(h0, a);
        h1 = _add(h1, b);
        h2 = _add(h2, c);
        h3 = _add(h3, d);
      }
      return int128le_to_hex(h3, h2, h1, h0).toUpperCase();
    };
    module.exports = {
      leaderboardName: "three_squirrels",
      getListData: function getListData(uid, callback) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState) if (xhr.status >= 200 && xhr.status < 400) {
            var response = xhr.responseText;
            try {
              var dataJson = JSON.parse(response);
              0 != dataJson.code ? !callback || callback(null) : !callback || callback(dataJson);
            } catch (e) {
              !callback || callback(null);
            }
          } else !callback || callback(null);
        };
        xhr.open("GET", "https://leaderboard.centwiapp.com/get.fcg?leaderboard=" + this.leaderboardName + "&uid=" + uid, true);
        xhr.send();
      },
      setScore: function setScore(uid, userInfo, score, callback) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState) if (xhr.status >= 200 && xhr.status < 400) {
            var response = xhr.responseText;
            try {
              var dataJson = JSON.parse(response);
              if (0 != dataJson.code) !callback || callback(false); else if (!!callback) {
                cc.log(dataJson);
                callback(true, dataJson);
              }
            } catch (e) {
              !callback || callback(false);
            }
          } else !callback || callback(false);
        };
        xhr.open("GET", "https://leaderboard.centwiapp.com/submit.fcg?" + this.getUserInfoParams(uid, userInfo, score), true);
        xhr.send();
      },
      getUserInfoParams: function getUserInfoParams(uid, info, topScore) {
        var userInfo = JSON.parse(info);
        var t = "ffjoffrey100times";
        var token = md5Encode(uid + "" + topScore + this.leaderboardName + t).toLowerCase();
        return "uid=" + uid + "&name=" + userInfo.name + "&avatar=" + userInfo.avatar + "&score=" + topScore + "&leaderboard=" + this.leaderboardName + "&token=" + token;
      }
    };
    cc._RF.pop();
  }, {} ],
  NativeManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4facPsn5BPBrO/6UU2LeOP", "NativeManager");
    "use strict";
    window.NativeManager = {
      splashBegin: function splashBegin() {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "splashBegin", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "splashBegin");
        } catch (e) {}
      },
      splashEnd: function splashEnd() {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "splashEnd", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "splashEnd");
        } catch (e) {}
      },
      getUid: function getUid() {
        try {
          if (cc.sys.os == cc.sys.OS_ANDROID) {
            var uid = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "getOpenUDID", "()Ljava/lang/String;");
            return !uid ? "" : uid;
          }
          if (cc.sys.os == cc.sys.OS_IOS) {
            var uid = jsb.reflection.callStaticMethod("NativeBridge", "getOpenUDID");
            return !uid ? "" : uid;
          }
        } catch (e) {}
        return "";
      },
      getCountryCode: function getCountryCode() {
        try {
          if (cc.sys.os == cc.sys.OS_ANDROID) {
            var code = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "getCountryCode", "()Ljava/lang/String;");
            return !code ? "ZZ" : code;
          }
          if (cc.sys.os == cc.sys.OS_IOS) {
            var code = jsb.reflection.callStaticMethod("NativeBridge", "getCountryCode");
            return !code ? "ZZ" : code;
          }
        } catch (e) {}
        return "ZZ";
      },
      showGift: function showGift() {
        try {
          cc.sys.os == cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showGift", "()V");
        } catch (e) {}
      },
      showBannerAd: function showBannerAd(isShow) {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showBannerAd", "(Z)V", !!isShow) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "showBannerAd:", !!isShow);
        } catch (e) {}
      },
      showInterstitialAd: function showInterstitialAd(position) {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showAd", "(I)V", position) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "showAd:", position);
        } catch (e) {}
      },
      showRate: function showRate() {
        try {
          cc.sys.os == cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showRate", "()V");
        } catch (e) {}
      },
      hasRewardVideo: function hasRewardVideo() {
        try {
          if (cc.sys.os == cc.sys.OS_ANDROID) return !!jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "hasRewardVideo", "()Z");
          if (cc.sys.os == cc.sys.OS_IOS) return jsb.reflection.callStaticMethod("NativeBridge", "hasRewardVideo");
        } catch (e) {
          return false;
        }
      },
      showRewardVideo: function showRewardVideo(callback) {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "showRewardVideo", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "showRewardVideo");
          this.rewardVideoCallback = callback;
        } catch (e) {}
      },
      rewardVideoBack: function rewardVideoBack(isFinished) {
        !this.rewardVideoCallback || this.rewardVideoCallback(1 == isFinished);
      },
      goShare: function goShare(callback) {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "goShare", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "goShare");
          this.shareCallback = callback;
        } catch (e) {}
      },
      shareBack: function shareBack(isSuccess) {
        !this.shareCallback || this.shareCallback(1 == isSuccess);
      },
      reportLifeChanged: function reportLifeChanged(lifeCount) {
        try {
          lifeCount >= 0 && (cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "reportLifeChanged", "(I)V", lifeCount) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "reportLifeChanged:", lifeCount));
        } catch (e) {}
      },
      reportReview: function reportReview(score) {
        try {
          score >= 0 && (cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "reportReview", "(I)V", score) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "reportReview:", score));
        } catch (e) {}
      },
      reportLevelEvent: function reportLevelEvent(level) {
        try {
          level >= 0 && (cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "reportLevelEvent", "(I)V", level) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "reportLevelEvent:", level));
        } catch (e) {}
      },
      hasPhoneHair: function hasPhoneHair() {
        try {
          if (cc.sys.os == cc.sys.OS_ANDROID) return jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "hasPhoneHair", "()Z");
          if (cc.sys.os == cc.sys.OS_IOS) return jsb.reflection.callStaticMethod("NativeBridge", "hasPhoneHair");
        } catch (e) {}
        return false;
      },
      tjReport: function tjReport(level, step, isProp) {
        try {
          level >= 0 && (cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "tjReport", "(III)V", level, step, isProp) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "tjReport:step:isProp", level, step, isProp));
        } catch (e) {}
      },
      goForum: function goForum() {
        try {
          cc.sys.os == cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "goForum", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeBridge", "goForum");
          this.shareCallback = callback;
        } catch (e) {}
      },
      purchaseGoods: function purchaseGoods(goodsId, callback) {
        try {
          cc.sys.os == cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "purchaseGoods", "(I)V", goodsId);
          this.purchaseCallback = callback;
        } catch (e) {}
      },
      purchaseBack: function purchaseBack(goodsId) {
        !this.purchaseCallback || this.purchaseCallback(goodsId);
      },
      login: function login(callback) {
        try {
          cc.sys.os == cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "login", "()V");
          this.loginCallback = callback;
        } catch (e) {}
      },
      loginBack: function loginBack(isSucc, lid) {
        !this.loginCallback || this.loginCallback(isSucc, lid);
      }
    };
    module.exports = window.NativeManager;
    cc._RF.pop();
  }, {} ],
  RegistManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54deaxmf1JFtaiIX2tieQeT", "RegistManager");
    "use strict";
    var countryListArray = [ "Afghanistan", "Algeria", "American Samoan", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrein", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "British Virgin Islands", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burma", "Burundi", "Cambodia", "Cameroon", "Canada", "Canary islands", "Cape Verde", "Cayman Islands", "Central African Republic", "Ceuta and Melilla", "Chad", "Chile", "China", "Christmas Island", "Coate d'Ivoire", "Cocos Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czechoslovakia", "Dem-Rep of Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Fiji", "Finland", "France", "French Polynesia", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea-Bissau", "Guinea", "Guyana", "Haiti", "Hawaii", "Honduras", "Hong Kong", "Hungary", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab", "Liechtenstein", "Lithuania", "Macao", "Macedonia", "Madagascar", "Madeira", "Malawi", "Malay Archipelago", "Maldives", "Mali", "Malta", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "MP", "Namibia", "Nauru", "Nepal", "Netherlands Antilles", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "No-Mariana Islands", "Norfolk Island", "North Korea", "Norway", "Oman", "Pakistan", "Palau Islands", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion island", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent & Grenadines", "Saint-Pierre and Miquelon", "Samoa Islands", "San Marino", "Sao Tome & Principe", "Saudi Arabia", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Georgia & Sandwich", "South Korea", "Spain", "Sri Lanka", "St. Helena", "Sudan", "Suriname", "Swaziland", "Sweden", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo", "Tokelau Islands", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Valais & Futuna", "Vanuatu", "Vatican", "Venezuela", "Vietnam", "Western Sahara", "Yemen", "Zambia", "Zimbabwe", "Default" ];
    var countryIndexArray = [ 214, 7, 63, 68, 18, 188, 189, 120, 105, 190, 65, 106, 162, 191, 4, 220, 192, 231, 72, 193, 20, 142, 219, 121, 208, 19, 122, 236, 218, 22, 128, 2, 129, 217, 130, 16, 84, 131, 234, 14, 3, 0, 119, 149, 66, 23, 50, 127, 17, 77, 49, 171, 88, 172, 108, 107, 240, 109, 26, 173, 174, 216, 124, 115, 175, 116, 117, 110, 118, 125, 133, 223, 126, 58, 24, 241, 69, 13, 28, 176, 9, 178, 161, 136, 221, 8, 27, 6, 206, 52, 154, 184, 85, 183, 53, 181, 180, 87, 203, 242, 155, 202, 201, 200, 111, 54, 199, 198, 197, 222, 179, 112, 113, 114, 229, 29, 1, 30, 211, 32, 33, 186, 185, 76, 104, 98, 99, 100, 21, 64, 90, 91, 238, 92, 158, 31, 210, 40, 212, 55, 151, 194, 93, 36, 177, 213, 94, 56, 41, 57, 152, 75, 167, 5, 48, 160, 47, 226, 235, 150, 39, 227, 102, 204, 148, 135, 25, 74, 95, 138, 139, 187, 170, 46, 51, 97, 147, 34, 78, 144, 132, 86, 103, 38, 123, 73, 145, 70, 146, 96, 81, 232, 82, 10, 165, 153, 164, 83, 163, 79, 45, 44, 141, 80, 11, 205, 195, 43, 60, 12, 67, 59, 157, 225, 237, 35, 42, 89, 233, 169, 61, 168, 62, 134, 246 ];
    var locationShortArray = [ "TD", "MO", "MM", "EA", "BH", "PK", "GY", "DZ", "GW", "GR", "SE", "TR", "UA", "DE", "CF", "--", "CA", "KM", "AO", "BW", "BJ", "MX", "BG", "CI", "GA", "RO", "DJ", "GN", "GH", "LT", "MK", "MA", "XI", "MW", "RS", "WF", "NZ", "--", "SB", "PN", "MP", "MH", "VU", "TV", "TO", "TK", "WS", "PG", "PW", "CK", "CC", "SM", "XW", "ID", "KI", "NR", "NU", "NF", "PF", "GB", "UG", "EH", "ZM", "AS", "FM", "AU", "CX", "AE", "AD", "GE", "ES", "--", "BE", "GS", "RU", "NO", "ML", "CG", "SC", "TG", "TN", "SD", "SZ", "TZ", "XA", "HU", "SK", "IE", "HR", "VA", "MD", "MC", "ME", "NL", "NG", "RW", "SH", "ST", "MR", "MU", "YT", "--", "PT", "SI", "MT", "AM", "AT", "CZ", "CY", "DK", "EE", "KE", "LS", "LR", "LY", "EG", "GQ", "ER", "ET", "CL", "AR", "BO", "BR", "SO", "EC", "FK", "FR", "CO", "BF", "BI", "CM", "CV", "SG", "FJ", "ZW", "RE", "GU", "--", "KN", "LC", "--", "TT", "BM", "--", "SL", "KR", "LK", "SA", "QA", "CN", "PH", "NP", "KP", "TW", "HN", "JM", "--", "US", "MS", "--", "PA", "GP", "AZ", "TH", "TJ", "SY", "--", "OM", "YE", "VN", "PM", "CR", "CU", "DM", "DO", "SV", "GL", "NI", "GD", "LB", "IQ", "IR", "--", "IN", "HK", "MV", "MY", "VC", "AI", "AG", "AW", "BS", "BB", "BZ", "AN", "TC", "--", "LA", "KG", "KW", "KZ", "JO", "JP", "IL", "PR", "TM", "HT", "--", "BA", "--", "MZ", "MG", "NA", "NE", "AF", "--", "TL", "KH", "BN", "BT", "BD", "GT", "LV", "FI", "--", "UY", "PY", "PL", "--", "LI", "--", "BY", "SR", "VE", "KY", "PE", "VI", "UZ", "MN", "TR", "CD", "GM", "IT", "--", "--", "--", "00", "--", "--", "--", "--", "--", "--", "--", "--" ];
    module.exports = {
      getCountryAvatarIndex: function getCountryAvatarIndex(countryCode) {
        var i = -1;
        for (var j = 0; j < locationShortArray.length; j++) if (countryCode == locationShortArray[j]) {
          i = j;
          break;
        }
        -1 == i && (i = 246);
        return i + 1;
      },
      getCountryName: function getCountryName(countryCode) {
        var i = -1;
        for (var j = 0; j < locationShortArray.length; j++) if (countryCode == locationShortArray[j]) {
          i = j;
          break;
        }
        var r = -1;
        if (i >= 0) for (var k = 0; k < countryIndexArray.length; k++) countryIndexArray[k] == i && (r = k);
        return r >= 0 && r < countryListArray.length && !!countryListArray[r] ? countryListArray[r] : countryListArray[224];
      },
      getCountryNameList: function getCountryNameList() {
        return countryListArray;
      },
      getCountryAvatarIndex2: function getCountryAvatarIndex2(index) {
        return countryIndexArray[index] + 1;
      }
    };
    cc._RF.pop();
  }, {} ],
  ServerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "59e6fvqzfVL5KAmySpvJQQk", "ServerManager");
    "use strict";
    var md5Encode = function md5Encode(data) {
      function fflog(msg) {
        try {
          console.log(msg);
        } catch (e) {}
      }
      function to_zerofilled_hex(n) {
        var t1 = (n >>> 24).toString(16);
        var t2 = (16777215 & n).toString(16);
        return "00".substr(0, 2 - t1.length) + t1 + "000000".substr(0, 6 - t2.length) + t2;
      }
      function chars_to_bytes(ac) {
        var retval = [];
        for (var i = 0; i < ac.length; i++) retval = retval.concat(str_to_bytes(ac[i]));
        return retval;
      }
      function int64_to_bytes(num) {
        var retval = [];
        for (var i = 0; i < 8; i++) {
          retval.push(255 & num);
          num >>>= 8;
        }
        return retval;
      }
      function rol(num, places) {
        return num << places & 4294967295 | num >>> 32 - places;
      }
      function fF(b, c, d) {
        return b & c | ~b & d;
      }
      function fG(b, c, d) {
        return d & b | ~d & c;
      }
      function fH(b, c, d) {
        return b ^ c ^ d;
      }
      function fI(b, c, d) {
        return c ^ (b | ~d);
      }
      function bytes_to_int32(arr, off) {
        return arr[off + 3] << 24 | arr[off + 2] << 16 | arr[off + 1] << 8 | arr[off];
      }
      function str_to_bytes(str) {
        var retval = [];
        for (var i = 0; i < str.length; i++) if (str.charCodeAt(i) <= 127) retval.push(str.charCodeAt(i)); else {
          var tmp = encodeURIComponent(str.charAt(i)).substr(1).split("%");
          for (var j = 0; j < tmp.length; j++) retval.push(parseInt(tmp[j], 16));
        }
        return retval;
      }
      function int128le_to_hex(a, b, c, d) {
        var ra = "";
        var t = 0;
        var ta = 0;
        for (var i = 3; i >= 0; i--) {
          ta = arguments[i];
          t = 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= 255 & ta;
          ta >>>= 8;
          t <<= 8;
          t |= ta;
          ra += to_zerofilled_hex(t);
        }
        return ra;
      }
      var databytes = null;
      if ("string" == typeof data) databytes = str_to_bytes(data); else {
        if (data.constructor != Array) {
          fflog("input data type mismatch");
          return null;
        }
        if (0 === data.length) databytes = data; else if ("string" == typeof data[0]) databytes = chars_to_bytes(data); else {
          if ("number" != typeof data[0]) {
            fflog("input data type mismatch");
            return null;
          }
          databytes = data;
        }
      }
      var org_len = databytes.length;
      databytes.push(128);
      var tail = databytes.length % 64;
      if (tail > 56) {
        for (var i = 0; i < 64 - tail; i++) databytes.push(0);
        tail = databytes.length % 64;
      }
      for (i = 0; i < 56 - tail; i++) databytes.push(0);
      databytes = databytes.concat(int64_to_bytes(8 * org_len));
      var h0 = 1732584193;
      var h1 = 4023233417;
      var h2 = 2562383102;
      var h3 = 271733878;
      var a = 0, b = 0, c = 0, d = 0;
      function _add(n1, n2) {
        return 4294967295 & n1 + n2;
      }
      var updateRun = function updateRun(nf, sin32, dw32, b32) {
        var temp = d;
        d = c;
        c = b;
        b = _add(b, rol(_add(a, _add(nf, _add(sin32, dw32))), b32));
        a = temp;
      };
      for (i = 0; i < databytes.length / 64; i++) {
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        var ptr = 64 * i;
        updateRun(fF(b, c, d), 3614090360, bytes_to_int32(databytes, ptr), 7);
        updateRun(fF(b, c, d), 3905402710, bytes_to_int32(databytes, ptr + 4), 12);
        updateRun(fF(b, c, d), 606105819, bytes_to_int32(databytes, ptr + 8), 17);
        updateRun(fF(b, c, d), 3250441966, bytes_to_int32(databytes, ptr + 12), 22);
        updateRun(fF(b, c, d), 4118548399, bytes_to_int32(databytes, ptr + 16), 7);
        updateRun(fF(b, c, d), 1200080426, bytes_to_int32(databytes, ptr + 20), 12);
        updateRun(fF(b, c, d), 2821735955, bytes_to_int32(databytes, ptr + 24), 17);
        updateRun(fF(b, c, d), 4249261313, bytes_to_int32(databytes, ptr + 28), 22);
        updateRun(fF(b, c, d), 1770035416, bytes_to_int32(databytes, ptr + 32), 7);
        updateRun(fF(b, c, d), 2336552879, bytes_to_int32(databytes, ptr + 36), 12);
        updateRun(fF(b, c, d), 4294925233, bytes_to_int32(databytes, ptr + 40), 17);
        updateRun(fF(b, c, d), 2304563134, bytes_to_int32(databytes, ptr + 44), 22);
        updateRun(fF(b, c, d), 1804603682, bytes_to_int32(databytes, ptr + 48), 7);
        updateRun(fF(b, c, d), 4254626195, bytes_to_int32(databytes, ptr + 52), 12);
        updateRun(fF(b, c, d), 2792965006, bytes_to_int32(databytes, ptr + 56), 17);
        updateRun(fF(b, c, d), 1236535329, bytes_to_int32(databytes, ptr + 60), 22);
        updateRun(fG(b, c, d), 4129170786, bytes_to_int32(databytes, ptr + 4), 5);
        updateRun(fG(b, c, d), 3225465664, bytes_to_int32(databytes, ptr + 24), 9);
        updateRun(fG(b, c, d), 643717713, bytes_to_int32(databytes, ptr + 44), 14);
        updateRun(fG(b, c, d), 3921069994, bytes_to_int32(databytes, ptr), 20);
        updateRun(fG(b, c, d), 3593408605, bytes_to_int32(databytes, ptr + 20), 5);
        updateRun(fG(b, c, d), 38016083, bytes_to_int32(databytes, ptr + 40), 9);
        updateRun(fG(b, c, d), 3634488961, bytes_to_int32(databytes, ptr + 60), 14);
        updateRun(fG(b, c, d), 3889429448, bytes_to_int32(databytes, ptr + 16), 20);
        updateRun(fG(b, c, d), 568446438, bytes_to_int32(databytes, ptr + 36), 5);
        updateRun(fG(b, c, d), 3275163606, bytes_to_int32(databytes, ptr + 56), 9);
        updateRun(fG(b, c, d), 4107603335, bytes_to_int32(databytes, ptr + 12), 14);
        updateRun(fG(b, c, d), 1163531501, bytes_to_int32(databytes, ptr + 32), 20);
        updateRun(fG(b, c, d), 2850285829, bytes_to_int32(databytes, ptr + 52), 5);
        updateRun(fG(b, c, d), 4243563512, bytes_to_int32(databytes, ptr + 8), 9);
        updateRun(fG(b, c, d), 1735328473, bytes_to_int32(databytes, ptr + 28), 14);
        updateRun(fG(b, c, d), 2368359562, bytes_to_int32(databytes, ptr + 48), 20);
        updateRun(fH(b, c, d), 4294588738, bytes_to_int32(databytes, ptr + 20), 4);
        updateRun(fH(b, c, d), 2272392833, bytes_to_int32(databytes, ptr + 32), 11);
        updateRun(fH(b, c, d), 1839030562, bytes_to_int32(databytes, ptr + 44), 16);
        updateRun(fH(b, c, d), 4259657740, bytes_to_int32(databytes, ptr + 56), 23);
        updateRun(fH(b, c, d), 2763975236, bytes_to_int32(databytes, ptr + 4), 4);
        updateRun(fH(b, c, d), 1272893353, bytes_to_int32(databytes, ptr + 16), 11);
        updateRun(fH(b, c, d), 4139469664, bytes_to_int32(databytes, ptr + 28), 16);
        updateRun(fH(b, c, d), 3200236656, bytes_to_int32(databytes, ptr + 40), 23);
        updateRun(fH(b, c, d), 681279174, bytes_to_int32(databytes, ptr + 52), 4);
        updateRun(fH(b, c, d), 3936430074, bytes_to_int32(databytes, ptr), 11);
        updateRun(fH(b, c, d), 3572445317, bytes_to_int32(databytes, ptr + 12), 16);
        updateRun(fH(b, c, d), 76029189, bytes_to_int32(databytes, ptr + 24), 23);
        updateRun(fH(b, c, d), 3654602809, bytes_to_int32(databytes, ptr + 36), 4);
        updateRun(fH(b, c, d), 3873151461, bytes_to_int32(databytes, ptr + 48), 11);
        updateRun(fH(b, c, d), 530742520, bytes_to_int32(databytes, ptr + 60), 16);
        updateRun(fH(b, c, d), 3299628645, bytes_to_int32(databytes, ptr + 8), 23);
        updateRun(fI(b, c, d), 4096336452, bytes_to_int32(databytes, ptr), 6);
        updateRun(fI(b, c, d), 1126891415, bytes_to_int32(databytes, ptr + 28), 10);
        updateRun(fI(b, c, d), 2878612391, bytes_to_int32(databytes, ptr + 56), 15);
        updateRun(fI(b, c, d), 4237533241, bytes_to_int32(databytes, ptr + 20), 21);
        updateRun(fI(b, c, d), 1700485571, bytes_to_int32(databytes, ptr + 48), 6);
        updateRun(fI(b, c, d), 2399980690, bytes_to_int32(databytes, ptr + 12), 10);
        updateRun(fI(b, c, d), 4293915773, bytes_to_int32(databytes, ptr + 40), 15);
        updateRun(fI(b, c, d), 2240044497, bytes_to_int32(databytes, ptr + 4), 21);
        updateRun(fI(b, c, d), 1873313359, bytes_to_int32(databytes, ptr + 32), 6);
        updateRun(fI(b, c, d), 4264355552, bytes_to_int32(databytes, ptr + 60), 10);
        updateRun(fI(b, c, d), 2734768916, bytes_to_int32(databytes, ptr + 24), 15);
        updateRun(fI(b, c, d), 1309151649, bytes_to_int32(databytes, ptr + 52), 21);
        updateRun(fI(b, c, d), 4149444226, bytes_to_int32(databytes, ptr + 16), 6);
        updateRun(fI(b, c, d), 3174756917, bytes_to_int32(databytes, ptr + 44), 10);
        updateRun(fI(b, c, d), 718787259, bytes_to_int32(databytes, ptr + 8), 15);
        updateRun(fI(b, c, d), 3951481745, bytes_to_int32(databytes, ptr + 36), 21);
        h0 = _add(h0, a);
        h1 = _add(h1, b);
        h2 = _add(h2, c);
        h3 = _add(h3, d);
      }
      return int128le_to_hex(h3, h2, h1, h0).toUpperCase();
    };
    module.exports = {
      leaderboardName: "block_farm",
      key: "ffjoffrey100",
      sendGetRequest: function sendGetRequest(url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          4 == xhr.readyState && (xhr.status >= 200 && xhr.status < 400 ? !callback || callback(xhr.responseText) : !callback || callback(null));
        };
        xhr.open("GET", url, true);
        xhr.send();
      },
      sendPostRequest: function sendPostRequest(url, params, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function() {
          4 == xhr.readyState && (xhr.status >= 200 && xhr.status < 400 ? !callback || callback(xhr.responseText) : !callback || callback(null));
        };
        xhr.send(params);
      },
      login: function login(type, uid, params, callback) {
        var ddddd = {
          code: 0,
          msg: "",
          data: {
            uid: "109",
            name: "yellow",
            country: 247,
            gid: 1,
            data: {
              game: [ 2, 0, 0 ],
              player: [ {
                type: 0,
                name: "battle",
                number: 3
              }, {
                type: 1,
                name: "fork",
                number: 2
              }, {
                type: 2,
                name: "hammer",
                number: 3
              }, {
                type: 3,
                name: "dice",
                number: 2
              } ]
            },
            coin: 0,
            level: 0,
            star: 0,
            lasttime: 1583408323,
            issetname: 1,
            curtime: 1583408598
          }
        };
        !callback || callback(ddddd);
      }
    };
    cc._RF.pop();
  }, {} ],
  SoundManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db6faCVi9xH25dHqi28fFX3", "SoundManager");
    "use strict";
    module.exports = {
      sounds: {},
      init: function init() {
        var self = this;
        cc.loader.loadResDir("Sound", cc.AudioClip, function(err, assets, urls) {
          console.log("load dir success");
          if (!err && !!assets) for (var i = 0; i < assets.length; i++) self.sounds[assets[i]._name] = assets[i];
        });
        var sound = cc.sys.localStorage.getItem("sound");
        this.isSound = "0" != sound;
      },
      playSound: function playSound(soundName) {
        !this.isSound || !this.sounds[soundName] || cc.audioEngine.play(this.sounds[soundName], false, 1);
      },
      playSoundLoop: function playSoundLoop(soundName, loop) {
        if (!loop) {
          if (!!this.isSound && !!this.sounds[soundName]) {
            cc.audioEngine.play(this.sounds[soundName], false, 1);
            return false;
          }
        } else if (!!this.isSound && !!this.sounds[soundName]) return cc.audioEngine.play(this.sounds[soundName], true, 1);
        return false;
      },
      canSound: function canSound() {
        return this.isSound;
      },
      openSound: function openSound() {
        this.isSound = true;
        cc.sys.localStorage.setItem("sound", "1");
      },
      closeSound: function closeSound() {
        this.isSound = false;
        cc.sys.localStorage.setItem("sound", "0");
      }
    };
    cc._RF.pop();
  }, {} ],
  acitonLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bafcdzWlkBLhK/vZRSUB69q", "acitonLayer");
    "use strict";
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    var starStopPos = [ cc.v2(-220, -400), cc.v2(0, -400), cc.v2(220, -400) ];
    cc.Class({
      extends: cc.Component,
      properties: {
        toolItem: cc.Prefab,
        bigStar: cc.Prefab,
        btn_play: cc.Node,
        btn_blueBox: cc.Node,
        heart: cc.Node,
        lifeNumNode: cc.Node,
        coins: cc.Node,
        daily_item_view: cc.Prefab,
        guideScreenNode: require("./guideScreenNode"),
        firework: cc.Prefab,
        toolList: [ cc.Node ],
        btn_lottery: cc.Node,
        btn_dailySign: cc.Node,
        gift: cc.Node,
        node_cloud: cc.Node
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("TOOLOBTAIN", this.toolObtainEffect, this);
        cc.systemEvent.on("STARANIMA", this.starMoveAnimation, this);
        cc.systemEvent.on("HEART_ANIMA", this.heartMoveAnimation, this);
        cc.systemEvent.on("DAILY_BOUNS_ANIMA", this.getDailyBounsAnimation, this);
        cc.systemEvent.on("SUCCESS_BUY_ANIMA", this.buySuccessAnimation, this);
        cc.systemEvent.on("LOTTERY_FINISHED", this.lotteryFinishedAnimation, this);
        cc.systemEvent.on("LOTTERY_GUIDE", this.showLotteryAnimatiaon, this);
        cc.systemEvent.on("DAILYSIGN_GUIDE", this.showDailySignAnimation, this);
        cc.systemEvent.on("GIFT_SELL_SUCCESS", this.successBuyBigGift, this);
        cc.systemEvent.on("IN_COULD_ANIMA", this.cloudFadeIn, this);
        cc.systemEvent.on("OUT_COULD_ANIMA", this.cloudFadeOut, this);
        this.itemPool = new cc.NodePool();
        for (var i = 0; i < 5; i++) {
          var item = cc.instantiate(this.toolItem);
          this.itemPool.put(item);
        }
        this.starPool = new cc.NodePool();
        for (var _i = 0; _i < 5; _i++) {
          var _item = cc.instantiate(this.bigStar);
          this.starPool.put(_item);
        }
        var boxPos = this.btn_blueBox.parent.convertToWorldSpaceAR(this.btn_blueBox);
        this.boxPos = this.node.convertToNodeSpaceAR(boxPos);
      },
      start: function start() {
        var self = this;
      },
      obtainCoinsEffect: function obtainCoinsEffect(event) {
        var self = this;
        var coin = cc.instantiate(this.toolItem);
        var targetPos = this.node.convertToNodeSpaceAR(this.coins.parent.convertToWorldSpaceAR(this.coins.position));
        coin.getComponent("toolItem").changeItemTexture(0);
        coin.parent = this.node;
        var randomX = Math.floor(200 * Math.random());
        var randomY = -500 + Math.floor(100 * Math.random());
        var time = .2 + .5 * Math.random();
        coin.position = cc.v2(randomX, randomY);
        var action = cc.sequence(cc.sequence(cc.scaleTo(.1, .9), cc.scaleTo(.1, 1.1), cc.scaleTo(.1, 1)), cc.spawn(cc.rotateBy(time, 720), cc.moveTo(time, targetPos).easing(cc.easeInOut(3)), cc.scaleTo(time, .5)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("flyCoins");
        }), cc.callFunc(function() {
          coin.removeFromParent();
          self.coins.runAction(cc.sequence(cc.scaleTo(.1, .9), cc.scaleTo(.1, 1.1), cc.scaleTo(.1, 1), cc.callFunc(function() {
            GameData.starCount += event;
            GameData.storeGameData();
            cc.systemEvent.emit("UPDATE_COINS");
          })));
        }));
        coin.runAction(action);
      },
      toolObtainEffect: function toolObtainEffect(event) {
        var self = this;
        var data = event;
        var localPos;
        data.pos && (localPos = this.node.convertToNodeSpaceAR(data.pos));
        var type = data.type;
        var item;
        item = this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.toolItem);
        if (0 != type) {
          item.parent = this.node;
          item.position = localPos || cc.v2(0, 0);
          item.getComponent("toolItem").changeItemTexture(type);
          if (type < 4 && type > 0) {
            this.toolItemMoveAnimation(item);
            GameData.changeGameTool("gameTool", data.number, type - 1, true);
          } else if (type >= 4 && type < 8) {
            this.toolItemMoveAnimation(item);
            GameData.changeGameTool("playerTool", data.number, type - 4, true);
          } else if (8 == type) {
            GameData.lifeNumber += 1;
            GameData.storeGameData();
            cc.systemEvent.emit("HEART_ANIMA");
            this.itemPool.put(item);
          }
        } else self.addCoins(data.number);
      },
      addCoins: function addCoins(number) {
        var self = this;
        var rest = number % 10;
        var step = (number - rest) / 10;
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 1
        });
        var _loop = function _loop(i) {
          setTimeout(function() {
            if (9 == i) {
              self.obtainCoinsEffect(step + rest);
              cc.systemEvent.emit("STOP_TOUCH", {
                number: 2
              });
            } else self.obtainCoinsEffect(step);
          }, 100 * i);
        };
        for (var i = 0; i < 10; i++) _loop(i);
      },
      toolItemMoveAnimation: function toolItemMoveAnimation(node) {
        var self = this;
        var wp = this.btn_play.parent.convertToWorldSpaceAR(this.btn_play);
        var targetPos = this.node.convertToNodeSpaceAR(wp);
        cc.director.SoundManager.playSound("flyStart");
        var action = cc.sequence(cc.moveTo(.5, targetPos), cc.callFunc(function() {
          self.itemPool.put(node);
          self.btn_play.runAction(cc.sequence(cc.scaleTo(.2, .9), cc.scaleTo(.2, 1.1), cc.scaleTo(.2, 1)));
          cc.director.SoundManager.playSound("starCollect");
          var firework = cc.instantiate(self.firework);
          firework.parent = self.btn_play;
          firework.y += 40;
          firework.getComponent(cc.ParticleSystem).resetSystem();
        }));
        node.runAction(action);
      },
      starMoveAnimation: function starMoveAnimation(event) {
        var _this = this;
        var passRate = event.passRate;
        var self = this;
        var _loop2 = function _loop2(i) {
          _this.scheduleOnce(function() {
            var star;
            star = this.starPool.size() > 0 ? this.starPool.get() : cc.instantiate(this.bigStar);
            star.parent = this.node;
            star.scale = .01;
            var action = cc.sequence(cc.spawn(cc.scaleTo(.5, 1), cc.rotateBy(.5, 360), cc.moveTo(.5, starStopPos[i])), cc.sequence(cc.scaleTo(.2, 1.05), cc.scaleTo(.2, 1)).repeat(2), cc.spawn(cc.scaleTo(.7, .2), cc.rotateBy(.7, 360), cc.moveTo(.7, this.boxPos)), cc.callFunc(function() {
              self.starPool.put(star);
              cc.systemEvent.emit("FINISHEDCOLLECT");
              cc.director.SoundManager.playSound("starCollect");
              if (i == passRate - 1) {
                if (1 == GameData.bestLevel) {
                  var boxGuide = cc.sys.localStorage.getItem("boxGuide");
                  boxGuide || self.guideScreenNode.showScreenGuide();
                }
                cc.systemEvent.emit("STOP_TOUCH", {
                  number: 2
                });
              }
            }));
            star.runAction(action);
          }, .2 * i);
        };
        for (var i = 0; i < passRate; i++) _loop2(i);
      },
      heartMoveAnimation: function heartMoveAnimation(event) {
        var data = event;
        var localPos;
        localPos = data && data.pos ? this.node.convertToNodeSpaceAR(data.pos) : cc.v2(0, 0);
        var node = cc.instantiate(this.heart);
        node.position = localPos;
        node.active = true;
        node.parent = this.node;
        var targetPos = this.node.convertToNodeSpaceAR(this.lifeNumNode.parent.convertToWorldSpaceAR(this.lifeNumNode));
        var action = cc.sequence(cc.moveTo(.5, targetPos), cc.callFunc(function() {
          node.removeFromParent();
          GameData.storeGameData();
          cc.systemEvent.emit("UPDATE_LIFE");
        }));
        node.runAction(action);
      },
      getDailyBounsAnimation: function getDailyBounsAnimation(event) {
        var self = this;
        var wp = this.btn_play.parent.convertToWorldSpaceAR(this.btn_play);
        var targetPos = this.node.convertToNodeSpaceAR(wp);
        var node = cc.instantiate(this.daily_item_view);
        node.parent = this.node;
        node.scale = .1;
        node.getComponent("item_daily_view").initView(event.type - 1);
        cc.director.SoundManager.playSound("flyStart");
        node.runAction(cc.sequence(cc.scaleTo(.5, 1).easing(cc.easeBackInOut(3)), cc.delayTime(1.5), cc.spawn(cc.scaleTo(.5, .2), cc.moveTo(.5, targetPos).easing(cc.easeInOut(3))), cc.callFunc(function() {
          self.btn_play.runAction(cc.sequence(cc.scaleTo(.2, .9), cc.scaleTo(.2, 1.1), cc.scaleTo(.2, 1)));
          cc.director.SoundManager.playSound("starCollect");
          var firework = cc.instantiate(self.firework);
          firework.parent = self.btn_play;
          firework.y += 40;
          firework.getComponent(cc.ParticleSystem).resetSystem();
          node.removeFromParent();
        })));
      },
      buySuccessAnimation: function buySuccessAnimation(event) {
        var moveItem = cc.instantiate(this.daily_item_view);
        moveItem.getComponent("item_daily_view").initView(event.type + 3);
        moveItem.parent = this.node;
        var targetItem = this.toolList[event.type];
        var targetWp = targetItem.parent.convertToWorldSpaceAR(targetItem.position);
        var targetNp = this.node.convertToNodeSpaceAR(targetWp);
        moveItem.scale = .1;
        cc.director.SoundManager.playSound("flyStart");
        var action = cc.sequence(cc.scaleTo(.5, 1).easing(cc.easeBackInOut(3)), cc.delayTime(1.5), cc.spawn(cc.scaleTo(.5, .2), cc.moveTo(.5, targetNp).easing(cc.easeInOut(3))), cc.callFunc(function() {
          cc.director.SoundManager.playSound("starCollect");
          moveItem.removeFromParent();
          cc.systemEvent.emit("UPDATE_TOOLLIST_SHOP", {
            type: event.type
          });
        }));
        moveItem.runAction(action);
      },
      bigGiftPlayerToolAnima: function bigGiftPlayerToolAnima(node, type, isLast) {
        var targetItem = this.toolList[type - 4];
        var targetWp = targetItem.parent.convertToWorldSpaceAR(targetItem.position);
        var targetNp = this.node.convertToNodeSpaceAR(targetWp);
        cc.director.SoundManager.playSound("flyStart");
        var action = cc.sequence(cc.moveTo(.8, targetNp).easing(cc.easeInOut(3)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("starCollect");
          node.removeFromParent();
          cc.systemEvent.emit("UPDATE_TOOLLIST_SHOP", {
            type: type - 4,
            tag: 2,
            isLast: isLast
          });
        }));
        node.runAction(action);
      },
      lotteryFinishedAnimation: function lotteryFinishedAnimation(event) {
        var self = this;
        var data = event;
        var type = data.type;
        if (type < 4 && type > 0) GameData.changeGameTool("gameTool", data.number, type - 1, true); else {
          if (!(type >= 4)) {
            this.addCoins(data.number);
            return;
          }
          GameData.changeGameTool("playerTool", data.number, type - 4, true);
        }
        var moveItem = cc.instantiate(this.daily_item_view);
        moveItem.getComponent("item_daily_view").initView(event.type - 1);
        moveItem.parent = this.node;
        var wp = this.btn_play.parent.convertToWorldSpaceAR(this.btn_play);
        var targetPos = this.node.convertToNodeSpaceAR(wp);
        moveItem.scale = .1;
        cc.director.SoundManager.playSound("flyStart");
        var action = cc.sequence(cc.scaleTo(.5, 1).easing(cc.easeBackInOut(3)), cc.delayTime(1.5), cc.spawn(cc.scaleTo(.5, .2), cc.moveTo(.5, targetPos).easing(cc.easeInOut(3))), cc.callFunc(function() {
          cc.director.SoundManager.playSound("starCollect");
          moveItem.removeFromParent();
          self.btn_play.runAction(cc.sequence(cc.scaleTo(.2, .9), cc.scaleTo(.2, 1.1), cc.scaleTo(.2, 1)));
          cc.director.SoundManager.playSound("starCollect");
          var firework = cc.instantiate(self.firework);
          firework.parent = self.btn_play;
          firework.y += 40;
          firework.getComponent(cc.ParticleSystem).resetSystem();
        }));
        moveItem.runAction(action);
      },
      showLotteryAnimatiaon: function showLotteryAnimatiaon() {
        var self = this;
        var moveItem = cc.instantiate(this.daily_item_view);
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 1
        });
        moveItem.getComponent("item_daily_view").initView(7);
        moveItem.parent = this.node;
        var targetItem = this.btn_lottery;
        var targetWp = targetItem.parent.convertToWorldSpaceAR(targetItem.position);
        var targetNp = this.node.convertToNodeSpaceAR(targetWp);
        moveItem.scale = .1;
        cc.director.SoundManager.playSound("unlock");
        var action = cc.sequence(cc.scaleTo(.5, 1).easing(cc.easeBackInOut(3)), cc.delayTime(1.5), cc.moveTo(.5, targetNp).easing(cc.easeInOut(3)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("flyStart");
          moveItem.removeFromParent();
          self.btn_lottery.active = true;
          cc.sys.localStorage.setItem("lotteryGuide01", "yes");
          cc.systemEvent.emit("STOP_TOUCH", {
            number: 2
          });
          cc.systemEvent.emit("START_FINGER_GUIDE", {
            targetNode: self.btn_lottery,
            worldPos: targetWp
          });
        }));
        moveItem.runAction(action);
      },
      showDailySignAnimation: function showDailySignAnimation() {
        var self = this;
        var moveItem = cc.instantiate(this.daily_item_view);
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 1
        });
        moveItem.getComponent("item_daily_view").initView(8);
        moveItem.parent = this.node;
        var targetItem = this.btn_dailySign;
        var targetWp = targetItem.parent.convertToWorldSpaceAR(targetItem.position);
        var targetNp = this.node.convertToNodeSpaceAR(targetWp);
        moveItem.scale = .1;
        cc.director.SoundManager.playSound("unlock");
        var action = cc.sequence(cc.scaleTo(.5, 1).easing(cc.easeBackInOut(3)), cc.delayTime(1.5), cc.moveTo(.5, targetNp).easing(cc.easeInOut(3)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("flyStart");
          moveItem.removeFromParent();
          self.btn_dailySign.active = true;
          cc.systemEvent.emit("STOP_TOUCH", {
            number: 2
          });
          cc.systemEvent.emit("START_FINGER_GUIDE", {
            targetNode: self.btn_dailySign,
            worldPos: targetWp
          });
        }));
        moveItem.runAction(action);
      },
      successBuyBigGift: function successBuyBigGift(event) {
        var self = this;
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 1
        });
        var callFunc = function callFunc() {
          var type = event.type;
          type = !type ? 0 : type;
          var giftNumber = Config.giftNumber[type];
          var coins, life, gameTool, playerTool;
          coins = giftNumber.coins;
          life = giftNumber.life;
          gameTool = giftNumber.gameTool;
          playerTool = giftNumber.playerTool;
          !!coins && coins > 0 && cc.systemEvent.emit("TOOLOBTAIN", {
            type: 0,
            number: coins
          });
          if (!!life && life > 0) {
            GameData.lifeNumber += life;
            cc.systemEvent.emit("HEART_ANIMA");
          }
          var gameToolNameList = Object.getOwnPropertyNames(gameTool);
          for (var i = 0; i < gameToolNameList.length; i++) {
            var number = gameTool[gameToolNameList[i]];
            GameData.changeGameTool("gameTool", number, i, true);
          }
          var playerToolNameList = Object.getOwnPropertyNames(playerTool);
          for (var j = 0; j < playerToolNameList.length; j++) {
            var _number = playerTool[playerToolNameList[j]];
            GameData.changeGameTool("playerTool", _number, j, true);
          }
          var animList = [ 1, 2, 3, 4, 5, 6, 7 ];
          var _loop3 = function _loop3(m) {
            self.scheduleOnce(function() {
              var tItem;
              tItem = this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.toolItem);
              tItem.getComponent("toolItem").changeItemTexture(animList[m]);
              tItem.parent = this.node;
              tItem.position = cc.v2(0, 0);
              if (m < 3) this.toolItemMoveAnimation(tItem); else if (m == animList.length - 1) {
                this.bigGiftPlayerToolAnima(tItem, animList[m], true);
                self.gift.active = false;
                cc.systemEvent.emit("STOP_TOUCH", {
                  number: 2
                });
              } else this.bigGiftPlayerToolAnima(tItem, animList[m]);
            }, .2 * m);
          };
          for (var m = 0; m < animList.length; m++) _loop3(m);
        };
        this.giftFadeIn(callFunc);
      },
      giftFadeIn: function giftFadeIn(callFunc) {
        this.gift.scale = .1;
        this.gift.active = true;
        var rotateNode = this.gift.getChildByName("light");
        rotateNode.runAction(cc.rotateBy(5, 360).repeatForever());
        this.gift.runAction(cc.sequence(cc.scaleTo(.5, 1).easing(cc.easeBackOut(3)), cc.callFunc(callFunc)));
      },
      cloudFadeOut: function cloudFadeOut() {
        var self = this;
        this.node_cloud.active = true;
        var left = this.node_cloud.getChildByName("cloudLeft");
        var right = this.node_cloud.getChildByName("cloudRight");
        left.position = cc.v2(-400, 0);
        right.position = cc.v2(400, 0);
        var action1 = cc.sequence(cc.fadeIn(.1), cc.spawn(cc.fadeOut(1), cc.moveTo(1, cc.v2(-1200, 0)))).easing(cc.easeInOut(3));
        var action2 = cc.sequence(cc.fadeIn(.1), cc.spawn(cc.fadeOut(1), cc.moveTo(1, cc.v2(1200, 0)))).easing(cc.easeInOut(3));
        left.runAction(action1);
        right.runAction(action2);
        cc.director.SoundManager.playSound("farm_cloud");
      },
      cloudFadeIn: function cloudFadeIn() {
        var self = this;
        this.node_cloud.active = true;
        var left = this.node_cloud.getChildByName("cloudLeft");
        var right = this.node_cloud.getChildByName("cloudRight");
        left.position = cc.v2(-1200, 0);
        right.position = cc.v2(1200, 0);
        var action1 = cc.sequence(cc.fadeOut(.1), cc.spawn(cc.fadeIn(1), cc.moveTo(1, cc.v2(-400, 0)))).easing(cc.easeInOut(3));
        var action2 = cc.sequence(cc.fadeOut(.1), cc.spawn(cc.fadeIn(1), cc.moveTo(1, cc.v2(400, 0)))).easing(cc.easeInOut(3));
        left.runAction(action1);
        right.runAction(action2);
        cc.director.SoundManager.playSound("farm_cloud");
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "./guideScreenNode": "guideScreenNode"
  } ],
  actionUiLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cee05hqSN5InruW6BMe02eg", "actionUiLayer");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    var statueLimitedLevel = 39;
    cc.Class({
      extends: cc.Component,
      properties: {
        target: require("./target"),
        listTool: require("./toolList"),
        pinePrefab: cc.Prefab,
        hammerPrefab: cc.Prefab,
        boxing: cc.Prefab,
        fork: cc.Prefab,
        toolList: [ cc.Node ],
        stepTips: cc.Node,
        header: cc.Node,
        tool: cc.Node,
        toolView: [ cc.SpriteFrame ],
        fire: cc.Prefab,
        item_target: cc.Prefab,
        targetList: [ cc.SpriteFrame ],
        evaluation: cc.Prefab,
        evaluationList: [ cc.SpriteFrame ],
        shuffleTips: cc.Node,
        toolItem: cc.Prefab,
        coinsNumber: cc.Node,
        flower_example: cc.Node,
        grassBreak: cc.Prefab,
        bubbleBreak: cc.Prefab
      },
      onLoad: function onLoad() {
        this.pinePool = new cc.NodePool();
        for (var i = 0; i < 5; i++) {
          var pineCone = cc.instantiate(this.pinePrefab);
          this.pinePool.put(pineCone);
        }
        this.evaluatePool = new cc.NodePool();
        for (var j = 0; j < 5; j++) {
          var evaluateNode = cc.instantiate(this.evaluation);
          this.evaluatePool.put(evaluateNode);
        }
        this.grassPool = new cc.NodePool();
        for (var k = 0; k < 10; k++) {
          var grassAnima = cc.instantiate(this.grassBreak);
          this.grassPool.put(grassAnima);
        }
        this.bubblePool = new cc.NodePool();
        cc.systemEvent.on("PINECONE", this.PineConeCollectEffect, this);
        cc.systemEvent.on("TOOL_TRANS_EFFECT", this.toolTransiteAnimation, this);
        cc.systemEvent.on("FIVE_STEP_TIPS", this.fiveStepTips, this);
        cc.systemEvent.on("PLAYER_TOOL_ANIMATION", this.playerToolUnlockAnima, this);
        cc.systemEvent.on("MOVE_ADD", this.movesAdd, this);
        cc.systemEvent.on("NOTICE_TARGET", this.noticeGameTarget, this);
        cc.systemEvent.on("AFTER_BUY_PLAYERTOOL", this.animationAfterPlayerBuyPlayerTool, this);
        cc.systemEvent.on("OPERATION_EVALUATE", this.EvaluatePlayerOperation, this);
        cc.systemEvent.on("SHUFFLE_TIPS", this.shuffleEffectTips, this);
        cc.systemEvent.on("GAMEVIEW_COINS_OBTAIN", this.addCoins, this);
        cc.systemEvent.on("HINDER_SQUIRREL_ANIMATION", this.hinderSquirrelAnimation, this);
        cc.systemEvent.on("HINDER_FLOWER_ANIMATION", this.hinderFlowerAnimaiton, this);
        cc.systemEvent.on("HIT_GRASS_ANIMATION", this.hitGroundGrassAnimation, this);
        cc.systemEvent.on("HIT_BUBBLE_ANIMATION", this.hitCubesBubbleAnimation, this);
        cc.systemEvent.on("REDUCE_COINS_ANIMATION", this.coinsReduceAnimation, this);
      },
      PineConeCollectEffect: function PineConeCollectEffect(event) {
        var self = this;
        var pos = event.worldPosition;
        var pineCone;
        pineCone = this.pinePool.size() > 0 ? this.pinePool.get() : cc.instantiate(this.pinePrefab);
        var localPos = this.node.convertToNodeSpaceAR(pos);
        pineCone.parent = this.node;
        pineCone.position = localPos;
        var targetPos = this.target.getTargetIconWolrdPosition(20);
        if (!targetPos) return;
        var localTargetPos = this.node.convertToNodeSpaceAR(targetPos);
        var action = cc.sequence(cc.spawn(cc.moveBy(.5, cc.v2(0, -50)), cc.scaleTo(.5, 1.1)), cc.spawn(cc.moveTo(1, localTargetPos), cc.scaleTo(1, .8)), cc.callFunc(function() {
          self.pinePool.put(pineCone);
          cc.systemEvent.emit("NUMBER_COUNT", {
            type: 20
          });
          event.isLast ? self.scheduleOnce(function() {
            cc.director.checkLastPine++;
            cc.systemEvent.emit("NUMBER_COUNT", {
              type: 100
            });
            self.target.isPass || cc.systemEvent.emit("GAMEMASK_CONTROL", {
              order: 2
            });
          }, 1) : cc.systemEvent.emit("NUMBER_COUNT", {
            type: 100
          });
          cc.director.SoundManager.playSound("mission");
        }));
        cc.director.SoundManager.playSound("fruitDrop");
        pineCone.runAction(action);
      },
      toolTransiteAnimation: function toolTransiteAnimation(event) {
        var type = event.type;
        var grid = event.grid;
        var item = this.toolList[event.type - 1];
        var wp = item.parent.convertToWorldSpaceAR(item.position);
        var startPos = this.node.convertToNodeSpaceAR(wp);
        var endPos;
        if (1 == type) {
          cc.director.SoundManager.playSound("glove");
          var boxing = cc.instantiate(this.boxing);
          cc.systemEvent.emit("BOXING_ANVIL", {
            grid: grid,
            node: boxing,
            dir: Config.direction.RIGHT
          });
        }
        if (2 == type) {
          var fork = cc.instantiate(this.fork);
          cc.systemEvent.emit("BOXING_ANVIL", {
            grid: grid,
            node: fork,
            dir: Config.direction.DOWN
          });
        }
        if (3 == type) {
          endPos = this.node.convertToNodeSpaceAR(event.wp);
          var hammer = cc.instantiate(this.hammerPrefab);
          var action = cc.sequence(cc.spawn(cc.moveTo(1, cc.v2(endPos.x + 80, endPos.y)), cc.scaleTo(.5, 1.5)), cc.rotateBy(.5, 50), cc.rotateBy(.5, -80), cc.delayTime(.1), cc.callFunc(function() {
            cc.systemEvent.emit("player_tool", {
              type: type,
              grid: grid
            });
            hammer.removeFromParent();
            cc.systemEvent.emit("CLEAR_BTN");
            cc.systemEvent.emit("FUNCTION_EXPLAIN_OFF");
          }));
          hammer.parent = this.node;
          hammer.position = startPos;
          hammer.runAction(action);
        }
        if (4 == type) {
          cc.systemEvent.emit("player_tool", {
            type: type,
            grid: grid
          });
          cc.systemEvent.emit("CLEAR_BTN");
          cc.systemEvent.emit("FUNCTION_EXPLAIN_OFF");
        }
      },
      fiveStepTips: function fiveStepTips() {
        var self = this;
        this.stepTips.active = true;
        this.stepTips.scale = .01;
        cc.director.SoundManager.playSound("plateIn");
        var action = cc.sequence(cc.spawn(cc.fadeIn(.5), cc.scaleTo(.5, 1)), cc.sequence(cc.rotateBy(.05, 15), cc.rotateBy(.05, -15), cc.rotateTo(.05, 0)).repeat(3), cc.delayTime(1), cc.spawn(cc.fadeOut(.5), cc.scaleTo(.5, .01)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("plateOut");
        }));
        this.stepTips.runAction(action);
      },
      playerToolUnlockAnima: function playerToolUnlockAnima(event) {
        var self = this;
        var pos = event.pos;
        var nodePos = this.node.convertToNodeSpaceAR(pos);
        this.tool.active = true;
        this.tool.position = cc.v2(0, 0);
        var light = this.tool.getChildByName("light");
        var toolView = this.tool.getChildByName("toolView");
        toolView.getComponent(cc.Sprite).spriteFrame = this.toolView[event.num - 1];
        toolView.scale = .1;
        cc.director.SoundManager.playSound("unlock");
        light.runAction(cc.spawn(cc.rotateBy(2, 180), cc.sequence(cc.scaleTo(.5, 1), cc.delayTime(1), cc.fadeOut(.5))));
        toolView.runAction(cc.sequence(cc.scaleTo(.5, 1), cc.delayTime(1), cc.scaleTo(.5, .4), cc.moveTo(.5, nodePos), cc.callFunc(function() {
          self.tool.active = false;
          self.listTool.changeBtnStatus(event.num);
          cc.systemEvent.emit("PLAYER_TOOL_GUIDE", {
            num: event.num
          });
        })));
      },
      animationAfterPlayerBuyPlayerTool: function animationAfterPlayerBuyPlayerTool(event) {
        var itemNode = this.toolList[event.num - 1];
        var pos = itemNode.parent.convertToWorldSpaceAR(itemNode.position);
        var self = this;
        var nodePos = this.node.convertToNodeSpaceAR(pos);
        var toolClone = cc.instantiate(this.tool);
        toolClone.active = true;
        toolClone.parent = this.node;
        toolClone.position = cc.v2(0, 0);
        var light = toolClone.getChildByName("light");
        light.active = false;
        var toolView = toolClone.getChildByName("toolView");
        toolView.scale = .1;
        toolView.position = cc.v2(0, 0);
        cc.director.SoundManager.playSound("flyStart");
        toolView.getComponent(cc.Sprite).spriteFrame = this.toolView[event.num - 1];
        toolView.runAction(cc.sequence(cc.scaleTo(.5, 1), cc.delayTime(.5), cc.scaleTo(.5, .4), cc.moveTo(.5, nodePos), cc.callFunc(function() {
          toolClone.removeFromParent();
          cc.director.SoundManager.playSound("starCollect");
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: event.num,
            statu: 3
          });
        })));
      },
      movesAdd: function movesAdd(event) {
        var self = this;
        this.scheduleOnce(function() {
          var wp = event.pos;
          var np = this.node.convertToNodeSpaceAR(wp);
          var prefabLight = cc.instantiate(this.fire);
          prefabLight.parent = this.node;
          cc.director.SoundManager.playSound("flyTool");
          prefabLight.runAction(cc.sequence(cc.moveTo(.6, np), cc.callFunc(function() {
            self.target.stepCount += 5;
            self.target.updateGameStep(self.target.stepCount);
            prefabLight.removeFromParent();
            cc.director.SoundManager.playSound("add_move");
            cc.systemEvent.emit("GAMEMASK_CONTROL", {
              order: 2
            });
          })));
        }, .5);
      },
      noticeGameTarget: function noticeGameTarget(event) {
        var self = this;
        var wp = event.worldPos;
        var np = this.node.convertToNodeSpaceAR(wp);
        var type = event.type >= 20 ? event.type - 12 : event.type;
        var index = event.index;
        var item = cc.instantiate(this.item_target);
        38 == event.type ? item.getComponent(cc.Sprite).spriteFrame = this.targetList[18] : 39 == event.type ? item.getComponent(cc.Sprite).spriteFrame = this.targetList[19] : 37 == event.type ? item.getComponent(cc.Sprite).spriteFrame = this.targetList[20] : item.getComponent(cc.Sprite).spriteFrame = this.targetList[type];
        item.position = np;
        item.parent = this.node;
        var node = this.target.nodeList[index];
        var wp1 = node.parent.convertToWorldSpaceAR(node.position);
        var targetPos = this.node.convertToNodeSpaceAR(wp1);
        var callFunc = cc.callFunc(function() {
          item.removeFromParent();
          cc.director.SoundManager.playSound("mission");
          cc.director.isMoving = false;
          cc.director.needWait = 0;
          cc.director.isrunning = 0;
          node.runAction(cc.sequence(cc.scaleTo(.2, .9), cc.scaleTo(.2, 1.1), cc.scaleTo(.2, 1)));
        });
        cc.director.SoundManager.playSound("flyStart");
        var action = cc.sequence(cc.moveTo(1, targetPos).easing(cc.easeInOut(3)), callFunc);
        item.runAction(action);
      },
      EvaluatePlayerOperation: function EvaluatePlayerOperation(event) {
        var level = event.level;
        var soundName = "evaluate" + level;
        this.operationAnimation(level);
      },
      operationAnimation: function operationAnimation(level) {
        if (!level) return;
        var evaluateNode;
        evaluateNode = this.evaluatePool.size() > 0 ? this.evaluatePool.get() : cc.instantiate(this.evaluation);
        evaluateNode.getComponent(cc.Sprite).spriteFrame = this.evaluationList[level - 1];
        this.playOperateEffect(level);
        evaluateNode.scale = 0;
        evaluateNode.parent = this.node;
        var action = cc.sequence(cc.spawn(cc.fadeIn(.5), cc.scaleTo(.5, 1).easing(cc.easeBackOut(3))), cc.delayTime(.5), cc.fadeOut(.5));
        evaluateNode.runAction(action);
      },
      playOperateEffect: function playOperateEffect(level) {
        var name = "operate" + level;
        cc.director.SoundManager.playSound(name);
      },
      shuffleEffectTips: function shuffleEffectTips() {
        cc.director.SoundManager.playSound("shuffle");
        this.shuffleTips.active = true;
        this.shuffleTips.scale = .01;
        var action = cc.sequence(cc.spawn(cc.fadeIn(.1), cc.scaleTo(.2, 1).easing(cc.easeBackOut(3))), cc.sequence(cc.rotateBy(.05, 15), cc.rotateBy(.05, -15), cc.rotateTo(.05, 0)).repeat(3), cc.fadeOut(.5));
        this.shuffleTips.runAction(action);
      },
      addCoins: function addCoins(number) {
        var self = this;
        var rest = number % 10;
        var step = (number - rest) / 10;
        var _loop = function _loop(i) {
          setTimeout(function() {
            9 == i ? self.obtainCoinsEffect(step + rest, true) : self.obtainCoinsEffect(step);
          }, 100 * i);
        };
        for (var i = 0; i < 10; i++) _loop(i);
      },
      obtainCoinsEffect: function obtainCoinsEffect(event, isLastCoins) {
        var self = this;
        var coin = cc.instantiate(this.toolItem);
        var targetPos = this.coinsNumber.position;
        if (!this.coinsNumber.active) {
          this.coinsNumber.active = true;
          this.coinsNumber.scale = .1;
          var number = GameData.getGameData().starCount;
          this.updateCoinsPrompt(this.coinsNumber, number);
          this.coinsNumber.runAction(cc.spawn(cc.fadeIn(.5), cc.scaleTo(.5, 1).easing(cc.easeBackOut(3))));
        }
        coin.getComponent("toolItem").changeItemTexture(0);
        coin.parent = this.node;
        var randomX = Math.floor(200 * Math.random());
        var randomY = -500 + Math.floor(100 * Math.random());
        var time = .2 + .5 * Math.random();
        coin.position = cc.v2(randomX, randomY);
        var action = cc.sequence(cc.sequence(cc.scaleTo(.1, .9), cc.scaleTo(.1, 1.1), cc.scaleTo(.1, 1)), cc.spawn(cc.rotateBy(time, 720), cc.moveTo(time, targetPos).easing(cc.easeInOut(3)), cc.scaleTo(time, .5)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("flyCoins");
        }), cc.callFunc(function() {
          coin.removeFromParent();
          GameData.starCount += event;
          self.updateCoinsPrompt(self.coinsNumber, GameData.starCount);
          GameData.storeGameData();
          !isLastCoins || self.coinsNumber.runAction(cc.sequence(cc.delayTime(.5), cc.fadeOut(.5), cc.callFunc(function() {
            self.coinsNumber.active = false;
          })));
        }));
        coin.runAction(action);
      },
      coinsReduceAnimation: function coinsReduceAnimation(event) {
        var self = this;
        if (!this.coinsNumber.active) {
          this.coinsNumber.active = true;
          this.coinsNumber.scale = .1;
          var number = GameData.getGameData().starCount;
          this.updateCoinsPrompt(this.coinsNumber, number);
          var action = cc.sequence(cc.spawn(cc.scaleTo(.5, .9), cc.fadeIn(.5)), cc.spawn(cc.scaleTo(.5, 1.1), cc.callFunc(function() {
            self.updateCoinsPrompt(self.coinsNumber, GameData.starCount);
          })), cc.spawn(cc.scaleTo(.5, 1), cc.fadeOut(.5)), cc.callFunc(function() {
            self.coinsNumber.active = false;
          }));
          this.coinsNumber.runAction(cc.sequence(cc.spawn(cc.fadeIn(.5), cc.scaleTo(.5, 1).easing(cc.easeBackOut(3))), cc.callFunc(function() {
            GameData.starCount -= event.cost;
            GameData.storeGameData();
            self.coinsNumber.runAction(action);
          })));
        }
      },
      updateCoinsPrompt: function updateCoinsPrompt(node, num) {
        if (!!node) {
          var number = node.getChildByName("coins_number").getComponent(cc.Label);
          number.string = num + "";
        }
      },
      hinderSquirrelAnimation: function hinderSquirrelAnimation(event) {
        var targetPos = this.target.getTargetIconWolrdPosition(28);
        if (!targetPos) return;
        var squirrel = event.statue;
        var wp = event.worldPos;
        var nodePos = this.node.convertToNodeSpaceAR(wp);
        squirrel.parent = this.node;
        cc.director.SoundManager.playSound("statueShow");
        squirrel.position = nodePos;
        var np1 = this.node.convertToNodeSpaceAR(targetPos);
        var action = cc.sequence(cc.spawn(cc.sequence(cc.scaleTo(.5, .8), cc.scaleTo(.5, 1)), cc.sequence(cc.rotateBy(.5, -10), cc.rotateBy(.5, 10))), cc.spawn(cc.rotateTo(1, 0), cc.moveTo(1, np1).easing(cc.easeIn(3)), cc.scaleTo(1, .2), cc.callFunc(function() {
          cc.director.SoundManager.playSound("statueMove");
        })), cc.callFunc(function() {
          squirrel.removeFromParent(true);
          cc.systemEvent.emit("NUMBER_COUNT", {
            type: 28
          });
          if (GameData.bestLevel == statueLimitedLevel) {
            var thirteen = cc.sys.localStorage.getItem("thirteen_step");
            thirteen || cc.systemEvent.emit("STATUE_SECOND_GUIDE");
          }
          cc.director.SoundManager.playSound("statueCollect");
        }));
        squirrel.runAction(action);
      },
      hinderFlowerAnimaiton: function hinderFlowerAnimaiton(event) {
        var flower = cc.instantiate(this.flower_example);
        flower.active = true;
        var wp = event.worldPos;
        var nodePos = this.node.convertToNodeSpaceAR(wp);
        flower.parent = this.node;
        flower.position = nodePos;
        var targetPos = this.target.getTargetIconWolrdPosition(26);
        if (!targetPos) return;
        var np1 = this.node.convertToNodeSpaceAR(targetPos);
        var action = cc.sequence(cc.spawn(cc.sequence(cc.scaleTo(.5, 2), cc.scaleTo(.5, 1.9)), cc.sequence(cc.rotateBy(.5, -20), cc.rotateBy(.5, 20))), cc.spawn(cc.moveTo(1, np1).easing(cc.easeIn(3)), cc.scaleTo(1, .2)), cc.callFunc(function() {
          flower.removeFromParent(true);
          cc.director.SoundManager.playSound("mission");
          cc.systemEvent.emit("NUMBER_COUNT", {
            type: 26
          });
        }));
        flower.runAction(action);
      },
      hitGroundGrassAnimation: function hitGroundGrassAnimation(event) {
        var self = this;
        var wp = event.worldPos;
        var index = event.index;
        var np = this.node.convertToNodeSpaceAR(wp);
        var animaNode;
        cc.director.SoundManager.playSound("grassHit1");
        animaNode = this.grassPool.size() > 0 ? this.grassPool.get() : cc.instantiate(this.grassBreak);
        animaNode.parent = this.node;
        animaNode.position = np;
        var anima = animaNode.getComponent(cc.Animation);
        var name = "grass" + index;
        anima.play(name);
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          self.grassPool.put(animaNode);
        }, time);
      },
      hitCubesBubbleAnimation: function hitCubesBubbleAnimation(event) {
        var self = this;
        var wp = event.worldPos;
        var np = this.node.convertToNodeSpaceAR(wp);
        var animaNode;
        animaNode = this.bubblePool.size() > 0 ? this.bubblePool.get() : cc.instantiate(this.bubbleBreak);
        animaNode.parent = this.node;
        animaNode.position = np;
        var anima = animaNode.getComponent(cc.Animation);
        var name = "cubeBubbleBreak";
        anima.play(name);
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          self.bubblePool.put(animaNode);
        }, time);
      },
      start: function start() {
        this.stepTips.opacity = 0;
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils",
    "./target": "target",
    "./toolList": "toolList"
  } ],
  aniamationLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54b03mLX8pCYqnhBilIBHfg", "aniamationLayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        expItem: cc.Prefab,
        cropItem: cc.Prefab,
        coinsNode: cc.Node,
        coinsItem: cc.Prefab,
        land: cc.Node
      },
      onLoad: function onLoad() {
        this.positionList = {
          targetUrl1: "Canvas/UiNode/header/levelNode",
          targetUrl2: "Canvas/UiNode/btnArea/warehouse",
          targetUrl3: "Canvas/UiNode/btnArea/plant"
        };
        cc.systemEvent.on("START_TO_END", this.fromStartToTarget, this);
        cc.systemEvent.on("OBTAIN_CROPS", this.obtainCrops, this);
        cc.systemEvent.on("OBTAIN_COINS", this.obtainCoinsAnimation, this);
        cc.systemEvent.on("ANIMA_LAND_UNLOCK", this.landUnlockAnimation, this);
        cc.systemEvent.on("OBTAIN_SEED", this.unlockPlantSeedReward, this);
        this.expPool = new cc.NodePool();
        this.cropPool = new cc.NodePool();
      },
      initPool: function initPool() {
        var item = cc.instantiate(this.expItem);
        for (var i = 0; i < 10; i++) this.expPool.put(item);
        var item1 = cc.instantiate(this.cropItem);
        for (var j = 0; j < 10; j++) this.cropPool.put(item1);
      },
      fromStartToTarget: function fromStartToTarget(event) {
        var self = this;
        var item;
        item = this.expPool.size() > 0 ? this.expPool.get() : cc.instantiate(this.expItem);
        var startPos = event.worldPos;
        var number = event.num;
        var exp = event.exp;
        var end = cc.find(this.positionList["targetUrl1"]);
        var endWp = end.parent.convertToWorldSpaceAR(end.position);
        var nodeStart = this.node.convertToNodeSpaceAR(startPos);
        var nodeEnd = this.node.convertToNodeSpaceAR(endWp);
        item.position = nodeStart;
        item.parent = this.node;
        item.getComponent("expItem").updateExpNumber(exp);
        var distance = nodeEnd.sub(nodeStart).mag();
        var speed = 900;
        var t = distance / speed;
        var action = cc.sequence(cc.moveTo(t, nodeEnd).easing(cc.easeIn(2)), cc.callFunc(function() {
          self.expPool.put(item);
          cc.systemEvent.emit("UPDATE_FARM_PROGRESS", {
            num: number,
            islevelUp: event.islevelUp
          });
          cc.director.SoundManager.playSound("farm_reap_exp");
        }));
        item.stopAllActions();
        item.runAction(action);
      },
      obtainCrops: function obtainCrops(event) {
        var self = this;
        var item;
        item = this.cropPool.size() > 0 ? this.cropPool.get() : cc.instantiate(this.cropItem);
        var startPos = event.worldPos;
        var end = cc.find(this.positionList["targetUrl2"]);
        console.log(end.position, event.data);
        var endWp = end.parent.convertToWorldSpaceAR(end.position);
        var nodeStart = this.node.convertToNodeSpaceAR(startPos);
        var nodeEnd = this.node.convertToNodeSpaceAR(endWp);
        item.position = nodeStart;
        item.parent = this.node;
        item.getComponent("cropItem").updateDetail(event.data);
        var distance = nodeEnd.sub(nodeStart).mag();
        var speed = 600;
        var t = distance / speed;
        var action = cc.sequence(cc.moveTo(.5, cc.v2(nodeStart.x, nodeStart.y + 100)), cc.delayTime(.2), cc.moveTo(t, nodeEnd).easing(cc.easeIn(3)), cc.callFunc(function() {
          self.cropPool.put(item);
          end.runAction(cc.sequence(cc.scaleTo(.2, 1.1), cc.scaleTo(.2, .9), cc.scaleTo(.2, 1)));
          cc.director.SoundManager.playSound("farm_reap_vagetable");
        }));
        item.stopAllActions();
        item.runAction(action);
      },
      unlockPlantSeedReward: function unlockPlantSeedReward(event) {
        var self = this;
        var item;
        item = this.cropPool.size() > 0 ? this.cropPool.get() : cc.instantiate(this.cropItem);
        var startPos = event.worldPos;
        var end = cc.find(this.positionList["targetUrl3"]);
        var endWp = end.parent.convertToWorldSpaceAR(end.position);
        var nodeStart = this.node.convertToNodeSpaceAR(startPos);
        var nodeEnd = this.node.convertToNodeSpaceAR(endWp);
        item.position = nodeStart;
        item.parent = this.node;
        item.getComponent("cropItem").updateDetail(event.data);
        var distance = nodeEnd.sub(nodeStart).mag();
        var speed = 600;
        var t = distance / speed;
        var action = cc.sequence(cc.moveTo(t, nodeEnd).easing(cc.easeIn(3)), cc.callFunc(function() {
          self.cropPool.put(item);
          cc.systemEvent.emit("UPDATE_SEED", {
            data: {
              mode: 1,
              type: event.data.type,
              number: event.data.number
            }
          });
          end.runAction(cc.sequence(cc.scaleTo(.2, 1.1), cc.scaleTo(.2, .9), cc.scaleTo(.2, 1)));
          cc.director.SoundManager.playSound("farm_reap_vagetable");
        }));
        item.stopAllActions();
        item.runAction(action);
      },
      obtainCoinsAnimation: function obtainCoinsAnimation(event) {
        console.log(event, "farm animaLayer");
        var item_coin = cc.instantiate(this.coinsItem);
        var label = item_coin.getComponent(cc.Label);
        label.string = "." + event.coin;
        var end = this.coinsNode.parent.convertToWorldSpaceAR(this.coinsNode.position);
        var endPos = this.node.convertToNodeSpaceAR(end);
        var action = cc.sequence(cc.moveTo(1, endPos).easing(cc.easeIn(3)), cc.callFunc(function() {
          cc.systemEvent.emit("ADD_COINS", event.coin);
          item_coin.removeFromParent();
        }));
        item_coin.parent = this.node;
        item_coin.runAction(action);
      },
      landUnlockAnimation: function landUnlockAnimation(event) {
        var targetPos = this.node.convertToNodeSpaceAR(event.worldPos);
        var changeNode = cc.director.FarmManager.landContainer.children[event.index];
        var land = cc.instantiate(this.land);
        land.parent = this.node;
        land.active = true;
        var action = cc.sequence(cc.spawn(cc.moveTo(.5, targetPos), cc.scaleTo(.5, .5)), cc.callFunc(function() {
          land.removeFromParent();
          changeNode.getComponent("groundLand").displayLandStatue(3, false);
        }));
        land.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  animaTips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "baf95sH3AdCEKKnuMR9axW2", "animaTips");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        rocket: cc.Node,
        progress: cc.ProgressBar
      },
      squirrelRideRocket: function squirrelRideRocket() {
        var action = cc.sequence(cc.spawn(cc.scaleTo(1, .95), cc.moveTo(1, cc.v2(30, 10))), cc.sequence(cc.scaleTo(1, 1), cc.moveTo(1, cc.v2(0, 0)))).repeatForever();
        this.rocket.position = cc.v2(0, 0);
        this.rocket.runAction(action);
      },
      progressBarMove: function progressBarMove() {
        this.progress.progress += .3 + .1 * Math.random();
        if (this.progress.progress >= 1) {
          this.progress.progress = 1;
          this.unschedule(this.progressBarMove);
        }
      },
      showView: function showView() {
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 1
        });
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.squirrelRideRocket();
        this.progress.progress = 0;
        this.schedule(this.progressBarMove, 1);
      },
      hideView: function hideView() {
        if (!this.node.active) return;
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 2
        });
        this.unschedule(this.progressBarMove);
        this.progress.progress = 1;
        this.rocket.stopAllActions();
        this.node.active = false;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../utils": "utils"
  } ],
  arrow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf998rIOfJDyYE2oLq6n676", "arrow");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      computedLineDistanceAndRotation: function computedLineDistanceAndRotation(pos, tarPos) {
        pos = this.node.convertToNodeSpaceAR(pos);
        var nPos = new cc.Vec2(pos.x, pos.y);
        tarPos = this.node.convertToNodeSpaceAR(tarPos);
        var vector1 = nPos.sub(cc.v2(nPos.x, nPos.y + 100));
        var vector2 = nPos.sub(tarPos);
        var degree = parseInt(vector2.signAngle(vector1) * (180 / Math.PI));
        this.node.rotation = degree - 180;
      },
      unuse: function unuse() {
        this.node.rotation = 0;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  bgPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57e12rMAsxHcY/QBjuEany7", "bgPrompt");
    "use strict";
    var Config = require("../psconfig");
    var Uitls = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        prompt: cc.Prefab
      },
      initBgPrompt: function initBgPrompt(list) {
        this.node.children.length > 0 && this.node.removeAllChildren();
        for (var row = 0; row < Config.matrixRow; row++) for (var col = 0; col < Config.matrixCol; col++) if (list[row][col] >= 0) {
          var item = cc.v2(row, col);
          var boundList = Uitls.judgeBounder(item, list);
          var angelList = Uitls.judgeAngle(item, list);
          var prompt = cc.instantiate(this.prompt);
          var pos = Uitls.girdToPos(row, col, .5);
          prompt.position = pos;
          prompt.getComponent("prompt").bounderControl(boundList);
          prompt.getComponent("prompt").angleControl(angelList);
          this.node.addChild(prompt);
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  block: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d82fPiZNtP8KBSCtJjEdU9", "block");
    "use strict";
    var GameData = require("../gameData");
    var Utils = require("../utils");
    var Config = require("../psconfig");
    var windmillLimitedLevel = 59;
    cc.Class({
      extends: cc.Component,
      properties: {
        outLine: cc.Node,
        temp: cc.Node,
        view: cc.Node,
        _xPos: 0,
        _yPos: 0,
        _stoneNum: 0,
        _stoneType: 0,
        rocketType: 0,
        discoType: 0,
        lock_func: cc.Node,
        bombRatio: -1,
        nextType: -1,
        viewList: [ cc.SpriteFrame ],
        rocketList: [ cc.SpriteFrame ],
        discoList: [ cc.SpriteFrame ],
        hinderView: [ cc.SpriteFrame ],
        tipsView_2: [ cc.SpriteFrame ],
        tipsView_4: [ cc.SpriteFrame ],
        tipsView_8: [ cc.SpriteFrame ],
        tipsView_16: [ cc.SpriteFrame ],
        tipsView_32: [ cc.SpriteFrame ],
        tipsView_64: [ cc.SpriteFrame ],
        tipsView_128: [ cc.SpriteFrame ],
        tipsView_256: [ cc.SpriteFrame ],
        combineView: [ cc.SpriteFrame ],
        colorCubeViewList: [ cc.SpriteFrame ],
        boxCubesHitView: [ cc.SpriteFrame ],
        windmillNetView: [ cc.SpriteFrame ],
        ladyBugBubbleView: [ cc.SpriteFrame ],
        flower: cc.Node,
        plant: cc.Node,
        windmillOutlineLight: cc.Node,
        ladyBug: cc.Prefab,
        vine: cc.SpriteFrame,
        toolAnima: cc.Node
      },
      onLoad: function onLoad() {},
      initStoneView: function initStoneView(x, y, type, number) {
        this.changeStoneGrid(x, y);
        this.changeStoneNum(type, number);
      },
      updateTipsView: function updateTipsView(type) {
        var spriteFrame;
        0 == this._stoneType && (spriteFrame = this.tipsView_2[type]);
        1 == this._stoneType && (spriteFrame = this.tipsView_4[type]);
        2 == this._stoneType && (spriteFrame = this.tipsView_8[type]);
        3 == this._stoneType && (spriteFrame = this.tipsView_16[type]);
        4 == this._stoneType && (spriteFrame = this.tipsView_32[type]);
        5 == this._stoneType && (spriteFrame = this.tipsView_64[type]);
        6 == this._stoneType && (spriteFrame = this.tipsView_128[type]);
        7 == this._stoneType && (spriteFrame = this.tipsView_256[type]);
        this.view.getComponent(cc.Sprite).spriteFrame = spriteFrame;
      },
      originView: function originView() {
        this.view.getComponent(cc.Sprite).spriteFrame = this.viewList[this._stoneType];
      },
      changeStoneNum: function changeStoneNum(type, number) {
        this._stoneType = type;
        if (type >= 0) {
          this._stoneNum = Math.pow(2, this._stoneType + 1);
          if (type == Config.rType) {
            this.rocketType = this.randomCreateRocketType();
            this.view.getComponent(cc.Sprite).spriteFrame = this.rocketList[this.rocketType];
          } else if (type == Config.dType) {
            this.discoType = number <= 5 ? number : this.randomCreateDiscoType();
            this.view.getComponent(cc.Sprite).spriteFrame = this.discoList[this.discoType];
          } else if (type == Config.bType) {
            this.view.active = false;
            this.playToolAnima(2);
          } else if (type >= 20) if (22 == type) {
            this.lock_func.active = true;
            this.lock_func.getComponent(cc.Sprite).spriteFrame = this.vine;
            this.nextType = this.randomCreateDiscoType();
            this.bombRatio = 1;
            this.view.getComponent(cc.Sprite).spriteFrame = this.viewList[this.nextType];
          } else if (type >= 23 && type <= 25) {
            23 == type && this.initBoxCubesData(3);
            24 == type && this.initBoxCubesData(2);
            25 == type && this.initBoxCubesData(1);
          } else 26 == type ? this.initFlowerCubesData() : 27 == type ? this.initWindmill(3) : type >= 29 && type <= 36 ? this.initColorfulCubes(1, type - 29) : 37 == type ? this.initLadyBugCubes(3) : 39 == type ? this.initRockStone(1) : this.view.getComponent(cc.Sprite).spriteFrame = this.hinderView[type - 20]; else this.view.getComponent(cc.Sprite).spriteFrame = this.viewList[type];
        } else this.view.getComponent(cc.Sprite).spriteFrame = null;
      },
      cubesUnlock: function cubesUnlock() {
        if (this.bombRatio <= 0) {
          this.bombRatio = -1;
          this.lock_func.active = false;
          GameData.starMatrix[this._xPos][this._yPos] = this.nextType;
          this.changeStoneNum(this.nextType);
          this.nextType = -1;
        }
      },
      boxCubesDisappear: function boxCubesDisappear() {
        this.bombRatio = -1;
        GameData.starMatrix[this._xPos][this._yPos] = -1;
        this.node.removeFromParent();
      },
      blockDataReset: function blockDataReset() {
        this.bombRatio = -1;
        GameData.starMatrix[this._xPos][this._yPos] = -1;
      },
      boxHit: function boxHit() {
        this.bombRatio > 0 ? this.lock_func.getComponent(cc.Sprite).spriteFrame = this.boxCubesHitView[this.bombRatio - 2] : 0 == this.bombRatio && (this.lock_func.active = false);
        this.cubeRotation(this.node, 1003);
      },
      initBoxCubesData: function initBoxCubesData(count) {
        this.bombRatio = count;
        this.lock_func.active = true;
        count - 2 < 0 ? this.lock_func.active = false : this.lock_func.getComponent(cc.Sprite).spriteFrame = this.boxCubesHitView[this.bombRatio - 2];
        this.view.getComponent(cc.Sprite).spriteFrame = this.hinderView[3];
      },
      initFlowerCubesData: function initFlowerCubesData() {
        this.view.active = false;
        this.flower.active = true;
        this.lock_func.active = false;
        var petal = this.plant.getChildByName("petal");
        petal.active = false;
        this.bombRatio = 4;
      },
      flowerHit: function flowerHit() {
        var self = this;
        var petal = this.plant.getChildByName("petal");
        petal.active = true;
        petal.stopActionByTag(1002);
        var name = "item" + (4 - this.bombRatio);
        var item = petal.getChildByName(name);
        this.node.zIndex = 1;
        var action = cc.sequence(cc.sequence(cc.scaleTo(.2, .8), cc.scaleTo(.2, 1.2)).repeat(2), cc.scaleTo(.15, 1.5).easing(cc.easeBackOut(3)), cc.rotateBy(.3, 90), cc.spawn(cc.scaleTo(.25, 1).easing(cc.easeBackOut(3)), cc.callFunc(function() {
          item.active = true;
          self.node.zIndex = 0;
        })));
        action.tag = 1002;
        this.plant.runAction(action);
      },
      collectFlower: function collectFlower() {
        this.bombRatio = -1;
        GameData.starMatrix[this._xPos][this._yPos] = -1;
        this.node.removeFromParent();
      },
      initWindmill: function initWindmill(count) {
        this.bombRatio = count;
        this.lock_func.active = true;
        count - 2 < 0 ? this.lock_func.active = false : this.lock_func.getComponent(cc.Sprite).spriteFrame = this.windmillNetView[this.bombRatio - 2];
        this.view.getComponent(cc.Sprite).spriteFrame = this.hinderView[4];
      },
      hitWindmill: function hitWindmill() {
        if (this.bombRatio > 0) {
          this.lock_func.getComponent(cc.Sprite).spriteFrame = this.windmillNetView[this.bombRatio - 2];
          if (1 == this.bombRatio) {
            this.windmillOutlineLight.active = true;
            this.node.zIndex = 1;
            this.node.runAction(cc.rotateBy(5, 360).repeatForever());
            if (GameData.bestLevel == windmillLimitedLevel) {
              var eleven = cc.sys.localStorage.getItem("eleven_step");
              eleven || cc.systemEvent.emit("WINDMILL_SECOND_GUIDE", {
                windmillList: [ cc.v2(this._xPos, this._yPos) ]
              });
            }
          } else this.windmillRotation(this.view, 1002);
        } else 0 == this.bombRatio && (this.lock_func.active = false);
      },
      windmillRotation: function windmillRotation(node, tag) {
        node.stopActionByTag(tag);
        var rotate = 360;
        var action = cc.rotateBy(1, rotate);
        action.tag = tag;
        node.runAction(action);
      },
      initColorfulCubes: function initColorfulCubes(count, nextType) {
        this.bombRatio = count;
        this.nextType = nextType;
        this.lock_func.active = false;
        "number" == typeof this.nextType && (this.view.getComponent(cc.Sprite).spriteFrame = this.colorCubeViewList[this.nextType]);
      },
      initLadyBugCubes: function initLadyBugCubes(count) {
        this.bombRatio = count;
        this.lock_func.active = false;
        this.view.getComponent(cc.Sprite).spriteFrame = this.hinderView[5];
        this.temp.active = true;
        var ladyBugChaos = cc.instantiate(this.ladyBug);
        ladyBugChaos.parent = this.temp;
        var anima = ladyBugChaos.getComponent(cc.Animation);
        anima.play("ladyBugChaos");
      },
      initRockStone: function initRockStone(count) {
        this.bombRatio = count;
        this.lock_func.active = false;
        this.view.getComponent(cc.Sprite).spriteFrame = this.hinderView[6];
      },
      hitLadyBugCubes: function hitLadyBugCubes() {
        cc.director.SoundManager.playSound("glassBallBreak");
        this.view.getComponent(cc.Sprite).spriteFrame = this.ladyBugBubbleView[this.bombRatio - 1];
        this.cubeRotation(this.node, 1003);
      },
      randomCreateRocketType: function randomCreateRocketType() {
        var random = Math.floor(100 * Math.random());
        return random % 2;
      },
      randomCreateDiscoType: function randomCreateDiscoType() {
        var list = [ 0, 1, 2, 3, 4 ];
        var random = Math.floor(Math.random() * list.length);
        return list[random];
      },
      randomGetItemType: function randomGetItemType(List) {
        var random;
        if (!!List && List.length > 0) {
          random = Math.floor(Math.random() * List.length);
          return List[random];
        }
        return false;
      },
      changeStoneGrid: function changeStoneGrid(xPos, yPos) {
        this._xPos = xPos;
        this._yPos = yPos;
      },
      nodeRotation: function nodeRotation(node, tag) {
        var self = this;
        var action = cc.sequence(cc.sequence(cc.rotateBy(.05, 20), cc.rotateBy(.05, -20)).repeat(2), cc.callFunc(function() {
          self.node.rotation = 0;
        }));
        action.tag = tag;
        node.runAction(action);
      },
      cubeRotation: function cubeRotation(node, tag) {
        var action = cc.sequence(cc.spawn(cc.sequence(cc.rotateBy(.05, 20), cc.rotateBy(.05, -20)).repeat(2), cc.scaleTo(.2, 1.2)), cc.scaleTo(.2, 1), cc.callFunc(function() {
          node.rotation = 0;
        }));
        action.tag = tag;
        node.runAction(action);
      },
      onTouchStart: function onTouchStart() {
        if (!!cc.director.isMoving || cc.director.container.target.stepCount <= 0 || !!cc.director.isrunning) return;
        -2 != this._stoneType && -1 != this._stoneType && cc.director.SoundManager.playSound("tap");
        if (this._stoneType < Config.rType) {
          cc.director.isMoving = true;
          var stonePos = cc.v2(this._xPos, this._yPos);
          var combineList = Utils.needRemoveList(GameData.starMatrix, stonePos);
          if (cc.director.toolType > 0) {
            if (-2 == this._stoneType) {
              cc.director.isMoving = false;
              return;
            }
            var type = cc.director.toolType;
            var grid = cc.v2(this._xPos, this._yPos);
            var wp = this.node.parent.convertToWorldSpaceAR(Utils.grid2Pos(grid.x, grid.y));
            cc.systemEvent.emit("TOOL_TRANS_EFFECT", {
              type: type,
              grid: grid,
              wp: wp
            });
          } else if (combineList.length > 1) cc.systemEvent.emit("REMOVE_CUBES", {
            detail: combineList
          }); else {
            this.nodeRotation(this.node, 2);
            cc.director.isMoving = false;
            Utils.getItemAdjacentPos(stonePos);
            -2 != this._stoneType && -1 != this._stoneType && cc.director.SoundManager.playSound("noCombine");
          }
        } else {
          if (cc.director.toolType > 0) {
            if (cc.director.toolType <= 3) {
              if (this._stoneType >= 8 && this._stoneType <= 10 || 3 == cc.director.toolType && 20 == this._stoneType) return;
              var _type = cc.director.toolType;
              var _grid = cc.v2(this._xPos, this._yPos);
              var _wp = this.node.parent.convertToWorldSpaceAR(Utils.grid2Pos(_grid.x, _grid.y));
              cc.systemEvent.emit("TOOL_TRANS_EFFECT", {
                type: _type,
                grid: _grid,
                wp: _wp
              });
            }
            return;
          }
          if (this._stoneType >= 20) {
            this.nodeRotation(this.node, 3);
            cc.director.isMoving = false;
            cc.director.SoundManager.playSound("noCombine");
          } else {
            cc.systemEvent.emit("STEP_COUNT");
            var _type2;
            this._stoneType == Config.rType ? _type2 = this.rocketType : this._stoneType == Config.dType && (_type2 = this.discoType);
            var detail = {
              index: this._stoneType,
              type: _type2,
              grid: cc.v2(this._xPos, this._yPos)
            };
            cc.systemEvent.emit("GAME_TOOL", {
              detail: detail
            });
          }
        }
      },
      unuse: function unuse() {
        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchStart, this);
        this.node.stopAllActions();
        this.node.rotation = 0;
        this.node.zIndex = 0;
        this._stoneType = -1;
        this.outLine.active = false;
        this.lock_func.active = false;
        this.windmillOutlineLight.active = false;
        this.toolAnima.active = false;
        this.view.rotation = 0;
        if (this.flower.active) {
          var petal = this.plant.getChildByName("petal");
          var children = petal.children;
          for (var i = 0; i < children.length; i++) children[i].active = false;
          this.flower.active = false;
        }
        if (this.temp.active) {
          this.temp.active = false;
          this.temp.removeAllChildren();
          this.view.active = false;
          this.view.stopAllActions();
          this.view.rotation = 0;
        }
      },
      reuse: function reuse() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchStart, this);
        this.node.scale = .2;
        this.node.stopActionByTag(1);
        this.node.rotation = 0;
        this.view.active = true;
        this.node.runAction(cc.spawn(cc.scaleTo(.3, 1), cc.fadeIn(.1)));
      },
      blockChoosed: function blockChoosed() {
        var action = cc.sequence(cc.rotateBy(.05, 10), cc.rotateBy(.05, -10)).repeatForever();
        action.tag = 1;
        this.node.runAction(action);
      },
      createGameTool: function createGameTool(num) {},
      toolCanCombineEffect: function toolCanCombineEffect(node) {
        this.temp.active = true;
        node.parent = this.temp;
      },
      discoEffect: function discoEffect(node, type) {
        this.node.zIndex = 1;
        this.temp.active = true;
        node.active = true;
        node.parent = this.temp;
        var action = cc.rotateBy(1, 720).repeatForever();
        action.tag = 1;
        !type || (this.view.getComponent(cc.Sprite).spriteFrame = this.combineView[type - 1]);
        this.view.runAction(action);
      },
      playToolAnima: function playToolAnima(type) {
        this.toolAnima.active = true;
        var anima = this.toolAnima.getComponent(cc.Animation);
        var animaName;
        1 == type || (2 == type ? animaName = "tool_bomb" : 3 == type && (animaName = "tool_disco"));
        !animaName || anima.play(animaName);
      },
      test: function test() {
        console.log("1111111fuck");
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  boxPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ef9fKJ6FpMJKboa4+eibfh", "boxPanel");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    var targetPos = [ cc.v2(-160, 180), cc.v2(0, 180), cc.v2(160, 180) ];
    var coinsNumber = 180;
    var max_life = Config.MAX_LIFE;
    cc.Class({
      extends: cc.Component,
      properties: {
        toolList: [ cc.Node ],
        toolBox: cc.Node,
        firework: cc.ParticleSystem,
        btn_claim: cc.Node,
        nameList: [ cc.SpriteFrame ],
        toolViewList: [ cc.SpriteFrame ],
        blueBoxStatusView: [ cc.SpriteFrame ],
        pinkBoxStatusView: [ cc.SpriteFrame ],
        name_title: cc.Sprite,
        light: cc.Node
      },
      showView: function showView(color) {
        this.color = color;
        this.name_title.spriteFrame = this.nameList[this.color - 1];
        var isFirstTime = cc.sys.localStorage.getItem("isFirstTime");
        if (isFirstTime) {
          this.packageList = this.pakageType(this.randomBoxReward());
          if (GameData.lifeNumber < 3) {
            this.packageList.pop();
            this.packageList.push({
              type: 8,
              number: 1
            });
          }
        } else {
          this.packageList = this.pakageType([ 0, 1, 3 ]);
          cc.sys.localStorage.setItem("isFirstTime", "no");
        }
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.changeBoxStatus(0, color);
        this.hideToolList();
        this.toolFromBoxBefore(this.toolBox);
        this.scheduleOnce(function() {
          this.toolFromBoxEffect(this.packageList, color);
        }, .7);
        this.btn_claim.active = false;
        this.light.runAction(cc.rotateBy(2, 100).repeatForever());
      },
      hideView: function hideView() {
        if (1 == this.color) {
          cc.sys.localStorage.setItem("blueMark", "no");
          GameData.currentStar >= 20 ? GameData.currentStar -= 20 : GameData.currentStar = 0;
          GameData.storeGameData();
          cc.find("Canvas").getComponent("mainScreen").updateBlueBoxStarNumber();
        }
        if (2 == this.color) {
          var times = cc.sys.localStorage.getItem("pinkMark");
          if (!!times) {
            times = JSON.parse(times);
            if (times > 0) {
              times--;
              cc.sys.localStorage.setItem("pinkMark", JSON.stringify(times));
            }
          }
          cc.find("Canvas").getComponent("mainScreen").updateNextOpenLevel();
        }
        this.node.active = false;
        this.hideToolList();
        this.afterObtainAnimation();
        this.light.stopAllActions();
      },
      changeBoxStatus: function changeBoxStatus(type, color) {
        var box = this.toolBox.getChildByName("box");
        1 == color ? Utils.changeLocalNodeTexture(box, this.blueBoxStatusView, type) : Utils.changeLocalNodeTexture(box, this.pinkBoxStatusView, type);
      },
      afterObtainAnimation: function afterObtainAnimation() {
        for (var i = 0; i < this.packageList.length; i++) {
          var pos = this.node.convertToWorldSpaceAR(targetPos[i]);
          cc.systemEvent.emit("TOOLOBTAIN", {
            pos: pos,
            type: this.packageList[i].type,
            number: this.packageList[i].number
          });
        }
      },
      hideToolList: function hideToolList() {
        for (var i = 0; i < this.toolList.length; i++) {
          var item = this.toolList[i];
          item.active = false;
          item.scale = 1;
          item.rotation = 0;
          item.stopActionByTag(1);
          item.position = this.toolBox.position;
        }
      },
      toolFromBoxBefore: function toolFromBoxBefore(node) {
        var self = this;
        var action = cc.sequence(cc.rotateBy(.1, 15), cc.rotateBy(.1, -15), cc.callFunc(function() {
          node.rotation = 0;
        })).repeat(3);
        node.runAction(action);
      },
      toolFromBoxEffect: function toolFromBoxEffect(dataList, color) {
        var _this = this;
        this.changeBoxStatus(1, color);
        var _loop = function _loop(i) {
          var item = _this.toolList[i];
          var icon = item.getChildByName("icon");
          icon.getComponent(cc.Sprite).spriteFrame = _this.toolViewList[dataList[i].type];
          var count = _this.toolList[i].getChildByName("count").getComponent(cc.Label);
          count.string = dataList[i].number;
          _this.scheduleOnce(function() {
            cc.director.SoundManager.playSound("flyTool");
            this.swallowEffect(this.toolBox);
            this.toolAction(item, targetPos[i]);
            i == this.toolList.length - 1 && (this.btn_claim.active = true);
          }, 1 * i);
        };
        for (var i = 0; i < this.toolList.length; i++) _loop(i);
      },
      toolAction: function toolAction(node, pos) {
        node.stopActionByTag(1);
        node.active = true;
        node.position = this.toolBox.position;
        node.scale = .01;
        var action = cc.spawn(cc.rotateBy(.5, 360), cc.scaleTo(.5, 1), cc.moveTo(.5, pos));
        action.tag = 1;
        node.runAction(action);
      },
      swallowEffect: function swallowEffect(node) {
        var action = cc.sequence(cc.scaleTo(.2, 1.1), cc.scaleTo(.2, 1));
        action.tag = 2;
        node.runAction(action);
        this.firework.node.active = true;
        this.firework.resetSystem();
      },
      randomBoxReward: function randomBoxReward() {
        var list;
        list = GameData.lifeNumber < max_life ? [ 0, 1, 2, 3, 4, 5, 6, 8 ] : [ 0, 1, 2, 3, 4, 5, 6 ];
        var rewardList = [];
        while (rewardList.length < 3) {
          var random = Math.floor(Math.random() * (list.length - 1));
          this.checkList(rewardList, list[random]) || rewardList.push(list[random]);
        }
        rewardList.sort(function(a, b) {
          return a - b;
        });
        return rewardList;
      },
      pakageType: function pakageType(list) {
        var dataList = [];
        for (var i = 0; i < list.length; i++) {
          var item = {};
          item.type = list[i];
          0 == list[i] ? item.number = this.randomCoinsNumber() : item.number = 1;
          dataList.push(item);
        }
        return dataList;
      },
      randomCoinsNumber: function randomCoinsNumber() {
        var num = coinsNumber + 10 * Math.ceil(12 * Math.random());
        return num;
      },
      checkList: function checkList(array, item) {
        return array.some(function(elem, index, arr) {
          return elem == item;
        });
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  bubbleCubeContainer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78432lVO0xALaNpNt31g3d/", "bubbleCubeContainer");
    "use strict";
    var GameData = require("../gameData");
    var Utils = require("../utils");
    var Config = require("../psconfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        bubble: cc.Prefab
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("REMOVE_SINGLE_BUBBLE", this.removeSingleBubble, this);
        this.bubblePool = new cc.NodePool();
      },
      initBubbleView: function initBubbleView() {
        var matrixData = new Array(Config.matrixRow);
        var spriteList = [];
        for (var row = 0; row < Config.matrixRow; row++) {
          matrixData[row] = new Array(Config.matrixCol);
          for (var col = 0; col < Config.matrixCol; col++) {
            matrixData[row][col] = 0;
            var index = Utils.indexValue(row, col);
            spriteList[index] = null;
          }
        }
        this.bubbleList = matrixData;
        this.spriteList = spriteList;
      },
      loadMapRes: function loadMapRes(posList, dataList) {
        for (var p = 0; p < posList.length; p++) {
          var item = posList[p];
          var xStart = item[0][0];
          var xEnd = item[1][0];
          var yStart = item[0][1];
          var yEnd = item[1][1];
          var type = item[2];
          for (var i = xStart; i <= xEnd; i++) for (var j = yStart; j <= yEnd; j++) {
            if (-2 == GameData.starMatrix[i][j]) continue;
            dataList[i][j] = type;
          }
        }
      },
      loadBubbleRes: function loadBubbleRes(dataList) {
        this.node.children.length > 0 && this.recycleBubbleNode();
        for (var i = 0; i < dataList.length; i++) for (var j = 0; j < dataList.length; j++) if (dataList[i][j] >= 1) {
          var item = cc.v2(i, j);
          this.addBubbleChild(item, dataList[i][j]);
        }
      },
      addBubbleChild: function addBubbleChild(pos, type) {
        var index = Utils.indexValue(pos.x, pos.y);
        var bubble;
        bubble = this.bubblePool.size() > 0 ? this.bubblePool.get() : cc.instantiate(this.bubble);
        bubble.parent = this.node;
        bubble.position = Utils.grid2Pos(pos.x, pos.y);
        this.spriteList[index] = bubble;
      },
      recycleBubbleNode: function recycleBubbleNode() {
        var list = this.node.children;
        for (var i = list.length - 1; i >= 0; i--) "bubbleCube" == list[i].name ? this.bubblePool.put(list[i]) : list[i].removeFromParent();
      },
      removeSingleBubble: function removeSingleBubble(event) {
        var pos = event.pos;
        var index = Utils.indexValue(pos.x, pos.y);
        if (!!this.spriteList && null != this.spriteList[index]) {
          var bubbleItem = this.spriteList[index];
          var wp = bubbleItem.parent.convertToWorldSpaceAR(bubbleItem.position);
          this.bubblePool.put(bubbleItem);
          this.spriteList[index] = null;
          this.bubbleList[pos.x][pos.y] = 0;
          cc.director.SoundManager.playSound("cubeBubble");
          cc.systemEvent.emit("HIT_BUBBLE_ANIMATION", {
            worldPos: wp
          });
          cc.systemEvent.emit("NUMBER_COUNT", {
            type: 38
          });
        }
      },
      reset: function reset() {
        this.recycleBubbleNode();
      },
      initFunc: function initFunc(list) {
        this.initBubbleView();
        this.loadMapRes(list, this.bubbleList);
        this.loadBubbleRes(this.bubbleList);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  canvas: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7e4c+diCRCeYO35vCnFFjw", "canvas");
    "use strict";
    var Utils = require("./utils");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      resize: function resize() {
        var cvs = cc.find("Canvas").getComponent(cc.Canvas);
        this.curDR || (this.curDR = cvs.designResolution);
        var dr = this.curDR;
        var s = cc.view.getFrameSize();
        var rw = s.width;
        var rh = s.height;
        var finalW = rw;
        var finalH = rh;
        if (rw / rh > dr.width / dr.height) {
          finalH = dr.height;
          finalW = finalH * rw / rh;
        } else {
          finalW = dr.width;
          finalH = rh / rw * finalW;
        }
        cvs.designResolution = cc.size(finalW, finalH);
        cvs.node.width = finalW;
        cvs.node.height = finalH;
        cvs.node.emit("resize");
      },
      onEnable: function onEnable() {},
      start: function start() {
        Utils.resize();
      }
    });
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  changeName: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8901t0NxxCw5mT4J8wMCmk", "changeName");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        enterTips: cc.Sprite,
        enterTipsList: [ cc.SpriteFrame ],
        editBox: cc.EditBox,
        moveTips: cc.Node,
        moveTipsList: [ cc.SpriteFrame ],
        node_btn_continue: cc.Node,
        list_btn: [ cc.SpriteFrame ]
      },
      showView: function showView() {
        var localData = cc.sys.localStorage.getItem("localData");
        if (!localData) {
          cc.director.screenDialog.mask.active = false;
          console.log("zou le zheli?");
          return;
        }
        localData = JSON.parse(localData);
        if ("number" == typeof localData.issetname && 0 === localData.issetname) {
          this.node.active = true;
          Utils.showPromptWithScale(this.node);
          this.initChangeBox();
        } else console.log("fuck");
      },
      initChangeBox: function initChangeBox() {
        console.log(this.editBox);
        this.editBox.string = "";
        this.editBox.placeholder = "Enter your name...";
        this.clickTime = 0;
        this.enterTips.spriteFrame = this.enterTipsList[0];
        this.node_btn_continue.getComponent(cc.Sprite).spriteFrame = this.list_btn[0];
      },
      hideView: function hideView() {
        this.node.active = false;
      },
      btnClick: function btnClick() {
        var self = this;
        if (0 == this.clickTime) {
          this.name1 = this.editBox.string.trim();
          this.editBox.string = "";
          this.enterTips.spriteFrame = this.enterTipsList[1];
          this.clickTime++;
          this.node_btn_continue.getComponent(cc.Sprite).spriteFrame = this.list_btn[1];
        } else {
          var name2 = this.editBox.string.trim();
          if (this.name1 == name2 && "" != this.name1) {
            cc.systemEvent.emit("LOAD_TIPS_SHOW");
            var params = {}, uid;
            params.name = this.name1;
            var callback = function callback(res) {
              cc.systemEvent.emit("LOAD_TIPS_HIDE");
              if (0 === res.code) {
                console.log("change name successed");
                cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
                  type: 2
                });
                self.hideView();
              } else if (1005 == res.code) {
                console.log("the name is exists");
                self.moveTipsAnima(0);
                self.initChangeBox();
              } else console.log(res.code, "error:", res.msg);
            };
            var localData = cc.sys.localStorage.getItem("localData");
            if (!localData) uid = window.NativeManager.getUid(); else {
              localData = JSON.parse(localData);
              uid = "" == localData.uid ? window.NativeManager.getUid() : localData.uid;
            }
          } else {
            console.log("\u4e24\u6b21\u7684\u8f93\u5165\u4e0d\u4e00\u6837");
            this.moveTipsAnima(1);
            this.initChangeBox();
          }
        }
      },
      moveTipsAnima: function moveTipsAnima(type) {
        var self = this;
        this.moveTips.getComponent(cc.Sprite).spriteFrame = this.moveTipsList[type];
        this.moveTips.active = true;
        this.moveTips.stopAllActions();
        this.moveTips.position = cc.v2(0, 0);
        var action = cc.sequence(cc.fadeIn(.1), cc.moveTo(1, cc.v2(0, 100)).easing(cc.easeOut(3)), cc.fadeOut(.5), cc.callFunc(function() {
          self.moveTips.active = false;
        }));
        this.moveTips.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  container: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2be3+0kBhOyof33kpgvyP1", "container");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    var levelResource = require("../newLevelResource");
    cc.Class({
      extends: cc.Component,
      properties: {
        stone: cc.Prefab,
        del_col: cc.Prefab,
        fire: cc.Prefab,
        line: cc.Prefab,
        tool_effect: cc.Prefab,
        rotationEffect: cc.Prefab,
        balloonBoom: cc.Prefab,
        progressBar: require("./progressBar"),
        target: require("./target"),
        bgPrompt: require("./bgPrompt"),
        rock: cc.Prefab,
        boom_effect: cc.Prefab,
        toolCombineEffect: cc.Prefab,
        absorb: cc.Prefab,
        toolItem: cc.Prefab,
        superDisco: cc.Prefab,
        dust: cc.Prefab,
        testArrow: cc.Prefab,
        vineBreak: cc.Prefab,
        ironLineBreak_right: cc.Prefab,
        ironLineBreak_left: cc.Prefab,
        woodCubeBreak: cc.Prefab,
        normalCubeBreak: cc.Prefab,
        netBreak1: cc.Prefab,
        netBreak2: cc.Prefab,
        windmill_particle: cc.Prefab,
        ladyBugMove: cc.Prefab,
        ladyBugArrive: cc.Prefab,
        colorCubeBreak: cc.Prefab,
        ladyBugBubbleBreak: cc.Prefab,
        rockStoneBreak: cc.Prefab,
        grassGround: require("./glassGround"),
        bubbleGround: require("./bubbleCubeContainer"),
        cubeBreakList: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("GAME_TOOL", this.handleGameTool, this);
        cc.systemEvent.on("REMOVE_CUBES", this.removeSameColorCubeByClick, this);
        cc.systemEvent.on("player_tool", this.handlePlayerTool, this);
        cc.systemEvent.on("FIREINTHEHOLE", this.fireTheHole, this);
        cc.systemEvent.on("BOXING_ANVIL", this.boxingAndAnvil, this);
        this.stonePool = new cc.NodePool("block");
        this.colPool = new cc.NodePool();
        this.firePool = new cc.NodePool("arrow");
        this.linePool = new cc.NodePool("line");
        this.rockPool = new cc.NodePool();
        this.CubeBreakPool = new cc.NodePool();
        this.lineList = [];
        var stone, del_col, fire, line, toolEffect, rotationEffect, rocketHead, breakCube;
        for (var i = 0; i < 100; i++) {
          stone = cc.instantiate(this.stone);
          this.stonePool.put(stone);
        }
        for (var a = 0; a < 10; a++) {
          del_col = cc.instantiate(this.del_col);
          this.colPool.put(del_col);
        }
        for (var b = 0; b < 20; b++) {
          fire = cc.instantiate(this.testArrow);
          this.firePool.put(fire);
        }
        for (var c = 0; c < 20; c++) {
          line = cc.instantiate(this.line);
          this.linePool.put(line);
        }
        for (var d = 0; d < 20; d++) {
          rocketHead = cc.instantiate(this.rock);
          this.rockPool.put(rocketHead);
        }
        for (var e = 0; e < 20; e++) {
          breakCube = cc.instantiate(this.normalCubeBreak);
          this.CubeBreakPool.put(breakCube);
        }
        var manager = cc.director.getCollisionManager();
        manager.enabled = true;
        cc.director.container = this;
        this.passIndex = false;
      },
      initStoneData: function initStoneData(grid, type) {
        var stone;
        stone = this.stonePool.size() > 0 ? this.stonePool.get() : cc.instantiate(this.stone);
        var pos = Utils.grid2Pos(grid.x, grid.y);
        var script = stone.getComponent("block");
        script.initStoneView(grid.x, grid.y, type);
        stone.position = pos;
        this.node.addChild(stone);
        var index = Utils.indexValue(grid.x, grid.y);
        GameData.starSprite[index] = -2 == type ? null : stone;
      },
      initContainerView: function initContainerView(data) {
        this.reclaimNode();
        for (var i = 0; i < Config.matrixRow; i++) for (var j = 0; j < Config.matrixCol; j++) {
          var pos = cc.v2(i, j);
          this.initStoneData(pos, data[i][j]);
        }
      },
      reclaimNode: function reclaimNode() {
        var children = this.node.children;
        for (var i = children.length - 1; i >= 0; i--) {
          var item = children[i];
          "block" == item.name ? this.stonePool.put(item) : item.removeFromParent();
        }
      },
      removeSameColorCubeByClick: function removeSameColorCubeByClick(event) {
        this.canclePlayerNotice();
        var removeList = event.detail;
        var newList = JSON.parse(JSON.stringify(removeList));
        this.hinderResponseCubesBreak(newList, this);
        var vector;
        if (removeList.length >= 5) this.cubesToGameTool(newList); else {
          while (removeList.length > 0) {
            vector = removeList.pop();
            this.normalCubeBreakAnimation(vector);
            this.removeBlock(vector);
          }
          this.scheduleOnce(function() {
            cc.systemEvent.emit("STEP_COUNT");
            if (cc.director.isrunning) return;
            this.whichTimeTampRow("\u79fb\u9664\u64cd\u4f5c");
          }, .5);
        }
      },
      normalCubeBreakAnimation: function normalCubeBreakAnimation(vector) {
        var pos = Utils.grid2Pos(vector.x, vector.y);
        var breakCube;
        breakCube = this.CubeBreakPool.size() > 0 ? this.CubeBreakPool.get() : cc.instantiate(this.normalCubeBreak);
        breakCube.parent = this.node;
        breakCube.position = pos;
        var type = GameData.starMatrix[vector.x][vector.y];
        var partical = breakCube.getComponent(cc.ParticleSystem);
        partical.spriteFrame = this.cubeBreakList[type];
        partical.resetSystem();
        this.scheduleOnce(function() {
          this.CubeBreakPool.put(breakCube);
        }, partical.life);
      },
      becomeGameTool: function becomeGameTool(pos, len, type) {
        var stone;
        stone = this.stonePool.size() > 0 ? this.stonePool.get() : cc.instantiate(this.stone);
        var index = Utils.indexValue(pos.x, pos.y);
        if (null != GameData.starSprite[index]) {
          var one = GameData.starSprite[index];
          this.stonePool.put(one);
        }
        GameData.starSprite[index] = stone;
        stone.parent = this.node;
        stone.position = Utils.grid2Pos(pos.x, pos.y);
        cc.director.SoundManager.playSound("combine");
        this.toolAndSuperToolEffect(pos);
        var script = stone.getComponent("block");
        if (len >= 5 && len < 7) {
          GameData.starMatrix[pos.x][pos.y] = 8;
          script.initStoneView(pos.x, pos.y, 8, type);
        } else if (len >= 7 && len < 9) {
          GameData.starMatrix[pos.x][pos.y] = 9;
          script.initStoneView(pos.x, pos.y, 9, type);
        } else if (len >= 9) {
          GameData.starMatrix[pos.x][pos.y] = 10;
          script.initStoneView(pos.x, pos.y, 10, type);
        }
        cc.systemEvent.emit("STEP_COUNT");
        if (cc.director.isrunning) return;
        this.whichTimeTampRow("changeStonetexture");
      },
      cubesToGameTool: function cubesToGameTool(combineList) {
        var len = combineList.length;
        var click = combineList[0];
        var type = GameData.getDataBygrid(click);
        var vector;
        cc.director.SoundManager.playSound("combine1");
        var combine_callfun = function combine_callfun(pos, len, type, self) {
          self.becomeGameTool(pos, len, type);
          var operateLevel = Utils.judgeOperateLevel(len);
          cc.systemEvent.emit("OPERATION_EVALUATE", {
            level: operateLevel
          });
        };
        while (combineList.length > 0) {
          vector = combineList.pop();
          0 == combineList.length ? this.nodeMove(vector, click, len, type, combine_callfun) : this.nodeMove(vector, click);
        }
      },
      balloonBoomEffect: function balloonBoomEffect(pos) {
        var exam = cc.instantiate(this.balloonBoom);
        var position = Utils.grid2Pos(pos.x, pos.y);
        exam.position = position;
        exam.parent = this.node;
        var anima = exam.getComponent(cc.Animation);
        anima.play("balloon");
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          exam.removeFromParent();
        }, time);
      },
      vineBreakEffect: function vineBreakEffect(pos) {
        var exam = cc.instantiate(this.vineBreak);
        var position = Utils.grid2Pos(pos.x, pos.y);
        exam.position = position;
        exam.parent = this.node;
        var anima = exam.getComponent(cc.Animation);
        cc.director.SoundManager.playSound("vineBreak");
        anima.play("vineBreak");
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          exam.removeFromParent();
        }, time);
      },
      woodBoxBreakEffect: function woodBoxBreakEffect(pos, type) {
        var iron;
        iron = 2 == type ? cc.instantiate(this.ironLineBreak_right) : cc.instantiate(this.ironLineBreak_left);
        var position = Utils.grid2Pos(pos.x, pos.y);
        iron.position = position;
        iron.parent = this.node;
        var anima = iron.getComponent(cc.Animation);
        if (2 == type) {
          anima.play("iron_right");
          cc.director.SoundManager.playSound("ironLine1");
        } else {
          anima.play("iron_left");
          cc.director.SoundManager.playSound("ironLine1");
        }
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          iron.removeFromParent();
        }, time);
      },
      woodCubeBreakEffect: function woodCubeBreakEffect(pos) {
        var woodCube = cc.instantiate(this.woodCubeBreak);
        var position = Utils.grid2Pos(pos.x, pos.y);
        woodCube.position = position;
        woodCube.parent = this.node;
        var anima = woodCube.getComponent(cc.Animation);
        anima.play("woodCubeBreak");
        cc.director.SoundManager.playSound("box_bomb");
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          woodCube.removeFromParent();
        }, time);
      },
      flowerOpenEffect: function flowerOpenEffect(pos) {
        cc.director.SoundManager.playSound("flower_hit");
      },
      flowerCollectAnimation: function flowerCollectAnimation(pos) {
        if (this.flowerTempList) {
          if (Utils.indexOfV2(this.flowerTempList, pos)) return;
          this.flowerTempList.push(pos);
        } else {
          this.flowerTempList = [];
          this.flowerTempList.push(pos);
        }
        var node = this.getNodeBygGrid(pos).node;
        cc.director.SoundManager.playSound("flowerFinished");
        var worldPos = this.node.convertToWorldSpaceAR(node.position);
        cc.systemEvent.emit("HINDER_FLOWER_ANIMATION", {
          flower: node,
          worldPos: worldPos
        });
      },
      windmillBreakEffect: function windmillBreakEffect(pos, hitNumber) {
        var sum = 3;
        var prefab;
        prefab = 2 == hitNumber ? cc.instantiate(this.netBreak1) : cc.instantiate(this.netBreak2);
        var position = Utils.grid2Pos(pos.x, pos.y);
        prefab.parent = this.node;
        prefab.position = position;
        prefab.zIndex = 2;
        var anima = prefab.getComponent(cc.Animation);
        cc.director.SoundManager.playSound("netBreak");
        anima.play("netBreak" + (sum - hitNumber));
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          prefab.removeFromParent();
        }, time);
      },
      windmillDisappearEffect: function windmillDisappearEffect(pos) {
        var _this = this;
        if (this.tempPos) {
          if (Utils.indexOfV2(this.tempPos, pos)) {
            console.log(pos, this.tempPos, "354");
            return;
          }
          this.tempPos.push(pos);
        } else {
          this.tempPos = [];
          this.tempPos.push(pos);
        }
        var disapperList = Utils.getWindmillEffectAreaList(GameData.starMatrix, pos);
        var self = this;
        if (disapperList.length <= 0) return;
        cc.director.needWait = 1;
        cc.game.windmillCount++;
        cc.director.SoundManager.playSound("windmill");
        var _loop = function _loop(i) {
          _this.scheduleOnce(function() {
            var item = disapperList[i];
            var index = Utils.indexValue(item.x, item.y);
            var stone = GameData.starSprite[index];
            if (!!stone) if (GameData.starMatrix[item.x][item.y] >= 8 && 27 != GameData.starMatrix[item.x][item.y]) stone.runAction(cc.sequence(cc.spawn(cc.sequence(cc.rotateBy(.05, 20), cc.rotateBy(.05, -20)).repeat(2), cc.scaleTo(.2, 1.2)), cc.scaleTo(.2, 1), cc.callFunc(function() {
              stone.rotation = 0;
            }))); else if (27 == GameData.starMatrix[item.x][item.y]) {
              var script = stone.getComponent("block");
              script.bombRatio > 1 ? stone.runAction(cc.sequence(cc.spawn(cc.sequence(cc.rotateBy(.05, 20), cc.rotateBy(.05, -20)).repeat(2), cc.scaleTo(.2, 1.2)), cc.scaleTo(.2, 1), cc.callFunc(function() {
                stone.rotation = 0;
              }))) : stone.runAction(cc.spawn(cc.rotateBy(1, 1800), cc.scaleTo(1, 2)));
            } else stone.runAction(cc.spawn(cc.rotateBy(1, 1080), cc.scaleTo(1, .1)));
            i == disapperList.length - 1 && this.scheduleOnce(function() {
              var canFall = true;
              var particle = cc.instantiate(this.windmill_particle);
              particle.parent = this.node;
              particle.zIndex = 3;
              particle.position = Utils.grid2Pos(pos.x, pos.y);
              particle.getComponent(cc.ParticleSystem).resetSystem();
              cc.director.SoundManager.playSound("grassHit");
              var breakwindmill = disapperList.shift();
              self.removeBlock(breakwindmill);
              var len = disapperList.length;
              for (var _i = 0; _i < len; _i++) {
                var _item = disapperList[_i];
                if (GameData.starMatrix[_item.x][_item.y] > 7) if (27 == GameData.starMatrix[_item.x][_item.y]) {
                  var _script = self.getNodeBygGrid(_item);
                  if (_script.bombRatio > 1) self.handleGameToolArray(_item); else {
                    canFall = false;
                    self.windmillDisappearEffect(_item);
                  }
                } else 39 != GameData.starMatrix[_item.x][_item.y] && self.handleGameToolArray(_item); else self.removeBlock(_item);
                _i == len - 1 && cc.game.windmillCount--;
              }
              if (canFall) {
                0 == len && cc.game.windmillCount > 0 && cc.game.windmillCount--;
                cc.director.needWait && 0 == cc.game.windmillCount ? cc.director.needWait = 0 : self.whichTimeTampRow("windmill");
              }
            }, .5);
          }, .05 * i);
        };
        for (var i = 0; i < disapperList.length; i++) _loop(i);
      },
      colorCubeBreakEffect: function colorCubeBreakEffect(pos) {
        var colorCube = cc.instantiate(this.colorCubeBreak);
        var position = Utils.grid2Pos(pos.x, pos.y);
        colorCube.position = position;
        colorCube.parent = this.node;
        var anima = colorCube.getComponent(cc.Animation);
        var script = this.getNodeBygGrid(pos);
        var name = "colorCube_" + script.nextType;
        anima.play(name);
        cc.director.SoundManager.playSound("box_bomb");
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          colorCube.removeFromParent();
        }, time);
      },
      ladyBugCubesBreakEffect: function ladyBugCubesBreakEffect(pos, number) {
        if (this.tempLadyBugList) {
          if (Utils.indexOfV2(this.tempLadyBugList, pos)) return;
          this.tempLadyBugList.push(pos);
        } else {
          this.tempLadyBugList = [];
          this.tempLadyBugList.push(pos);
        }
        var bubble = cc.instantiate(this.ladyBugBubbleBreak);
        var position = Utils.grid2Pos(pos.x, pos.y);
        bubble.position = position;
        bubble.parent = this.node;
        number = number > 0 ? 3 - number : 3;
        var anima = bubble.getComponent(cc.Animation);
        cc.director.SoundManager.playSound("glassBallBreak");
        var name = "glassBallHit" + number;
        anima.play(name);
        var time = anima.getClips()[number - 1].duration;
        var script = this.getNodeBygGrid(pos);
        if (3 == number && !!script) {
          script.view.active = false;
          cc.director.needWait = 1;
          cc.director.isSuperTool = 1;
        }
        this.scheduleOnce(function() {
          bubble.removeFromParent();
          if (3 == number) {
            this.ladyBugCubeBreak(pos);
            this.removeBlock(pos);
            script.boxCubesDisappear();
          }
        }, time);
      },
      rockStoneCubeBreakEffect: function rockStoneCubeBreakEffect(pos) {
        var rock = cc.instantiate(this.rockStoneBreak);
        var position = Utils.grid2Pos(pos.x, pos.y);
        rock.position = position;
        rock.parent = this.node;
        var anima = rock.getComponent(cc.Animation);
        cc.director.SoundManager.playSound("cubeRockBreak");
        anima.play("cubeRockBreak");
        var time = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          rock.removeFromParent();
        }, time);
      },
      hinderResponseCubesBreak: function hinderResponseCubesBreak(list, self) {
        this.handleBalloonBomb(list, self);
        this.handleVineBreak(list, self);
        this.handleWoodBreak(list, self);
        this.handleFlowerBreak(list, self);
        this.handleWindmillBreak(list, self);
        this.handleColorCubesBreak(list, self);
        this.handleLadyBugCubesBreak(list, self);
      },
      handleGameTool: function handleGameTool(event) {
        this.canclePlayerNotice();
        var msg = event.detail;
        var toolList = Utils.needCombineTool(GameData.starMatrix, msg.grid);
        if (toolList.length >= 2 && !msg.from) {
          var str = this.whichSuperTool(GameData.starMatrix, toolList);
          this.triggerGameTool(str, msg.grid, toolList);
        } else {
          if (msg.index == Config.rType) {
            var type = msg.type;
            if (0 == type) {
              this.removeBlock(msg.grid);
              this.col_rocket(msg.grid);
            } else {
              this.removeBlock(msg.grid);
              this.row_rocket(msg.grid);
            }
            cc.systemEvent.emit("OPERATION_EVALUATE", {
              level: 3
            });
            if (cc.director.isrunning) return;
            this.whichTimeTampRow("\u6e38\u620f\u9053\u5177");
          }
          if (msg.index == Config.bType) {
            this.boomEffect(msg.grid);
            var list = Utils.rainbowStarRemoveList(GameData.starMatrix, msg.grid);
            msg.from && 1 == msg.from ? this.removeBombBlockOnly(list) : this.removeNineBlock(list);
            cc.director.SoundManager.playSound("boom1");
            cc.systemEvent.emit("OPERATION_EVALUATE", {
              level: 3
            });
          }
          if (msg.index == Config.dType) {
            var _list = Utils.getSameBlockList(GameData.starMatrix, msg.grid, msg.type);
            this.discoRotation(msg.grid);
            var oldlist = JSON.parse(JSON.stringify(_list));
            this.effectRemoveSame(msg.grid, _list, oldlist, this.removeSameColorBlock);
            cc.systemEvent.emit("GAMEMASK_CONTROL", {
              order: 1
            });
          }
        }
      },
      boomEffect: function boomEffect(grid) {
        var boom_eff = cc.instantiate(this.boom_effect);
        var pos = Utils.grid2Pos(grid.x, grid.y);
        boom_eff.position = pos;
        boom_eff.parent = this.node;
        boom_eff.getComponent(cc.ParticleSystem).resetSystem();
      },
      superDiscoAnima: function superDiscoAnima(grid) {
        var boom_eff = cc.instantiate(this.superDisco);
        var pos = Utils.grid2Pos(grid.x, grid.y);
        boom_eff.position = pos;
        boom_eff.parent = this.node;
        boom_eff.getComponent(cc.ParticleSystem).resetSystem();
      },
      removeNineBlock: function removeNineBlock(list) {
        var e = list.shift();
        this.effectRemoveCol(e);
        this.removeBlock(e);
        if (list.length <= 0) this.scheduleOnce(function() {
          if (cc.director.isrunning) return;
          this.whichTimeTampRow("removeNineBlock1");
        }, .5); else for (var i = 0; i < list.length; i++) {
          this.handleGameToolArray(list[i]);
          i == list.length - 1 && this.scheduleOnce(function() {
            if (cc.director.isrunning) return;
            this.whichTimeTampRow("removeNineBlock2");
          }, .5);
        }
      },
      removeBombBlockOnly: function removeBombBlockOnly(list) {
        var e = list.shift();
        this.effectRemoveCol(e);
        this.removeBlock(e);
        this.boomEffect(e);
        if (list.length <= 0) return;
        for (var i = 0; i < list.length; i++) this.handleGameToolArray(list[i]);
      },
      discoRotation: function discoRotation(pos, type) {
        var rotaEffect;
        rotaEffect = cc.instantiate(this.absorb);
        var script = this.getNodeBygGrid(pos);
        script.discoEffect(rotaEffect, type);
      },
      blackHoleEffect: function blackHoleEffect(pos, type, callback) {
        type || (type = 8);
        var box = new cc.Node();
        box.parent = this.node;
        var position = Utils.grid2Pos(pos.x, pos.y);
        box.position = position;
        var holeEffect = cc.instantiate(this.absorb);
        holeEffect.parent = box;
        var toolItem = cc.instantiate(this.toolItem);
        toolItem.parent = box;
        holeEffect.getComponent(cc.ParticleSystem).resetSystem();
        toolItem.getComponent("toolItem").changeItemTexture(type);
        toolItem.runAction(cc.rotateBy(1, 1080).repeatForever());
        this.scheduleOnce(function() {
          box.removeFromParent();
          !callback || callback(pos, 9);
        }, 1.5);
      },
      triggerGameTool: function triggerGameTool(strType, pos, list) {
        var nList = JSON.parse(JSON.stringify(list));
        cc.systemEvent.emit("GAMEMASK_CONTROL", {
          order: 1
        });
        cc.director.isSuperTool = 1;
        switch (strType) {
         case "superDisco":
          var callback = function callback(self, target) {
            self.blackHoleEffect(target, 9, self.superDiscoAnima.bind(self));
          };
          this.toolCombineAnimation(nList, callback);
          this.scheduleOnce(function() {
            cc.director.SoundManager.playSound("2");
            cc.director.SoundManager.playSound("3");
            this.superDiscoEffect();
            this.scheduleOnce(function() {
              cc.director.isSuperTool = 0;
            }, 1);
          }, 2.3);
          break;

         case "disco&boom":
          var callback1 = function callback1(self, pos, type) {
            self.discoBoomEffect(GameData.starMatrix, type, pos);
          };
          this.toolCombineAnimation(nList, callback1);
          break;

         case "disco&rocket":
          var callback2 = function callback2(self, pos, type) {
            self.discoRocketEffect(GameData.starMatrix, type, pos);
          };
          this.toolCombineAnimation(nList, callback2);
          break;

         case "superBoom":
          var callback3 = function callback3(self, target) {
            var bigBoom = cc.instantiate(self.toolItem);
            bigBoom.parent = self.node;
            bigBoom.scale = 1;
            bigBoom.position = Utils.grid2Pos(target.x, target.y);
            bigBoom.getComponent("toolItem").changeItemTexture(2);
            cc.director.SoundManager.playSound("superBomb");
            bigBoom.runAction(cc.sequence(cc.scaleTo(.3, 4), cc.sequence(cc.rotateBy(.05, 20), cc.rotateBy(.05, -20), cc.rotateBy(.01, 0)).repeat(3), cc.callFunc(function() {
              bigBoom.removeFromParent();
              self.boomEffect(target);
            })));
          };
          this.toolCombineAnimation(nList, callback3);
          this.scheduleOnce(function() {
            this.superBoomEffect(pos);
            cc.director.SoundManager.playSound("boom1");
            this.scheduleOnce(function() {
              cc.director.isSuperTool = 0;
            }, 1);
          }, 1.3);
          break;

         case "3row&col":
          var callback4 = function callback4(self, pos) {
            self.blackHoleEffect(pos);
          };
          this.toolCombineAnimation(nList, callback4);
          cc.director.SoundManager.playSound("rocket_bomb");
          this.scheduleOnce(function() {
            this.boomAndRocketEffect(pos);
            this.scheduleOnce(function() {
              cc.director.isSuperTool = 0;
            }, 1);
          }, 2);
          break;

         case "row&col":
          var callback5 = function callback5(self, pos, type) {
            self.blackHoleEffect(pos, 10);
          };
          this.toolCombineAnimation(nList, callback5);
          this.scheduleOnce(function() {
            this.superRocketEffect(pos);
            this.scheduleOnce(function() {
              cc.director.isSuperTool = 0;
            }, 1);
          }, 2);
        }
      },
      toolCombineAnimation: function toolCombineAnimation(list, callback) {
        var self = this;
        var target = list.shift();
        var type;
        var tScript = self.getNodeBygGrid(target);
        10 == tScript._stoneType && (type = tScript.discoType);
        cc.director.SoundManager.playSound("rotation_combine");
        var _loop2 = function _loop2() {
          var startPos = list.pop();
          var script = self.getNodeBygGrid(startPos);
          10 == script._stoneType && (type = script.discoType);
          var index = Utils.indexValue(startPos.x, startPos.y);
          var stone = GameData.starSprite[index];
          var targetPos = Utils.grid2Pos(target.x, target.y);
          stone.runAction(cc.sequence(cc.scaleTo(.2, 1.1), cc.spawn(cc.scaleTo(.2, .9), cc.moveTo(.2, targetPos).easing(cc.easeBounceOut())), cc.spawn(cc.scaleTo(.2, .5), cc.fadeOut(.1)), cc.callFunc(function() {
            self.removeBlock(startPos);
            self.toolAndSuperToolEffect(target);
            0 == list.length && callback(self, target, type);
          })));
        };
        while (list.length > 0) _loop2();
      },
      getSuperDiscoList: function getSuperDiscoList(data) {
        var list = [];
        for (var i = 0; i < data.length; i++) for (var j = 0; j < data[i].length; j++) if (20 != data[i][j]) {
          var item = cc.v2(i, j);
          list.push(item);
        }
        return list;
      },
      superBoomEffect: function superBoomEffect(pos) {
        var bigBoomList = Utils.getThreeBlockArea(GameData.starMatrix, pos);
        this.removeNineBlock(bigBoomList);
        if (!this.target.isPass) {
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
          cc.systemEvent.emit("OPERATION_EVALUATE", {
            level: 3
          });
        }
      },
      superRocketEffect: function superRocketEffect(pos) {
        this.removeBlock(pos);
        this.row_rocket(pos);
        this.col_rocket(pos);
        if (cc.director.isrunning) return;
        this.whichTimeTampRow("row&col");
        if (!this.target.isPass) {
          cc.systemEvent.emit("OPERATION_EVALUATE", {
            level: 3
          });
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
        }
      },
      boomAndRocketEffect: function boomAndRocketEffect(pos) {
        this.row_rocket(pos);
        this.col_rocket(pos);
        pos.x + 1 < Config.matrixRow && this.row_rocket(cc.v2(pos.x + 1, pos.y));
        pos.x - 1 >= 0 && this.row_rocket(cc.v2(pos.x - 1, pos.y));
        pos.y - 1 >= 0 && this.col_rocket(cc.v2(pos.x, pos.y - 1));
        pos.y + 1 < Config.matrixCol && this.col_rocket(cc.v2(pos.x, pos.y + 1));
        if (cc.director.isrunning) return;
        if (!this.target.isPass) {
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
          cc.systemEvent.emit("OPERATION_EVALUATE", {
            level: 3
          });
        }
        this.whichTimeTampRow("row&col");
      },
      discoBoomEffect: function discoBoomEffect(list, type, pos) {
        var list1 = Utils.getSameBlockList(list, pos, type);
        cc.director.SoundManager.playSound("rotation_combine");
        this.discoRotation(pos, 2);
        this.changeToBoom(pos, list1, 1);
      },
      discoRocketEffect: function discoRocketEffect(list, type, pos) {
        var list1 = Utils.getSameBlockList(list, pos, type);
        this.discoRotation(pos, 1);
        cc.director.SoundManager.playSound("rotation_combine");
        this.changeToBoom(pos, list1, 2);
      },
      changeToBoom: function changeToBoom(gridPos, list, type, oldList) {
        var self = this;
        var fire;
        if (list.length <= 0) {
          this.executeListEffect(oldList, type);
          this.scheduleOnce(function() {
            cc.director.isSuperTool = 0;
          }, 1);
          return;
        }
        oldList || (oldList = [ gridPos ]);
        var target = list.pop();
        oldList.push(target);
        var pos = Utils.grid2Pos(gridPos.x, gridPos.y);
        var targetPos = Utils.grid2Pos(target.x, target.y);
        fire = this.firePool.size() > 0 ? this.firePool.get() : cc.instantiate(this.fire);
        fire.parent = this.node;
        fire.position = pos;
        var wpStart = this.node.convertToWorldSpaceAR(pos);
        var wpTarget = this.node.convertToWorldSpaceAR(targetPos);
        fire.getComponent("arrow").computedLineDistanceAndRotation(wpStart, wpTarget);
        cc.director.SoundManager.playSound("flyStart");
        fire.runAction(cc.sequence(cc.moveTo(.3, targetPos), cc.callFunc(function() {
          self.firePool.put(fire);
          self.blockToBoom(target, type);
          cc.director.SoundManager.playSound("flyEnd");
          self.changeToBoom(gridPos, list, type, oldList);
        })));
      },
      executeListEffect: function executeListEffect(list, type) {
        if (0 == list.length) {
          if (cc.director.isrunning) return;
          if (!this.target.isPass) {
            cc.systemEvent.emit("GAMEMASK_CONTROL", {
              order: 2
            });
            cc.systemEvent.emit("OPERATION_EVALUATE", {
              level: 3
            });
          }
          cc.director.needWait = true;
          this.whichTimeTampRow("\u76f8\u540c\u9053\u5177\u5217\u8868");
          this.scheduleOnce(function() {
            cc.director.needWait = false;
          }, .5);
          return;
        }
        var item = list.shift();
        var script = this.getNodeBygGrid(item);
        if (1 == type) {
          if (!!script && script._stoneType == Config.bType) {
            var itemList = Utils.rainbowStarRemoveList(GameData.starMatrix, item);
            cc.director.SoundManager.playSound("boom1");
            this.removeBombBlockOnly(itemList);
          }
        } else !script || script._stoneType != Config.rType || (1 == script.rocketType ? this.col_rocket(item) : this.row_rocket(item));
        this.executeListEffect(list, type);
      },
      listEffect: function listEffect(list) {
        if (list.length <= 0) return;
        var item = list.pop();
        if (!!item) {
          var script = this.getNodeBygGrid(item);
          script._stoneType == rType && 0 == script.rocketType;
          script._stoneType == bType;
        }
      },
      superDiscoEffect: function superDiscoEffect() {
        var superDiscoList = this.getSuperDiscoList(GameData.starMatrix);
        this.removeBlockOnly(superDiscoList);
        if (!this.target.isPass) {
          cc.systemEvent.emit("OPERATION_EVALUATE", {
            level: 3
          });
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
          console.log("helloworld");
        }
      },
      whichSuperTool: function whichSuperTool(data, list) {
        var rocket = 0, boom = 0, disco = 0;
        for (var i = 0; i < list.length; i++) {
          var item = list[i];
          data[item.x][item.y] == Config.rType && rocket++;
          data[item.x][item.y] == Config.bType && boom++;
          data[item.x][item.y] == Config.dType && disco++;
        }
        if (disco >= 2) return "superDisco";
        if (1 == disco) {
          if (boom > 0) return "disco&boom";
          if (rocket > 0) return "disco&rocket";
        }
        if (0 == disco) {
          if (boom >= 2) return "superBoom";
          if (1 == boom && rocket > 0) return "3row&col";
          if (0 == boom && rocket >= 2) return "row&col";
        }
      },
      judgeDiscoType: function judgeDiscoType(list) {
        var type = -1;
        for (var i = 0; i < list.length; i++) {
          var item = list[i];
          if (GameData.starMatrix[item.x][item.y] == Config.dType) {
            var index = Utils.indexValue(item.x, item.y);
            var stone = GameData.starSprite[index];
            var script = stone.getComponent("block");
            type = script.discoType;
            break;
          }
        }
        if (type >= 0) return type;
      },
      handlePlayerTool: function handlePlayerTool(event) {
        this.canclePlayerNotice();
        var msg = event;
        if (1 == msg.type) {
          this.scheduleOnce(function() {
            this.whichTimeTampRow();
          }, .2);
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: 1,
            statuCode: 2
          });
        }
        if (2 == msg.type) {
          this.scheduleOnce(function() {
            this.whichTimeTampRow();
          }, .2);
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: 2,
            statuCode: 2
          });
        }
        if (3 == msg.type) {
          var item = msg.grid;
          this.toolAndSuperToolEffect(item);
          if (GameData.starMatrix[item.x][item.y] >= 8 && GameData.starMatrix[item.x][item.y] <= 10) return;
          this.handleSingleGrid(msg.grid);
          this.scheduleOnce(function() {
            this.whichTimeTampRow();
          }, .2);
          cc.director.SoundManager.playSound("ham");
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: 3,
            statuCode: 2
          });
        }
        if (4 == msg.type) {
          this.shuffleStarMatrix();
          cc.director.isMoving = false;
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: 4,
            statuCode: 2
          });
        }
        cc.director.isPlayerUsedTool = true;
      },
      discoRemoveCuneEffect: function discoRemoveCuneEffect(toolGrid) {
        var pos = Utils.grid2Pos(toolGrid.x, toolGrid.y);
        var dust = cc.instantiate(this.dust);
        dust.parent = this.node;
        dust.position = pos;
        var particle = dust.getComponent(cc.ParticleSystem);
        particle.resetSystem();
      },
      effectRemoveCol: function effectRemoveCol(toolGrid) {
        var pos = Utils.grid2Pos(toolGrid.x, toolGrid.y);
        var del_col;
        del_col = this.colPool.size() > 0 ? this.colPool.get() : cc.instantiate(this.del_col);
        del_col.parent = this.node;
        del_col.position = pos;
        var particle = del_col.getComponent(cc.ParticleSystem);
        particle.resetSystem();
      },
      test: function test(event) {
        var toolGrid = event.detail;
        var pos = Utils.grid2Pos(toolGrid.x, toolGrid.y);
        var del_col;
        del_col = this.colPool.size() > 0 ? this.colPool.get() : cc.instantiate(this.del_col);
        del_col.parent = this.node;
        del_col.position = pos;
        var particle = del_col.getComponent(cc.ParticleSystem);
        particle.resetSystem();
      },
      effectRemoveSame: function effectRemoveSame(gridPos, list, oldList, callback, lineList) {
        var self = this;
        var line;
        if (list.length <= 0) {
          !callback || callback(oldList, self, lineList);
          return;
        }
        lineList || (lineList = []);
        var target = list.pop();
        var pos = Utils.grid2Pos(gridPos.x, gridPos.y);
        var targetPos = Utils.grid2Pos(target.x, target.y);
        var index = Utils.indexValue(target.x, target.y);
        if (GameData.starSprite[index]) {
          line = this.linePool.size() > 0 ? this.linePool.get() : cc.instantiate(this.line);
          line.parent = this.node;
          var script = line.getComponent("line");
          cc.director.SoundManager.playSound("disco");
          script.computedLineDistanceAndRotation(pos, targetPos);
          line.position = pos;
          lineList.push(line);
          line.scale = .05;
          line.runAction(cc.sequence(cc.scaleTo(.1, 1, 1), cc.callFunc(function() {
            self.blockEffect(target);
            self.effectRemoveSame(gridPos, list, oldList, callback, lineList);
          })));
        } else self.effectRemoveSame(gridPos, list, oldList, callback, lineList);
      },
      blockEffect: function blockEffect(pos) {
        var index = Utils.indexValue(pos.x, pos.y);
        var stone = GameData.starSprite[index];
        if (!!stone) {
          var script = stone.getComponent("block");
          script.blockChoosed();
        }
      },
      blockToBoom: function blockToBoom(pos, type) {
        var index = Utils.indexValue(pos.x, pos.y);
        var stone = GameData.starSprite[index];
        if (!stone) return;
        var blockType = GameData.getDataBygrid(pos);
        cc.systemEvent.emit("NUMBER_COUNT", {
          type: blockType
        });
        var script = stone.getComponent("block");
        if (1 == type) {
          script.changeStoneNum(Config.bType);
          GameData.starMatrix[pos.x][pos.y] = Config.bType;
        } else {
          script.changeStoneNum(Config.rType);
          GameData.starMatrix[pos.x][pos.y] = Config.rType;
        }
      },
      isSpecialTool: function isSpecialTool(list) {
        var b = false;
        for (var i = 0; i < list.length; i++) {
          var item = list[i];
          if (GameData.starMatrix[item.x][item.y] >= Config.rType && GameData.starMatrix[item.x][item.y] < 20) {
            b = true;
            break;
          }
        }
        return b;
      },
      handleBalloonBomb: function handleBalloonBomb(list, self) {
        var ballList = Utils.getBalloonClearList(GameData.starMatrix, list, 21);
        if (!!ballList && ballList.length > 0) while (ballList.length > 0) {
          var itemBall = ballList.pop();
          self.balloonBoomEffect(itemBall);
          self.removeBlock(itemBall);
          cc.director.SoundManager.playSound("balloonBreaken");
        }
      },
      handleVineBreak: function handleVineBreak(list, self) {
        var vineList = Utils.getBalloonClearList(GameData.starMatrix, list, 22);
        if (!!vineList && vineList.length > 0) while (vineList.length > 0) {
          var itemVine = vineList.pop();
          var script = this.getNodeBygGrid(itemVine);
          self.vineBreakEffect(itemVine);
          script.bombRatio--;
          script.cubesUnlock();
        }
      },
      handleWoodBreak: function handleWoodBreak(list, self) {
        var woodBoxList = Utils.getBalloonClearList(GameData.starMatrix, list, 23);
        if (!!woodBoxList && woodBoxList.length > 0) while (woodBoxList.length > 0) {
          var itemWoodBox = woodBoxList.pop();
          var script = this.getNodeBygGrid(itemWoodBox);
          if ("number" == typeof script.bombRatio) {
            script.bombRatio--;
            if (script.bombRatio <= 0) {
              self.removeBlock(itemWoodBox);
              script.boxCubesDisappear();
              self.woodCubeBreakEffect(itemWoodBox);
            } else {
              script.boxHit();
              2 == script.bombRatio ? this.woodBoxBreakEffect(itemWoodBox, 2) : this.woodBoxBreakEffect(itemWoodBox, 1);
            }
          }
        }
      },
      handleFlowerBreak: function handleFlowerBreak(list, self) {
        var flowerList = Utils.getBalloonClearList(GameData.starMatrix, list, 26);
        if (!!flowerList && flowerList.length > 0) while (flowerList.length > 0) {
          var itemFlower = flowerList.pop();
          var script = this.getNodeBygGrid(itemFlower);
          if ("number" == typeof script.bombRatio) {
            script.bombRatio--;
            if (script.bombRatio < 0) {
              self.flowerCollectAnimation(itemFlower);
              script.collectFlower();
            } else {
              script.flowerHit();
              self.flowerOpenEffect(itemFlower);
            }
          }
        }
      },
      handleWindmillBreak: function handleWindmillBreak(list, self) {
        var windmillList = Utils.getBalloonClearList(GameData.starMatrix, list, 27);
        if (!!windmillList && windmillList.length > 0) while (windmillList.length > 0) {
          var windmill = windmillList.pop();
          var script = this.getNodeBygGrid(windmill);
          if ("number" == typeof script.bombRatio) {
            script.bombRatio--;
            if (script.bombRatio <= 0) self.windmillDisappearEffect(windmill); else {
              script.hitWindmill();
              self.windmillBreakEffect(windmill, script.bombRatio);
            }
          }
        }
      },
      handleColorCubesBreak: function handleColorCubesBreak(list, self) {
        var colorCubeList = Utils.getBalloonClearList(GameData.starMatrix, list, 29);
        var type = GameData.starMatrix[list[0].x][list[0].y];
        if (!!colorCubeList && colorCubeList.length > 0) while (colorCubeList.length > 0) {
          var item = colorCubeList.pop();
          var script = this.getNodeBygGrid(item);
          if (script.nextType == type && "number" == typeof script.bombRatio) {
            script.bombRatio--;
            if (script.bombRatio <= 0) {
              self.colorCubeBreakEffect(item);
              self.removeBlock(item);
              script.boxCubesDisappear();
            }
          }
        }
      },
      handleColorBalloonBreak: function handleColorBalloonBreak(list, self) {
        var colorCubeList = Utils.getBalloonClearList(GameData.starMatrix, list, 40);
      },
      handleLadyBugCubesBreak: function handleLadyBugCubesBreak(list, self) {
        var ladyBugCubesList = Utils.getBalloonClearList(GameData.starMatrix, list, 37);
        if (!!ladyBugCubesList && ladyBugCubesList.length > 0) while (ladyBugCubesList.length > 0) {
          var item = ladyBugCubesList.pop();
          var script = this.getNodeBygGrid(item);
          if ("number" == typeof script.bombRatio) {
            script.bombRatio--;
            if (script.bombRatio <= 0) self.ladyBugCubesBreakEffect(item, script.bombRatio); else {
              self.ladyBugCubesBreakEffect(item, script.bombRatio);
              script.hitLadyBugCubes();
            }
          }
        }
      },
      ladyBugCubeBreak: function ladyBugCubeBreak(grid) {
        var randomLength = 4 + Math.floor(4 * Math.random());
        cc.systemEvent.emit("GAMEMASK_CONTROL", {
          order: 1
        });
        cc.director.SoundManager.playSound("ladyBugFly");
        var randomList = Utils.randomGetGrid(randomLength, GameData.starMatrix);
        if (!!randomList && randomList.length > 0) for (var i = 0; i < randomList.length; i++) {
          var endGrid = randomList[i];
          i == randomList.length - 1 ? this.ladyBugMoveLine(grid, endGrid, true) : this.ladyBugMoveLine(grid, endGrid);
        } else {
          cc.director.needWait = 0;
          cc.director.isSuperTool = 0;
          this.target.isGameEnd || cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
        }
      },
      ladyBugMoveLine: function ladyBugMoveLine(start, end, isLast) {
        var self = this;
        var startPos, endPos;
        startPos = Utils.grid2Pos(start.x, start.y);
        endPos = Utils.grid2Pos(end.x, end.y);
        var ladyBug = cc.instantiate(this.ladyBugMove);
        var animaCtrl = ladyBug.getComponent(cc.Animation);
        animaCtrl.play("ladyBug");
        ladyBug.parent = this.node;
        ladyBug.position = startPos;
        ladyBug.zIndex = 10;
        var bezier = [ cc.v2(startPos.x, 3 * (startPos.y + endPos.y) / 4), cc.v2(endPos.x, 1 * (startPos.y + endPos.y) / 4), endPos ];
        var action = cc.sequence(cc.bezierTo(1, bezier), cc.spawn(cc.delayTime(.3), cc.callFunc(function() {
          self.cubeShakeAction(end);
        })), cc.fadeOut(.2), cc.callFunc(function() {
          ladyBug.removeFromParent();
          self.ladyBugArriveCubeEffect(endPos);
          self.changeCubesAccordingAround(end);
          if (!!isLast) {
            self.target.isGameEnd || cc.systemEvent.emit("GAMEMASK_CONTROL", {
              order: 2
            });
            cc.director.needWait = 0;
            cc.director.isSuperTool = 0;
            cc.director.SoundManager.playSound("ladyBugChangeColor");
            self.showTipsView();
          }
        }));
        ladyBug.runAction(action);
      },
      ladyBugArriveCubeEffect: function ladyBugArriveCubeEffect(pos) {
        var arrive = cc.instantiate(this.ladyBugArrive);
        arrive.parent = this.node;
        arrive.position = pos;
        arrive.getComponent(cc.ParticleSystem).resetSystem();
      },
      changeCubesAccordingAround: function changeCubesAccordingAround(grid) {
        var cloneGrid = this.judgeCubes(grid);
        var cloneScript = this.getNodeBygGrid(cloneGrid);
        if (!!cloneScript) {
          var script = this.getNodeBygGrid(grid);
          if (!script) return;
          var type = GameData.starMatrix[cloneGrid.x][cloneGrid.y];
          GameData.starMatrix[grid.x][grid.y] = type;
          var cube = script.node;
          var action = cc.sequence(cc.scaleTo(.2, .8), cc.scaleTo(.4, 1.2), cc.scaleTo(.2, 1));
          cube.runAction(action);
          script.initStoneView(grid.x, grid.y, type);
        }
      },
      cubeShakeAction: function cubeShakeAction(grid) {
        var script = this.getNodeBygGrid(grid);
        if (!script) return;
        var cube = script.node;
        var action = cc.sequence(cc.scaleTo(.02, .8), cc.scaleTo(.04, 1.2), cc.scaleTo(.02, 1)).repeat(3);
        cube.runAction(action);
      },
      judgeCubes: function judgeCubes(grid) {
        var aroundList = Utils.getItemAdjacentPos(grid);
        var isSuit = false;
        var tempGrid;
        for (var i = 0; i < aroundList.length; i++) {
          var item = aroundList[i];
          if (GameData.starMatrix[item.x][item.y] >= 0 && GameData.starMatrix[item.x][item.y] < 8) {
            isSuit = true;
            tempGrid = item;
            break;
          }
        }
        return !!isSuit && tempGrid;
      },
      removeSameColorBlock: function removeSameColorBlock(list, self, lineList) {
        if (!list) {
          console.log("error", list);
          return;
        }
        self.hinderResponseCubesBreak(list, self);
        for (var i = 0; i < list.length; i++) {
          var index = Utils.indexValue(list[i].x, list[i].y);
          var sItem = GameData.starSprite[index];
          if (!!sItem) {
            sItem.stopActionByTag(1);
            self.discoRemoveCuneEffect(list[i]);
            self.removeBlock(list[i]);
            cc.director.SoundManager.playSound("afterDisco");
          }
        }
        for (var _i2 = lineList.length - 1; _i2 >= 0; _i2--) self.linePool.put(lineList[_i2]);
        if (!self.target.isPass) {
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
          cc.systemEvent.emit("OPERATION_EVALUATE", {
            level: 3
          });
        }
        if (cc.director.isrunning) return;
        self.whichTimeTampRow("removeSamecolorblock");
      },
      updateStoneTexture: function updateStoneTexture(pos, len, type) {
        var stone;
        stone = this.stonePool.size() > 0 ? this.stonePool.get() : cc.instantiate(this.stone);
        var index = Utils.indexValue(pos.x, pos.y);
        if (null != GameData.starSprite[index]) {
          var one = GameData.starSprite[index];
          this.stonePool.put(one);
        }
        GameData.starSprite[index] = stone;
        stone.parent = this.node;
        stone.position = Utils.grid2Pos(pos.x, pos.y);
        GameData.updateSingleData(pos, len + type);
        if (len + type - 1 >= 8) {
          cc.director.SoundManager.playSound("combine");
          this.toolAndSuperToolEffect(pos);
        }
        var script = stone.getComponent("block");
        var newType = GameData.getDataBygrid(pos);
        script.initStoneView(pos.x, pos.y, newType, type);
        cc.systemEvent.emit("STEP_COUNT");
        if (cc.director.isrunning) return;
        this.whichTimeTampRow("changeStonetexture");
      },
      toolAndSuperToolEffect: function toolAndSuperToolEffect(grid) {
        var pos = Utils.grid2Pos(grid.x, grid.y);
        var toolCombineEffct = cc.instantiate(this.toolCombineEffect);
        toolCombineEffct.position = pos;
        toolCombineEffct.parent = this.node;
      },
      nodeMove: function nodeMove(movePos, targetPos, len, type, callFunc) {
        var self = this;
        var index = Utils.indexValue(movePos.x, movePos.y);
        var stone = GameData.starSprite[index];
        var targetPos1 = Utils.grid2Pos(targetPos.x, targetPos.y);
        stone.getComponent("block").outLine.active = true;
        stone.zIndex = 1;
        var blockType = GameData.getDataBygrid(movePos);
        GameData.starSprite[index] = null;
        GameData.cleanStarData([ movePos ]);
        cc.systemEvent.emit("REMOVE_SINGLE_GRASS", {
          pos: movePos
        });
        blockType >= 0 && blockType < 8 && cc.systemEvent.emit("REMOVE_SINGLE_BUBBLE", {
          pos: movePos
        });
        stone.runAction(cc.sequence(cc.scaleTo(.2, 1.5), cc.spawn(cc.rotateBy(.2, 360 * Math.random()), cc.scaleTo(.2, .5), cc.moveTo(.2, targetPos1)), cc.spawn(cc.scaleTo(.2, .5), cc.fadeOut(.1)), cc.callFunc(function() {
          self.removeBlock2(stone, blockType);
          !!len && !!callFunc && type >= 0 && callFunc(targetPos, len, type, self);
        })));
      },
      removeBlock2: function removeBlock2(stone, blockType) {
        if (!stone) return;
        cc.systemEvent.emit("NUMBER_COUNT", {
          type: blockType
        });
        if (blockType < 20) {
          var score = 250;
          this.progressBar.judgeStepScore(score);
        } else this.progressBar.judgeStepScore(0);
        stone.removeFromParent();
        this.stonePool.put(stone);
      },
      removeBlock: function removeBlock(grid, status) {
        var index = Utils.indexValue(grid.x, grid.y);
        var stone = GameData.starSprite[index];
        if (!stone) return;
        var blockType = GameData.getDataBygrid(grid);
        if (!status) {
          cc.systemEvent.emit("NUMBER_COUNT", {
            type: blockType
          });
          if (blockType < 20) {
            var score = 250;
            this.progressBar.judgeStepScore(score);
          } else this.progressBar.judgeStepScore(0);
        }
        GameData.starSprite[index] = null;
        this.stonePool.put(stone);
        GameData.cleanStarData([ grid ]);
        cc.systemEvent.emit("REMOVE_SINGLE_GRASS", {
          pos: grid
        });
        blockType >= 0 && blockType < 8 && cc.systemEvent.emit("REMOVE_SINGLE_BUBBLE", {
          pos: grid
        });
      },
      judgeSpecialBlock: function judgeSpecialBlock(list) {
        var len = list.length;
        for (var i = 0; i < list.length; i++) {
          var type = GameData.getDataBygrid(list[i]);
          if (type >= 8) {
            var script = this.getNodeBygGrid(list[i]);
            if (script._stoneType == Config.rType) if (0 == script.rocketType) {
              var itemList = Utils.getColData(GameData.starMatrix, list[i]);
              for (var j = 0; j < itemList.length; j++) Utils.indexOfV2(list, itemList[j]) || list.push(itemList[j]);
            } else {
              var _itemList = Utils.getRowData(GameData.starMatrix, list[i]);
              for (var _j = 0; _j < _itemList.length; _j++) Utils.indexOfV2(list, _itemList[_j]) || list.push(_itemList[_j]);
            } else {
              if (script._stoneType == Config.bType) {
                var _itemList2 = Utils.rainbowStarRemoveList(GameData.starMatrix, list[i]);
                for (var _j2 = 0; _j2 < _itemList2.length; _j2++) Utils.indexOfV2(list, _itemList2[_j2]) || list.push(_itemList2[_j2]);
              }
              if (script._stoneType == Config.dType) {
                var _type = script.discoType;
                var _itemList3 = Utils.getSameBlockList(GameData.starMatrix, list[i], _type);
                for (var _j3 = 0; _j3 < _itemList3.length; _j3++) Utils.indexOfV2(list, _itemList3[_j3]) || list.push(_itemList3[_j3]);
              }
            }
          }
        }
        if (len == list.length) return list;
        this.judgeSpecialBlock(list);
      },
      getNodeBygGrid: function getNodeBygGrid(pos) {
        var index = Utils.indexValue(pos.x, pos.y);
        var stone = GameData.starSprite[index];
        if (!stone) return false;
        var script = stone.getComponent("block");
        return script;
      },
      tampRows: function tampRows() {
        this.canclePlayerNotice();
        this.resumeOriginView();
        this.queryCanFall();
        this.addStar();
        if (Utils.gameOver(GameData.starMatrix)) {
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 1
          });
          this.scheduleOnce(function() {
            cc.systemEvent.emit("SHUFFLE_TIPS");
          }, 1.5);
          this.scheduleOnce(function() {
            this.shuffleStarMatrix();
          }, 2.5);
        }
        this.isPineToEnd();
        cc.director.isMoving = false;
        GameData.bestLevel > 0 && this.showTipsView();
      },
      queryCanFall: function queryCanFall(index_rest) {
        var start;
        start = "number" == typeof index_rest ? index_rest : 0;
        for (var i = 0; i < Config.matrixCol; i++) {
          var col = i;
          var row = -1;
          for (var j = start; j < Config.matrixRow; j++) if (-1 == GameData.starMatrix[j][col]) {
            row = j;
            break;
          }
          if (row >= 0) for (var k = row; k < Config.matrixRow; k++) {
            if (-2 == GameData.starMatrix[k][col] || 26 == GameData.starMatrix[k][col] || 27 == GameData.starMatrix[k][col]) continue;
            var index = -1;
            for (var t = k + 1; t < Config.matrixRow; t++) if (GameData.starMatrix[t][col] >= 0 && 26 != GameData.starMatrix[t][col] && 27 != GameData.starMatrix[t][col]) {
              index = t;
              break;
            }
            if (index >= 0) {
              if (22 == GameData.starMatrix[index][col] || GameData.starMatrix[index][col] >= 23 && GameData.starMatrix[index][col] <= 25 || GameData.starMatrix[index][col] >= 29 && GameData.starMatrix[index][col] <= 36) {
                this.queryCanFall(index + 1);
                break;
              }
              GameData.starMatrix[k][col] = GameData.starMatrix[index][col];
              GameData.starMatrix[index][col] = -1;
              this.donwMove(cc.v2(k, col), cc.v2(index, col));
            }
          }
        }
      },
      showTipsView: function showTipsView() {
        var temp = JSON.parse(JSON.stringify(GameData.starMatrix));
        var tipsViewList = Utils.chooseRemoveList(temp);
        if (tipsViewList.length <= 0) return;
        for (var i = 0; i < tipsViewList.length; i++) {
          var item = tipsViewList[i];
          var len = item.length;
          for (var j = 0; j < len; j++) {
            var type = void 0;
            var script = this.getNodeBygGrid(item[j]);
            len >= 5 && len < 7 && (type = 0);
            len >= 7 && len < 9 && (type = 1);
            len >= 9 && (type = 2);
            script.updateTipsView(type);
          }
        }
        this.tempTipsView = tipsViewList;
      },
      resumeOriginView: function resumeOriginView() {
        for (var i = 0; i < Config.matrixRow; i++) for (var j = 0; j < Config.matrixCol; j++) if (GameData.starMatrix[i][j] >= 0 && GameData.starMatrix[i][j] < Config.rType) {
          var item = cc.v2(i, j);
          var script = this.getNodeBygGrid(item);
          script.originView();
        }
      },
      donwMove: function donwMove(target, start) {
        var sIndex = Utils.indexValue(start.x, start.y);
        var eIndex = Utils.indexValue(target.x, target.y);
        var targetPos = Utils.grid2Pos(target.x, target.y);
        var stone = GameData.starSprite[sIndex];
        stone.stopActionByTag(5);
        stone.getComponent("block").changeStoneGrid(target.x, target.y);
        GameData.starSprite[eIndex] = stone;
        GameData.starSprite[sIndex] = null;
        var action = cc.sequence(cc.moveTo(.05 * start.x, targetPos).easing(cc.easeExponentialIn()), cc.jumpTo(.1, targetPos, 10, 1), cc.callFunc(function() {
          cc.director.SoundManager.playSound("drop4");
        }));
        action.tag = 5;
        stone.runAction(action);
      },
      isPineToEnd: function isPineToEnd() {
        var list = this.isFallToBlow(GameData.starMatrix);
        if (!!list) {
          this.addGameMoveStatus();
          cc.director.isPine = 1;
          this.scheduleOnce(function() {
            this.removePineCone(list);
          }, .5);
        }
      },
      removePineCone: function removePineCone(list) {
        if (!!this.tempList) return;
        this.tempList = list;
        for (var i = 0; i < list.length; i++) {
          var vector = list[i];
          this.removeBlock(vector, 1);
          var pos = Utils.grid2Pos(vector.x, vector.y);
          var worldPosition = this.node.convertToWorldSpaceAR(pos);
          var isLast = i == list.length - 1;
          isLast && cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 1
          });
          cc.systemEvent.emit("PINECONE", {
            worldPosition: worldPosition,
            isLast: isLast
          });
        }
        this.scheduleOnce(function() {
          if (cc.director.isrunning) return;
          this.whichTimeTampRow("removepinecone");
          this.tempList = null;
        }, .5);
      },
      isFallToBlow: function isFallToBlow(list) {
        var ballList = [];
        var hinderList = [];
        for (var i = 0; i < list.length; i++) for (var j = 0; j < list[i].length; j++) 20 == list[i][j] && hinderList.push(cc.v2(i, j));
        while (hinderList.length > 0) {
          var item = hinderList.pop();
          this.judgePineDowm(item, list) && ballList.push(item);
        }
        return ballList.length > 0 && ballList;
      },
      judgePineDowm: function judgePineDowm(item, list) {
        var isDown = true;
        var len = item.x;
        if (0 == len) return isDown;
        for (var i = len - 1; i >= 0; i--) if (-2 != list[i][item.y]) {
          isDown = false;
          break;
        }
        return isDown;
      },
      addStar: function addStar() {
        for (var col = 0; col < Config.matrixCol; col++) {
          var specialHinder = -1;
          for (var row = Config.matrixRow - 1; row >= 0; row--) if (22 == GameData.starMatrix[row][col] || GameData.starMatrix[row][col] >= 23 && GameData.starMatrix[row][col] <= 25 || GameData.starMatrix[row][col] >= 29 && GameData.starMatrix[row][col] <= 36) {
            specialHinder = row;
            break;
          }
          if (specialHinder >= 0) {
            for (var r = specialHinder; r < Config.matrixRow; r++) if (-1 == GameData.starMatrix[r][col]) {
              var vector = cc.v2(r, col);
              this.fallStoneFromTop(vector);
            }
          } else for (var r1 = 0; r1 < Config.matrixRow; r1++) if (-1 == GameData.starMatrix[r1][col]) {
            var _vector = cc.v2(r1, col);
            this.fallStoneFromTop(_vector);
          }
        }
        this.target.isPass || this.handleCanCombineTool();
      },
      handleCanCombineTool: function handleCanCombineTool() {
        if (this.effectList) while (this.effectList.length > 0) {
          var item = this.effectList.pop();
          var effect = item.getChildByName("temp");
          effect.removeAllChildren();
        } else this.effectList = [];
        var toolList = Utils.judgeNearNode(GameData.starMatrix);
        while (toolList.length > 0) {
          var _item2 = toolList.pop();
          var script = this.getNodeBygGrid(_item2);
          var _effect = void 0;
          _effect = cc.instantiate(this.tool_effect);
          script.toolCanCombineEffect(_effect);
          this.effectList.push(script.node);
        }
      },
      removeToolEffect: function removeToolEffect(pos) {
        var temp = this.getNodeBygGrid(pos).temp;
        var effect = temp.getChildByName("tool_effect");
        this.toolEffectPool.put(effect);
        temp.active = false;
      },
      fallStoneFromTop: function fallStoneFromTop(pos) {
        var stone;
        var row = 10;
        var col = pos.y;
        stone = this.stonePool.size() > 0 ? this.stonePool.get() : cc.instantiate(this.stone);
        var startPos = Utils.grid2Pos(row, col);
        this.node.addChild(stone);
        var script = stone.getComponent("block");
        var type = Utils.randomColorByArray([ 1, 2, 3, 4, 5 ]);
        script.initStoneView(pos.x, pos.y, type - 1);
        GameData.updateSingleData(pos, type);
        stone.position = startPos;
        var targetPos = Utils.grid2Pos(pos.x, pos.y);
        var index = Utils.indexValue(pos.x, pos.y);
        GameData.starSprite[index] = stone;
        stone.runAction(cc.sequence(cc.fadeIn(.1), cc.moveTo(.05 * pos.x, targetPos).easing(cc.easeExponentialIn()), cc.callFunc(function() {
          cc.director.SoundManager.playSound("drop4");
        }), cc.jumpBy(.1, cc.v2(0, 0), 10, 1)));
      },
      shuffleStarMatrix: function shuffleStarMatrix() {
        this.canclePlayerNotice();
        cc.director.SoundManager.playSound("dice");
        var arr = GameData.starSprite;
        var tempArr = [];
        for (var i = 0; i < arr.length; i++) if (!!arr[i]) {
          var item = arr[i].getComponent("block")._stoneType;
          item >= 0 && item < Config.rType && tempArr.push(arr[i]);
        }
        tempArr = this.shuffle(tempArr);
        var count = 0;
        for (var _i3 = 0; _i3 < arr.length; _i3++) if (!!arr[_i3]) {
          var _item3 = arr[_i3].getComponent("block")._stoneType;
          if (_item3 >= 0 && _item3 < Config.rType) {
            arr[_i3] = tempArr[count];
            count++;
          }
        }
        for (var a = 0; a < Config.matrixRow; a++) for (var b = 0; b < Config.matrixCol; b++) if (GameData.starMatrix[a][b] >= 0 && GameData.starMatrix[a][b] < Config.rType) {
          var index = Utils.indexValue(a, b);
          var starNode = GameData.starSprite[index];
          var sScript = starNode.getComponent("block");
          var pos = Utils.grid2Pos(a, b);
          starNode.runAction(cc.moveTo(.5, pos));
          GameData.starMatrix[a][b] = sScript._stoneType;
          sScript.changeStoneGrid(a, b);
        }
        this.handleCanCombineTool();
        this.resumeOriginView();
        GameData.bestLevel > 0 && this.showTipsView();
        if (Utils.gameOver(GameData.starMatrix)) {
          cc.systemEvent.emit("SHUFFLE_TIPS");
          this.scheduleOnce(function() {
            this.shuffleStarMatrix();
          }, 1.5);
        } else cc.systemEvent.emit("GAMEMASK_CONTROL", {
          order: 2
        });
      },
      shuffle: function shuffle(arr) {
        var length = arr.length, randomIndex, temp;
        while (length) {
          randomIndex = Math.floor(Math.random() * length--);
          temp = arr[randomIndex];
          arr[randomIndex] = arr[length];
          arr[length] = temp;
        }
        return arr;
      },
      fireTheHole: function fireTheHole(event) {
        var self = this;
        var fire;
        var data = event;
        fire = this.firePool.size() > 0 ? this.firePool.get() : cc.instantiate(this.fire);
        var startPos = this.node.convertToNodeSpaceAR(data.startPos);
        var endPos;
        if (!data.endGrid) {
          this.executePassEffect();
          return;
        }
        endPos = Utils.grid2Pos(data.endGrid.x, data.endGrid.y);
        fire.parent = this.node;
        fire.position = startPos;
        cc.director.SoundManager.playSound("flyStart");
        fire.getComponent("arrow").computedLineDistanceAndRotation(data.startPos, endPos);
        var action = cc.sequence(cc.moveTo(.3, endPos), cc.callFunc(function() {
          self.effectRemoveCol(data.endGrid);
        }), cc.callFunc(function() {
          self.firePool.put(fire);
          self.blockToBoom(data.endGrid, 2);
          cc.director.SoundManager.playSound("flyEnd");
        }));
        fire.runAction(action);
        data.step <= 0 && this.scheduleOnce(function() {
          self.executePassEffect();
        }, 1);
      },
      getGameTool: function getGameTool() {
        var item;
        for (var i = Config.matrixRow - 1; i >= 0; i--) for (var j = 0; j < Config.matrixCol; j++) if (GameData.starMatrix[i][j] >= Config.rType && GameData.starMatrix[i][j] <= Config.dType) {
          item = cc.v2(i, j);
          break;
        }
        return item || false;
      },
      executePassEffect: function executePassEffect() {
        var grid = this.getGameTool();
        this.passIndex = true;
        if (!grid) setTimeout(function() {
          cc.director.dialogScript.showResultPromptView(this.list);
        }.bind(this), 1e3); else {
          this.handleGameToolArray(grid);
          this.scheduleOnce(function() {
            this.executePassEffect();
          }, 1);
        }
        if (cc.director.isrunning) return;
        this.whichTimeTampRow("executepasseffect");
      },
      addGameToolToContainer: function addGameToolToContainer(list, flag) {
        var _this2 = this;
        var isHas = false;
        for (var a = 0; a < list.length; a++) if (list[a] > 0) {
          isHas = true;
          break;
        }
        if (list.length <= 0 || !isHas) {
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 2
          });
          cc.find("Canvas/guideNode").active = true;
          return;
        }
        var grid = Utils.getRandomBlockPosition(GameData.starMatrix, 3);
        this.isMoving = true;
        var _loop3 = function _loop3(i) {
          _this2.scheduleOnce(function() {
            if (list[i] > 0) {
              var item = list[i];
              flag || (GameData.gameToolList[i] -= item);
              var sScript = this.getNodeBygGrid(grid[i]);
              var node = sScript.node;
              node.scale = 1.2;
              node.runAction(cc.scaleTo(.5, 1));
              this.toolAndSuperToolEffect(grid[i]);
              GameData.starMatrix[grid[i].x][grid[i].y] = 8 + i;
              sScript.changeStoneNum(8 + i);
              list[i] = 0;
              cc.director.SoundManager.playSound("choosed_voice");
            }
            if (i == list.length - 1) {
              this.handleCanCombineTool();
              this.target.isPass || cc.systemEvent.emit("GAMEMASK_CONTROL", {
                order: 2
              });
              cc.systemEvent.emit("STOP_TOUCH", {
                number: 1
              });
            }
          }, 1 * i);
        };
        for (var i = 0; i < list.length; i++) _loop3(i);
      },
      startNewGame: function startNewGame() {
        cc.game.GameMoveStatus = 0;
        cc.game.windmillCount = 0;
        this.canclePlayerNotice();
        var stoneData;
        var levelRes;
        var step;
        var targetList;
        cc.director.isPine = 0;
        cc.director.checkLastPine = 0;
        if (GameData.bestLevel >= 0 && GameData.bestLevel <= 300) {
          levelRes = levelResource[GameData.bestLevel];
          stoneData = JSON.parse(JSON.stringify(levelRes.mapList));
          GameData.starMatrix = stoneData;
          this.list = levelRes.targetList;
          step = levelRes.step;
        } else {
          if (!this.hinderList) {
            targetList = this.createRandomTargetList();
            var hinder = this.createHinderList(targetList);
            var randomList = Utils.initMatrixDataPortraitRandom();
            var hinderList = Utils.addHinder(randomList, hinder[0], -2);
            hinderList = Utils.addHinder(randomList, hinder[1], 20);
            hinderList = Utils.addHinder(randomList, hinder[2], 21);
            this.hinderList = hinderList;
            this.list = targetList;
            step = this.createStep();
            this.tempStep = step;
          }
          stoneData = JSON.parse(JSON.stringify(this.hinderList));
          targetList = this.list;
          GameData.starMatrix = stoneData;
          step = this.tempStep;
          levelRes = {};
        }
        var list_grass, stoneList, list_bubble;
        cc.director.isMoving = false;
        this.progressBar.initProgressBar();
        this.initContainerView(stoneData);
        this.bgPrompt.initBgPrompt(GameData.starMatrix);
        this.target.resumeGameStatues();
        this.target.updateNodeTag(this.list, step);
        list_grass = levelRes.grassList;
        stoneList = levelRes.stoneList;
        list_bubble = levelRes.bubbleList;
        !list_grass || !stoneList || this.grassGround.initFunc(list_grass, stoneList);
        !list_bubble || this.bubbleGround.initFunc(list_bubble);
        GameData.bestLevel > 0 && this.showTipsView();
        cc.director.dialogScript.goalDisplay.initGoalNumber(this.list);
        cc.director.videoCount = 1;
        this.handleCanCombineTool();
        cc.systemEvent.emit("GAMEMASK_CONTROL", {
          order: 1
        });
      },
      createRandomTargetList: function createRandomTargetList() {
        var typeList = [ 0, 1, 2, 3, 4, 5, 20, 21 ];
        var targetList = [];
        var checkList = [];
        var len;
        len = GameData.bestLevel >= 60 ? 4 : 3;
        while (targetList.length < len) {
          var cList = [];
          var type = Math.floor(Math.random() * typeList.length);
          if (!this.isContain(checkList, type)) {
            checkList.push(type);
            var number = 15 + Math.floor(Math.random() * typeList.length);
            cList[0] = typeList[type];
            typeList[type] >= 4 ? cList[1] = number - 10 : cList[1] = number;
            targetList.push(cList);
          }
        }
        targetList.sort(function(a, b) {
          return a[0] - b[0];
        });
        return targetList;
      },
      createHinderList: function createHinderList(list) {
        var hinderList = [ 12, 0, 0 ];
        var index = 20;
        for (var i = 1; i < 3; i++) {
          var isHas = -1;
          for (var j = 0; j < list.length; j++) if (list[j][0] == index) {
            isHas = j;
            break;
          }
          isHas >= 0 && (hinderList[i] = list[isHas][1]);
          index++;
        }
        return hinderList;
      },
      createStep: function createStep() {
        return 35 + Math.floor(15 * Math.random());
      },
      isContain: function isContain(list, item) {
        var isContain = false;
        for (var i = 0; i < list.length; i++) if (item == list[i]) {
          isContain = true;
          break;
        }
        return isContain;
      },
      col_rocket: function col_rocket(grid) {
        var down_rocket, up_rocket;
        down_rocket = this.rockPool.size() > 0 ? this.rockPool.get() : cc.instantiate(this.rock);
        up_rocket = this.rockPool.size() > 0 ? this.rockPool.get() : cc.instantiate(this.rock);
        this.rocketEffect(down_rocket, grid, 1, -90);
        this.rocketEffect(up_rocket, grid, -1, 90);
        cc.director.SoundManager.playSound("rocket");
      },
      row_rocket: function row_rocket(grid) {
        var left_rocket, right_rocket;
        left_rocket = this.rockPool.size() > 0 ? this.rockPool.get() : cc.instantiate(this.rock);
        right_rocket = this.rockPool.size() > 0 ? this.rockPool.get() : cc.instantiate(this.rock);
        this.rocketEffect(left_rocket, grid, 2, 0);
        this.rocketEffect(right_rocket, grid, -2, 180);
        cc.director.SoundManager.playSound("rocket");
      },
      rocketEffect: function rocketEffect(node, grid, type, rotation) {
        var self = this;
        var position = Utils.grid2Pos(grid.x, grid.y);
        node.position = position;
        node.rotation = rotation;
        node.parent = this.node;
        var posList;
        var action1 = cc.sequence(cc.moveTo(.5, cc.v2(position.x, position.y + 800 * type)), cc.callFunc(function() {
          node.removeFromParent();
        }));
        var action2 = cc.sequence(cc.moveTo(.5, cc.v2(position.x + 400 * type, position.y)), cc.callFunc(function() {
          node.removeFromParent();
        }));
        if (1 == Math.abs(type)) {
          node.runAction(action1);
          if (1 == type) {
            posList = this.getRemovePositionList(grid, Config.direction.UP, 1);
            node.getComponent("rocket").setRocketPosition(grid, Config.direction.UP, posList);
          }
          if (-1 == type) {
            posList = this.getRemovePositionList(grid, Config.direction.DOWN, 1);
            node.getComponent("rocket").setRocketPosition(grid, Config.direction.DOWN, posList);
          }
        } else {
          node.runAction(action2);
          if (2 == type) {
            posList = this.getRemovePositionList(grid, Config.direction.RIGHT, 2);
            node.getComponent("rocket").setRocketPosition(grid, Config.direction.RIGHT, posList);
          }
          if (-2 == type) {
            posList = this.getRemovePositionList(grid, Config.direction.LEFT, 2);
            node.getComponent("rocket").setRocketPosition(grid, Config.direction.LEFT, posList);
          }
        }
      },
      removeRocketAcrossData: function removeRocketAcrossData(grid, dir) {
        var _this3 = this;
        var row = grid.x;
        var col = grid.y;
        if (dir == Config.direction.UP) {
          var _loop4 = function _loop4(i) {
            _this3.scheduleOnce(function() {
              if (GameData.starMatrix[i][col] >= 0) {
                var item = cc.v2(i, col);
                this.handleSingleGrid(item);
              }
            }, .05 * Math.abs(i - row));
          };
          for (var i = row; i < Config.matrixRow; i++) _loop4(i);
        }
        if (dir == Config.direction.DOWN) {
          var _loop5 = function _loop5(_i4) {
            _this3.scheduleOnce(function() {
              if (GameData.starMatrix[_i4][col] >= 0) {
                var item = cc.v2(_i4, col);
                this.handleSingleGrid(item);
              }
            }, .05 * Math.abs(_i4 - row));
          };
          for (var _i4 = row; _i4 >= 0; _i4--) _loop5(_i4);
        }
        if (dir == Config.direction.LEFT) {
          var _loop6 = function _loop6(_i5) {
            _this3.scheduleOnce(function() {
              if (GameData.starMatrix[row][_i5] >= 0) {
                var item = cc.v2(row, _i5);
                this.handleSingleGrid(item);
              }
            }, .05 * Math.abs(_i5 - col));
          };
          for (var _i5 = col; _i5 >= 0; _i5--) _loop6(_i5);
        }
        if (dir == Config.direction.RIGHT) {
          var _loop7 = function _loop7(_i6) {
            _this3.scheduleOnce(function() {
              if (GameData.starMatrix[row][_i6] >= 0) {
                var item = cc.v2(row, _i6);
                this.handleSingleGrid(item);
              }
            }, .05 * Math.abs(_i6 - col));
          };
          for (var _i6 = col; _i6 < Config.matrixCol; _i6++) _loop7(_i6);
        }
      },
      getRemovePositionList: function getRemovePositionList(grid, dir, type) {
        var posList = [];
        var xStart = grid.x;
        var yStart = grid.y;
        if (1 == type) {
          if (dir == Config.direction.UP) for (var i = xStart; i < Config.matrixRow; i++) {
            var pos = Utils.grid2Pos(i, yStart);
            if (GameData.starMatrix[i][yStart] >= 0) {
              var item = {};
              item.grid = cc.v2(i, yStart);
              item.position = pos;
              posList.push(item);
            }
          } else if (dir == Config.direction.DOWN) for (var _i7 = xStart; _i7 >= 0; _i7--) {
            var _pos = Utils.grid2Pos(_i7, yStart);
            if (GameData.starMatrix[_i7][yStart] >= 0) {
              var _item4 = {};
              _item4.grid = cc.v2(_i7, yStart);
              _item4.position = _pos;
              posList.push(_item4);
            }
          }
        } else if (2 == type) if (dir == Config.direction.LEFT) for (var _i8 = yStart; _i8 >= 0; _i8--) {
          var _pos2 = Utils.grid2Pos(xStart, _i8);
          if (GameData.starMatrix[xStart][_i8] >= 0) {
            var _item5 = {};
            _item5.grid = cc.v2(xStart, _i8);
            _item5.position = _pos2;
            posList.push(_item5);
          }
        } else if (dir == Config.direction.RIGHT) for (var _i9 = yStart; _i9 < Config.matrixCol; _i9++) {
          var _pos3 = Utils.grid2Pos(xStart, _i9);
          if (GameData.starMatrix[xStart][_i9] >= 0) {
            var _item6 = {};
            _item6.grid = cc.v2(xStart, _i9);
            _item6.position = _pos3;
            posList.push(_item6);
          }
        }
        return posList.length > 0 && posList;
      },
      boxingAndAnvil: function boxingAndAnvil(event) {
        var grid = event.grid;
        var node = event.node;
        var dir = event.dir;
        node.parent = this.node;
        var itemGrid, posList, endPos;
        if (dir == Config.direction.RIGHT) {
          node.position = Utils.grid2Pos(grid.x, 0);
          itemGrid = cc.v2(grid.x, -1);
          posList = this.getRemovePositionList(itemGrid, dir, 2);
          node.getComponent("rocket").setRocketPosition(itemGrid, dir, posList);
          endPos = Utils.grid2Pos(grid.x, 10);
          node.runAction(cc.sequence(cc.moveTo(.5, endPos), cc.callFunc(function() {
            cc.systemEvent.emit("player_tool", {
              type: 1
            });
            node.removeFromParent();
            cc.systemEvent.emit("CLEAR_BTN");
            cc.systemEvent.emit("FUNCTION_EXPLAIN_OFF");
          })));
        }
        if (dir == Config.direction.DOWN) {
          node.position = Utils.grid2Pos(10, grid.y);
          itemGrid = cc.v2(8, grid.y);
          posList = this.getRemovePositionList(itemGrid, dir, 1);
          node.getComponent("rocket").setRocketPosition(itemGrid, dir, posList);
          endPos = Utils.grid2Pos(-1, grid.y);
          node.runAction(cc.sequence(cc.moveTo(.5, endPos), cc.callFunc(function() {
            cc.systemEvent.emit("player_tool", {
              type: 2
            });
            node.removeFromParent();
            cc.systemEvent.emit("CLEAR_BTN");
            cc.systemEvent.emit("FUNCTION_EXPLAIN_OFF");
          })));
        }
      },
      handleSingleGrid: function handleSingleGrid(grid) {
        var index = Utils.indexValue(grid.x, grid.y);
        if (null == GameData.starSprite[index]) return;
        var script = this.getNodeBygGrid(grid);
        if (21 == script._stoneType) {
          cc.director.container.balloonBoomEffect(grid);
          cc.director.container.removeBlock(grid);
        } else if (script._stoneType >= 0 && script._stoneType < Config.rType) {
          cc.director.container.removeBlock(grid);
          cc.director.container.effectRemoveCol(grid);
        } else if (8 == script._stoneType) if (0 == script.rocketType) {
          cc.director.container.removeBlock(grid);
          cc.director.container.col_rocket(grid);
        } else {
          cc.director.container.removeBlock(grid);
          cc.director.container.row_rocket(grid);
        } else if (9 == script._stoneType) {
          var detail = {
            index: script._stoneType,
            type: script.discoType,
            grid: grid,
            from: 1
          };
          cc.systemEvent.emit("GAME_TOOL", {
            detail: detail
          });
        } else if (10 == script._stoneType) {
          if (script.isEffect) {
            script.isEffect = false;
            return;
          }
          script.isEffect = true;
          var _detail = {
            index: script._stoneType,
            type: script.discoType,
            grid: grid,
            from: 1
          };
          cc.systemEvent.emit("GAME_TOOL", {
            detail: _detail
          });
        } else if (22 == script._stoneType) {
          script.bombRatio--;
          script.cubesUnlock();
          cc.director.container.vineBreakEffect(grid);
        } else if (23 == script._stoneType || 24 == script._stoneType || 25 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) {
            cc.director.container.woodCubeBreakEffect(grid);
            cc.director.container.removeBlock(grid);
            script.boxCubesDisappear();
          } else {
            script.boxHit();
            cc.director.container.woodBoxBreakEffect(grid);
          }
        } else if (26 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio < 0) {
            cc.director.container.flowerCollectAnimation(grid);
            script.collectFlower();
          } else {
            script.flowerHit();
            cc.director.container.flowerOpenEffect(grid);
          }
        } else if (27 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) cc.director.container.windmillDisappearEffect(grid); else {
            script.hitWindmill();
            cc.director.container.windmillBreakEffect(grid, script.bombRatio);
          }
        } else if (script._stoneType >= 29 && script._stoneType <= 36) {
          script.bombRatio--;
          if (script.bombRatio <= 0) {
            cc.director.container.colorCubeBreakEffect(grid);
            cc.director.container.removeBlock(grid);
            script.boxCubesDisappear();
          }
        } else if (37 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) this.ladyBugCubesBreakEffect(grid, script.bombRatio); else {
            this.ladyBugCubesBreakEffect(grid, script.bombRatio);
            script.hitLadyBugCubes();
          }
        } else if (39 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) {
            cc.director.container.rockStoneCubeBreakEffect(grid);
            cc.director.container.removeBlock(grid);
            script.boxCubesDisappear();
          }
        }
      },
      handleGameToolArray: function handleGameToolArray(pos) {
        var type = GameData.getDataBygrid(pos);
        var script = this.getNodeBygGrid(pos);
        if (type < Config.rType) {
          this.effectRemoveCol(pos);
          this.removeBlock(pos);
        } else if (type == Config.rType) {
          0 == script.rocketType && this.col_rocket(pos);
          1 == script.rocketType && this.row_rocket(pos);
        } else if (type == Config.bType) {
          var list = Utils.rainbowStarRemoveList(GameData.starMatrix, pos);
          cc.director.SoundManager.playSound("boom1");
          this.removeBombBlockOnly(list);
        } else if (type == Config.dType) {
          var _list2 = Utils.getSameBlockList(GameData.starMatrix, pos);
          var type1 = this.judgeDiscoType(_list2);
          this.discoRotation(pos);
          var list1 = Utils.getSameBlockList(GameData.starMatrix, pos, type1);
          var oldlist = JSON.parse(JSON.stringify(list1));
          this.effectRemoveSame(pos, list1, oldlist, this.removeSameColorBlock);
        } else if (21 == type) {
          this.effectRemoveCol(pos);
          this.removeBlock(pos);
        } else if (22 == type) {
          script.bombRatio--;
          script.cubesUnlock();
          this.vineBreakEffect(pos);
        } else if (23 == type || 24 == type || 25 == type) {
          script.bombRatio--;
          if (script.bombRatio <= 0) {
            this.woodCubeBreakEffect(pos);
            this.removeBlock(pos);
            script.boxCubesDisappear();
          } else {
            script.boxHit();
            2 == script.bombRatio ? this.woodBoxBreakEffect(pos, 2) : this.woodBoxBreakEffect(pos, 1);
          }
        } else if (26 == type) {
          script.bombRatio--;
          if (script.bombRatio < 0) {
            this.flowerCollectAnimation(pos);
            script.collectFlower();
          } else {
            script.flowerHit();
            this.flowerOpenEffect(pos);
          }
        } else if (27 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) this.windmillDisappearEffect(pos); else {
            script.hitWindmill();
            this.windmillBreakEffect(pos, script.bombRatio);
          }
        } else if (script._stoneType >= 29 && script._stoneType <= 36) {
          script.bombRatio--;
          if (script.bombRatio <= 0) {
            this.colorCubeBreakEffect(pos);
            this.removeBlock(pos);
            script.boxCubesDisappear();
          }
        } else if (37 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) this.ladyBugCubesBreakEffect(pos, script.bombRatio); else {
            this.ladyBugCubesBreakEffect(pos, script.bombRatio);
            script.hitLadyBugCubes();
          }
        } else if (39 == script._stoneType) {
          script.bombRatio--;
          if (script.bombRatio <= 0) {
            cc.director.container.rockStoneCubeBreakEffect(pos);
            cc.director.container.removeBlock(pos);
            script.boxCubesDisappear();
          }
        }
      },
      removeBlockOnly: function removeBlockOnly(list) {
        for (var i = list.length - 1; i >= 0; i--) {
          var pos = list[i];
          var type = GameData.starMatrix[pos.x][pos.y];
          var script = this.getNodeBygGrid(pos);
          if (-2 != type && type < 22) this.removeBlock(pos); else if (22 == type) {
            script.bombRatio--;
            script.cubesUnlock();
          } else if (23 == type || 24 == type || 25 == type) {
            script.bombRatio--;
            if (script.bombRatio <= 0) {
              this.woodCubeBreakEffect(pos);
              this.removeBlock(pos);
              script.boxCubesDisappear();
            } else {
              script.boxHit();
              2 == script.bombRatio ? this.woodBoxBreakEffect(pos, 2) : this.woodBoxBreakEffect(pos, 1);
            }
          } else if (26 == type) {
            script.bombRatio--;
            if (script.bombRatio < 0) {
              this.flowerCollectAnimation(pos);
              script.collectFlower();
            } else {
              script.flowerHit();
              this.flowerOpenEffect(pos);
            }
          } else if (27 == type) {
            script.bombRatio--;
            if (script.bombRatio <= 0) {
              this.removeBlock(pos);
              script.collectFlower();
            } else {
              script.hitWindmill();
              this.windmillBreakEffect(pos, script.bombRatio);
            }
          } else if (script._stoneType >= 29 && script._stoneType <= 36) {
            script.bombRatio--;
            if (script.bombRatio <= 0) {
              this.colorCubeBreakEffect(pos);
              this.removeBlock(pos);
              script.boxCubesDisappear();
            }
          } else if (37 == script._stoneType) {
            script.bombRatio--;
            if (script.bombRatio <= 0) this.ladyBugCubesBreakEffect(pos, script.bombRatio); else {
              this.ladyBugCubesBreakEffect(pos, script.bombRatio);
              script.hitLadyBugCubes();
            }
          } else if (39 == script._stoneType) {
            script.bombRatio--;
            if (script.bombRatio <= 0) {
              cc.director.container.rockStoneCubeBreakEffect(pos);
              cc.director.container.removeBlock(pos);
              script.boxCubesDisappear();
            }
          }
        }
        this.scheduleOnce(function() {
          if (cc.director.isrunning) return;
          this.whichTimeTampRow("removeNineBlock2");
        }, .5);
      },
      whichTimeTampRow: function whichTimeTampRow(pos) {
        var node = this.node.getChildByName("rock");
        var line = this.node.getChildByName("line");
        if (!node && !line && !cc.director.needWait) {
          this.tampRows();
          cc.director.isrunning = 0;
          !this.tempPos || (this.tempPos = null);
          !this.tempLadyBugList || (this.tempLadyBugList = null);
          !this.flowerTempList || (this.flowerTempList = null);
        } else {
          cc.director.isrunning = 1;
          this.scheduleOnce(function() {
            this.whichTimeTampRow("\u9012\u5f52");
          }, .2);
        }
      },
      noticeWhichCubesCombine: function noticeWhichCubesCombine() {
        var list = Utils.noticeLongestList(GameData.starMatrix);
        if (!!list) for (var i = 0; i < list.length; i++) {
          var item = list[i];
          var index = Utils.indexValue(item.x, item.y);
          var stone = GameData.starSprite[index];
          this.noticeList.push(stone);
          if (!!stone) {
            stone.zIndex = 1;
            stone.getChildByName("outLine").active = true;
            var nocticeAnima = cc.sequence(cc.scaleTo(.5, .95), cc.scaleTo(1, 1.05), cc.scaleTo(.5, 1)).repeatForever();
            nocticeAnima.tag = 10;
            stone.runAction(nocticeAnima);
          }
        }
      },
      noticePlayerTimeCount: function noticePlayerTimeCount() {
        if (this.noticeCount > 0) {
          this.noticeCount--;
          if (0 == this.noticeCount) {
            this.unschedule(this.noticePlayerTimeCount);
            this.noticeWhichCubesCombine();
          }
        }
      },
      canclePlayerNotice: function canclePlayerNotice() {
        if (!!this.noticeList && this.noticeList.length > 0) for (var i = 0; i < this.noticeList.length; i++) {
          var item = this.noticeList[i];
          if (!item) continue;
          item.getChildByName("outLine").active = false;
          item.stopActionByTag(10);
          item.scale = 1;
          item.zIndex = 0;
        }
        this.noticeList = [];
        this.noticeCount = 5;
        var isScheduled = cc.director.getScheduler().isScheduled(this.noticePlayerTimeCount, this);
        isScheduled || this.target.isGameEnd ? !this.target.isGameEnd || this.unschedule(this.noticePlayerTimeCount) : this.schedule(this.noticePlayerTimeCount, 1);
      },
      judgeGameMoveStatus: function judgeGameMoveStatus() {
        return !(cc.game.GameMoveStatus > 0);
      },
      addGameMoveStatus: function addGameMoveStatus() {
        "number" == typeof cc.game.GameMoveStatus && cc.game.GameMoveStatus++;
      },
      reduceGameMoveStatus: function reduceGameMoveStatus() {
        cc.game.GameMoveStatus > 0 && cc.game.GameMoveStatus--;
      },
      test_addLevel: function test_addLevel() {
        GameData.bestLevel++;
        this.startNewGame();
      },
      test_reduceLevel: function test_reduceLevel() {
        GameData.bestLevel--;
        this.startNewGame();
      },
      start: function start() {
        this.startNewGame();
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../newLevelResource": "newLevelResource",
    "../psconfig": "psconfig",
    "../utils": "utils",
    "./bgPrompt": "bgPrompt",
    "./bubbleCubeContainer": "bubbleCubeContainer",
    "./glassGround": "glassGround",
    "./progressBar": "progressBar",
    "./target": "target"
  } ],
  cropItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9ea6zMaTFMYKW9PQpaoV0F", "cropItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        sprite_crops_view: cc.Sprite,
        label_crops_obtain: cc.Label,
        list_cropsView: [ cc.SpriteFrame ]
      },
      updateDetail: function updateDetail(data) {
        this.sprite_crops_view.spriteFrame = this.list_cropsView[data.type];
        this.label_crops_obtain.string = "." + data.number;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  dailyBouns: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70711h1YL9GzKGA9vtP1z25", "dailyBouns");
    "use strict";
    var dailyBouns = [ {
      status: 3,
      type: 0,
      number: 30,
      index: 0
    }, {
      status: 3,
      type: 1,
      number: 1,
      index: 1
    }, {
      status: 3,
      type: 0,
      number: 60,
      index: 2
    }, {
      status: 3,
      type: 2,
      number: 1,
      index: 3
    }, {
      status: 3,
      type: 0,
      number: 90,
      index: 4
    }, {
      status: 3,
      type: 3,
      number: 1,
      index: 5
    } ];
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        item_daliy: cc.Prefab,
        container: cc.Node,
        seven_Bg: cc.Sprite,
        seven_mark: cc.Node,
        seven_name: cc.Node,
        bgViewList: [ cc.SpriteFrame ],
        seven_light: cc.Node,
        sevenNode: cc.Node,
        daily_btn: cc.Node
      },
      onLoad: function onLoad() {
        this.node.on("get_reward", this.getReward, this);
      },
      initDailyBouns: function initDailyBouns(list) {
        this.container.removeAllChildren();
        for (var i = 0; i < list.length; i++) {
          var item = cc.instantiate(this.item_daliy);
          item.parent = this.container;
          item.getComponent("item_daily").initItem(list[i]);
        }
      },
      getReward: function getReward(event) {
        var data = event.detail;
        cc.director.SoundManager.playSound("daily");
        0 == data.type ? cc.systemEvent.emit("TOOLOBTAIN", data) : cc.systemEvent.emit("DAILY_BOUNS_ANIMA", data);
        cc.director.screenDialog.hideDailyBouns();
        this.updateBouns_got(data);
      },
      updateBouns_got: function updateBouns_got(data) {
        var bounsList = cc.sys.localStorage.getItem("bounsList");
        var newBouns;
        newBouns = bounsList ? JSON.parse(bounsList) : JSON.parse(JSON.stringify(dailyBouns));
        var index = data.index;
        data.status = 1;
        newBouns.splice(index, 1, data);
        cc.sys.localStorage.setItem("bounsList", JSON.stringify(newBouns));
        cc.sys.localStorage.setItem("getReward", "yes");
        this.recordPlayerGetTimes();
      },
      recordPlayerGetTimes: function recordPlayerGetTimes() {
        var continueTimes = cc.sys.localStorage.getItem("continueTimes");
        if (continueTimes) {
          continueTimes = JSON.parse(continueTimes);
          continueTimes += 1;
          cc.sys.localStorage.setItem("continueTimes", JSON.stringify(continueTimes));
        } else cc.sys.localStorage.setItem("continueTimes", JSON.stringify(1));
        var currentZeroTime;
        currentZeroTime = Math.floor(new Date(new Date().toLocaleDateString()).getTime() / 1e3);
        cc.sys.localStorage.setItem("getBounsTime", JSON.stringify(currentZeroTime));
      },
      updateBouns_coundGet: function updateBouns_coundGet(index) {
        if (7 == index) return;
        var bounsList = cc.sys.localStorage.getItem("bounsList");
        if (!bounsList) {
          var newBouns = JSON.parse(JSON.stringify(dailyBouns));
          newBouns[index].status = 2;
          cc.sys.localStorage.setItem("bounsList", JSON.stringify(newBouns));
        } else {
          bounsList = JSON.parse(bounsList);
          bounsList[index].status = 2;
          cc.sys.localStorage.setItem("bounsList", JSON.stringify(bounsList));
        }
      },
      judgeIsCurrentDay: function judgeIsCurrentDay() {
        var continueTimes = cc.sys.localStorage.getItem("continueTimes");
        if (continueTimes) {
          continueTimes = JSON.parse(continueTimes);
          return continueTimes;
        }
        return 0;
      },
      judgeIsSeven: function judgeIsSeven() {
        var bounsList = cc.sys.localStorage.getItem("bounsList");
        if (bounsList) {
          bounsList = JSON.parse(bounsList);
          var count = 0;
          for (var i = 0; i < bounsList.length; i++) 1 == bounsList[i].status && count++;
          return 6 == count;
        }
        return false;
      },
      setSevenDaysView: function setSevenDaysView() {
        var isSeven = this.judgeIsSeven();
        if (isSeven) {
          var continueTimes = cc.sys.localStorage.getItem("continueTimes");
          if (!continueTimes || 6 != JSON.parse(continueTimes)) if (JSON.parse(continueTimes) >= 7) {
            this.seven_Bg.spriteFrame = this.bgViewList[0];
            this.seven_mark.active = true;
            this.seven_name.active = true;
            this.seven_light.active = false;
            this.sevenNode.getComponent(cc.Button).interactable = false;
          } else {
            this.seven_Bg.spriteFrame = this.bgViewList[2];
            this.seven_mark.active = false;
            this.seven_name.active = true;
          } else {
            var sevenGet = cc.sys.localStorage.getItem("sevenReward");
            if (!sevenGet) {
              this.seven_Bg.spriteFrame = this.bgViewList[1];
              this.seven_mark.active = false;
              this.seven_light.active = true;
              this.seven_name.active = false;
              this.sevenNode.getComponent(cc.Button).interactable = true;
              this.seven_light.runAction(cc.rotateBy(2, 90).repeatForever());
            } else {
              this.seven_Bg.spriteFrame = this.bgViewList[0];
              this.seven_mark.active = true;
              this.seven_name.active = true;
              this.seven_light.active = false;
              this.sevenNode.getComponent(cc.Button).interactable = false;
            }
          }
        } else {
          this.seven_Bg.spriteFrame = this.bgViewList[2];
          this.seven_mark.active = false;
          this.seven_name.active = true;
          this.sevenNode.getComponent(cc.Button).interactable = false;
        }
      },
      getSevenDaysReward: function getSevenDaysReward() {
        var sevenReward = [ {
          type: 0,
          number: 300
        }, {
          type: 1,
          number: 1
        }, {
          type: 2,
          number: 1
        }, {
          type: 3,
          number: 1
        } ];
        var _loop = function _loop(i) {
          GameData.changeGameTool("gameTool", sevenReward[i].number, sevenReward[i].type - 1, true);
          setTimeout(function() {
            0 == sevenReward[i].type ? cc.systemEvent.emit("TOOLOBTAIN", sevenReward[i]) : cc.systemEvent.emit("DAILY_BOUNS_ANIMA", sevenReward[i]);
          }, 2e3 * i);
        };
        for (var i = 0; i < sevenReward.length; i++) _loop(i);
        cc.sys.localStorage.setItem("sevenReward", "yes");
        cc.sys.localStorage.setItem("getReward", "yes");
        this.recordPlayerGetTimes();
        cc.director.screenDialog.hideDailyBouns();
      },
      clickToGetReward: function clickToGetReward() {
        var isSeven = this.judgeIsSeven();
        cc.director.SoundManager.playSound("daily");
        if (isSeven) {
          var continueTimes = cc.sys.localStorage.getItem("continueTimes");
          if (!!continueTimes && 6 == JSON.parse(continueTimes)) {
            var sevenGet = cc.sys.localStorage.getItem("sevenReward");
            !sevenGet && this.getSevenDaysReward();
          }
        } else {
          var index = this.judgeIsCurrentDay();
          var bounsList = cc.sys.localStorage.getItem("bounsList");
          if (!!bounsList) {
            bounsList = JSON.parse(bounsList);
            if (2 == bounsList[index].status) {
              0 == bounsList[index].type ? cc.systemEvent.emit("TOOLOBTAIN", bounsList[index]) : cc.systemEvent.emit("DAILY_BOUNS_ANIMA", bounsList[index]);
              cc.director.screenDialog.hideDailyBouns();
              this.updateBouns_got(bounsList[index]);
            }
            1 == bounsList[index].status;
          }
        }
      },
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        var bouns = cc.sys.localStorage.getItem("bounsList");
        if (!bouns) {
          var index = this.judgeIsCurrentDay();
          this.updateBouns_coundGet(index);
          var _bouns = cc.sys.localStorage.getItem("bounsList");
          _bouns = JSON.parse(_bouns);
          this.initDailyBouns(_bouns);
          cc.sys.localStorage.removeItem("getReward");
        } else {
          bouns = JSON.parse(bouns);
          this.initDailyBouns(bouns);
        }
        this.setSevenDaysView();
        var isReward = cc.sys.localStorage.getItem("getReward");
        !isReward || (this.node.getChildByName("claim").getComponent(cc.Button).interactable = false);
      },
      hideView: function hideView() {
        this.node.active = false;
        this.daily_btn.scale = 1;
        this.daily_btn.getComponent(cc.Animation).stop("dailyIconAnima");
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  dialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c6f0qx/5NE051cS+Kno6W3", "dialog");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        mask: cc.Node,
        resultPrompt: require("./component/resultPrompt"),
        retryPrompt: require("./component/retryPrompt"),
        container: require("./component/container"),
        goalDisplay: require("./component/goalDisplay"),
        setting: require("./mainScreen/setting"),
        videoReward: require("./component/viewReward"),
        resultTips: require("./component/resultTips"),
        gameToolShop: require("./mainScreen/gameToolShop"),
        freeCoinsPanel: require("./mainScreen/freeCoinsPanel"),
        quitTips: require("./component/quitTips"),
        progressBar: require("./component/progressBar"),
        tips: cc.Node,
        tipsWordList: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        cc.director.dialogScript = this;
        cc.systemEvent.on("GAMEVIEW_TIPS", this.showTips, this);
        cc.director.keyCode = -1;
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.keyBackDown, this);
      },
      keyBackDown: function keyBackDown(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.back:
          if (-1 == cc.director.keyCode) {
            if (cc.director.toolType > 0) {
              cc.systemEvent.emit("FUNCTION_EXPLAIN_OFF");
              cc.systemEvent.emit("CLEAR_BTN");
              cc.director.toolType = -1;
            }
            this.showQuitView();
          } else {
            1 == cc.director.keyCode && this.resultPrompt.jumpToMainScreen();
            2 == cc.director.keyCode && this.retryPrompt.jumpToMainScreen();
            3 == cc.director.keyCode && this.showRetryPrompt();
            4 == cc.director.keyCode && this.hidePlayerShop();
            5 == cc.director.keyCode && this.hideFreeCoinsPanel();
            6 == cc.director.keyCode && this.hideQuitView();
          }
        }
      },
      hideAllChildrenNode: function hideAllChildrenNode() {
        cc.director.keyCode = -1;
        var children = this.node.children;
        for (var i = 0; i < children.length; i++) children[i].active = false;
      },
      showResultPromptView: function showResultPromptView(list) {
        cc.systemEvent.emit("GAMEMASK_CONTROL", {
          order: 2
        });
        this.hideAllChildrenNode();
        cc.director.keyCode = 1;
        this.mask.active = true;
        this.resultPrompt.showView(list);
      },
      hideResultPromptView: function hideResultPromptView() {
        this.hideAllChildrenNode();
        this.resultPrompt.hideView();
      },
      showRetryPrompt: function showRetryPrompt() {
        this.hideAllChildrenNode();
        cc.director.keyCode = 2;
        this.mask.active = true;
        this.retryPrompt.showView();
        cc.director.SoundManager.playSound("lose");
        window.NativeManager.showInterstitialAd(3);
      },
      hideRetryPrompt: function hideRetryPrompt() {
        this.hideAllChildrenNode();
        this.retryPrompt.hideView();
      },
      showLevelGoal: function showLevelGoal(list) {
        this.goalDisplay.initGoalNumber(list);
      },
      showSettingPanel: function showSettingPanel() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChildrenNode();
        this.mask.active = true;
        this.setting.showView();
      },
      hideSettingPanel: function hideSettingPanel() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChildrenNode();
        this.setting.hideView();
      },
      showVideoRewardView: function showVideoRewardView() {
        this.hideAllChildrenNode();
        cc.director.keyCode = 3;
        this.mask.active = true;
        this.videoReward.showView();
      },
      hideVideoRewardView: function hideVideoRewardView(event) {
        var tag;
        var node = event.target;
        tag = node && "close" == node.name ? 0 : 1;
        this.hideAllChildrenNode();
        this.videoReward.hideView(tag);
      },
      showResultTipsView: function showResultTipsView(type) {
        this.hideAllChildrenNode();
        this.resultTips.showView(type);
      },
      hideResultTipsView: function hideResultTipsView(type) {
        this.hideAllChildrenNode();
        this.resultTips.hideView(type);
      },
      showPlayerShop: function showPlayerShop(type, index) {
        this.hideAllChildrenNode();
        cc.director.keyCode = 4;
        this.mask.active = true;
        this.gameToolShop.showView(type, index);
      },
      hidePlayerShop: function hidePlayerShop() {
        this.hideAllChildrenNode();
        this.gameToolShop.hideView();
      },
      showFreeCoinsPanel: function showFreeCoinsPanel(index) {
        this.hideAllChildrenNode();
        cc.director.keyCode = 5;
        this.mask.active = true;
        this.freeCoinsPanel.showView(index);
      },
      hideFreeCoinsPanel: function hideFreeCoinsPanel() {
        this.hideAllChildrenNode();
        this.freeCoinsPanel.hideView();
      },
      showQuitView: function showQuitView() {
        this.hideAllChildrenNode();
        this.mask.active = true;
        this.quitTips.showView();
        cc.director.keyCode = 6;
      },
      hideQuitView: function hideQuitView() {
        this.hideAllChildrenNode();
        this.quitTips.hideView();
      },
      showTips: function showTips(event) {
        this.tips.stopAllActions();
        this.tips.scale = .1;
        this.tips.active = true;
        var adSprite = this.tips.getChildByName("adSprite").getComponent(cc.Sprite);
        adSprite.spriteFrame = this.tipsWordList[event.wordIndex];
        var action = cc.sequence(cc.spawn(cc.scaleTo(.5, 1), cc.fadeIn(.5)), cc.delayTime(1), cc.fadeOut(.5));
        action.tag = 1;
        this.tips.runAction(action);
      },
      start: function start() {
        this.setting.loadEffectSetting();
        this.setting.loadBgmSetting();
      }
    });
    cc._RF.pop();
  }, {
    "./component/container": "container",
    "./component/goalDisplay": "goalDisplay",
    "./component/progressBar": "progressBar",
    "./component/quitTips": "quitTips",
    "./component/resultPrompt": "resultPrompt",
    "./component/resultTips": "resultTips",
    "./component/retryPrompt": "retryPrompt",
    "./component/viewReward": "viewReward",
    "./mainScreen/freeCoinsPanel": "freeCoinsPanel",
    "./mainScreen/gameToolShop": "gameToolShop",
    "./mainScreen/setting": "setting"
  } ],
  expItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "754cfcQn/ZG3ZJF9ECKhazo", "expItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        label_expNumber: cc.Label
      },
      updateExpNumber: function updateExpNumber(num) {
        this.label_expNumber.string = new String(num);
        this.label_expNumber.node.getComponent(cc.Widget).left = 20;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  farmDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a8d9eRmbFF9ZxSRrHjEXmk", "farmDialog");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rank_farm: require("./rank_farm"),
        farm_shop: require("./farm_shop"),
        farm_friend: require("./farm_friend"),
        farm_warehouse: require("./farm_warehouse"),
        farm_plant: require("./farm_plantPrompt"),
        farm_operate: require("./farm_operateInterface"),
        farm_props: require("./farm_propsPrompt"),
        farm_levelUp: require("./farm_levelUp"),
        farm_message: require("./farm_message"),
        farmLevel_levelUp: require("./farmLevel_levelUp"),
        farm_freeCoins: require("../mainScreen/freeCoinsPanel"),
        farm_landUnlock: require("./farm_unlockLand"),
        farm_plantUnlock: require("./farm_plantUnlock"),
        farm_exchange: require("./farm_exchange"),
        farm_offlineExp: require("./farm_offlineExp"),
        mask: cc.Node,
        node_farm_header: cc.Node,
        node_farm_btnArea: cc.Node
      },
      onLoad: function onLoad() {
        cc.director.farmDialog = this;
        this.farm_operate.addOperateListener();
        cc.systemEvent.on("SHOW_LEVELUP", this.showLevelUpPrompt, this);
        cc.systemEvent.on("SHOW_PLANT_UNLOCK", this.showPlantUnlockPrompt, this);
      },
      hideFarmChild: function hideFarmChild() {
        var children = this.node.children;
        var len = children.length;
        for (var i = 0; i < len; i++) children[i].active = false;
      },
      showFarmShop: function showFarmShop() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_shop.showView();
      },
      hideFarmShop: function hideFarmShop() {
        this.hideFarmChild();
        this.farm_shop.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      showWarehouseView: function showWarehouseView() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_warehouse.showView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hideWarehouseView: function hideWarehouseView() {
        this.hideFarmChild();
        this.farm_warehouse.hideView();
      },
      showPlantPrompt: function showPlantPrompt() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_plant.showView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hidePlantPrompt: function hidePlantPrompt() {
        this.mask.active = false;
        this.farm_plant.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hideFarmAndBtn: function hideFarmAndBtn() {
        this.node_farm_header.active = true;
        this.node_farm_btnArea.active = false;
      },
      showFarmAndBtn: function showFarmAndBtn() {
        this.hideFarmChild();
        this.node_farm_header.active = true;
        this.node_farm_btnArea.active = true;
      },
      showOperateView: function showOperateView() {
        this.hideFarmAndBtn();
        this.farm_operate.showView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hideOperateView: function hideOperateView() {
        this.farm_operate.hideView();
        this.showFarmAndBtn();
        cc.director.SoundManager.playSound("farm_btn");
      },
      showPropsView: function showPropsView() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_props.showView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hidePropsView: function hidePropsView() {
        this.mask.active = false;
        this.farm_props.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hideOperateView1: function hideOperateView1() {
        this.farm_operate.hideView();
        this.showFarmAndBtn();
        this.showPropsView();
      },
      showLevelUpPrompt: function showLevelUpPrompt(event) {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_levelUp.showView(event.type);
      },
      hideLevelUpPrompt: function hideLevelUpPrompt() {
        this.hideFarmChild();
        this.farm_levelUp.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      showMessagePrompt: function showMessagePrompt() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_message.showView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hideMessagePrompt: function hideMessagePrompt() {
        this.farm_message.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      showFarmLevelUpPrompt: function showFarmLevelUpPrompt() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farmLevel_levelUp.showView();
      },
      hideFarmLevelUpPrompt: function hideFarmLevelUpPrompt() {
        this.hideFarmChild();
        this.farmLevel_levelUp.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      showFreeCoinsByVideo: function showFreeCoinsByVideo() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_freeCoins.showView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      hideFreeCoinsByVideo: function hideFreeCoinsByVideo() {
        this.hideFarmChild();
        this.farm_freeCoins.hideView();
        cc.director.SoundManager.playSound("farm_btn");
      },
      showLandUnlockPormpt: function showLandUnlockPormpt(obj) {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_landUnlock.showView(obj);
      },
      hideLandUnlockPropmt: function hideLandUnlockPropmt() {
        this.hideFarmChild();
        this.farm_landUnlock.hideView();
      },
      showPlantUnlockPrompt: function showPlantUnlockPrompt(event) {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_plantUnlock.showView(event.type);
      },
      hidePlantUnlockPrompt: function hidePlantUnlockPrompt() {
        this.hideFarmChild();
        this.farm_plantUnlock.hideView();
      },
      showExchangePrompt: function showExchangePrompt() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_exchange.showView();
      },
      hideExchangePrompt: function hideExchangePrompt() {
        this.hideFarmChild();
        this.farm_exchange.hideView();
      },
      showOfflineExpPrompt: function showOfflineExpPrompt() {
        this.hideFarmChild();
        this.mask.active = true;
        this.farm_offlineExp.showView();
      },
      hideOfflineExpPrompt: function hideOfflineExpPrompt() {
        this.hideFarmChild();
        this.farm_offlineExp.hideView();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../mainScreen/freeCoinsPanel": "freeCoinsPanel",
    "./farmLevel_levelUp": "farmLevel_levelUp",
    "./farm_exchange": "farm_exchange",
    "./farm_friend": "farm_friend",
    "./farm_levelUp": "farm_levelUp",
    "./farm_message": "farm_message",
    "./farm_offlineExp": "farm_offlineExp",
    "./farm_operateInterface": "farm_operateInterface",
    "./farm_plantPrompt": "farm_plantPrompt",
    "./farm_plantUnlock": "farm_plantUnlock",
    "./farm_propsPrompt": "farm_propsPrompt",
    "./farm_shop": "farm_shop",
    "./farm_unlockLand": "farm_unlockLand",
    "./farm_warehouse": "farm_warehouse",
    "./rank_farm": "rank_farm"
  } ],
  farmLevel_levelUp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2eccssHxxAY7EAr0mb3QWU", "farmLevel_levelUp");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        node_light: cc.Node,
        label_lastLevel: cc.Label,
        label_nextLevel: cc.Label,
        node_particle: cc.ParticleSystem,
        node_farmIcon: cc.Node
      },
      light_rotation: function light_rotation() {
        var action = cc.rotateBy(2, 180).repeatForever();
        this.node_light.runAction(action);
      },
      updateLevel: function updateLevel() {
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        this.changeLabelString(this.label_lastLevel, farmInfo.level - 1);
        this.changeLabelString(this.label_nextLevel, farmInfo.level);
        this.currentLevel = farmInfo.level;
      },
      showView: function showView() {
        this.node.active = true;
        FarmUtils.showPromptWithScale(this.node);
        this.updateLevel();
        this.light_rotation();
        this.playFarmLevelUpAnimation();
      },
      hideView: function hideView() {
        this.node_light.stopAllActions();
        this.node.active = false;
        cc.director.FarmManager.isLandUnlockBylevelUp();
        this.isNeedShowPlantUnlockPrompt();
      },
      isNeedShowPlantUnlockPrompt: function isNeedShowPlantUnlockPrompt() {
        var index = FarmData.plantLimitedList.indexOf(this.currentLevel);
        index >= 0 && cc.systemEvent.emit("SHOW_PLANT_UNLOCK", {
          type: index
        });
      },
      changeLabelString: function changeLabelString(label, str) {
        label.string = "lv." + new String(str);
      },
      playFarmLevelUpAnimation: function playFarmLevelUpAnimation() {
        var anima = this.node_farmIcon.getComponent(cc.Animation);
        anima.play("levelUp_farm");
        var duration = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          this.playParticleAnimation();
        }, duration);
      },
      playParticleAnimation: function playParticleAnimation() {
        this.node_particle.node.active = true;
        this.node_particle.resetSystem();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_exchange: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35bcdgEBtZMGImAwrRGyQjN", "farm_exchange");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    var changeRate = FarmData.changeRate;
    cc.Class({
      extends: cc.Component,
      properties: {
        node_icon: cc.Node,
        node_cost: cc.Node,
        list_cost: [ cc.SpriteFrame ],
        node_view: cc.Node,
        list_view: [ cc.SpriteFrame ],
        node_exchangeNumber: cc.Node,
        node_currency: cc.Node,
        node_btnDiamond: cc.Node,
        list_btnDiamond: [ cc.SpriteFrame ],
        node_btnCoins: cc.Node,
        list_btnCoins: [ cc.SpriteFrame ],
        node_coinsNumber: cc.Node,
        node_diamondNumber: cc.Node
      },
      showView: function showView() {
        this.node.active = true;
        this.node_currency.active = false;
        FarmUtils.showPromptWithScale(this.node);
        this.updateCoinsAndDiamondDisplay();
        this.scheduleOnce(function() {
          this.showDiamondAndCoins(this.node_currency);
        }, .5);
        this.diamondExchangeToCoins();
      },
      showDiamondAndCoins: function showDiamondAndCoins(node) {
        var winSize = cc.view.getDesignResolutionSize();
        var startPos = cc.v2(0, (winSize.height + node.height) / 2);
        var endPos = cc.v2(0, (winSize.height - node.height) / 2);
        node.position = startPos;
        node.active = true;
        var action = cc.moveTo(.2, endPos);
        node.runAction(action);
      },
      hideView: function hideView() {
        this.node.active = false;
      },
      diamondExchangeToCoins: function diamondExchangeToCoins() {
        this.changeMode = 1;
        this.changeSpriteView(this.node_view, this.list_view, 0);
        this.changeSpriteView(this.node_icon, this.list_cost, 1);
        this.changeSpriteView(this.node_btnDiamond, this.list_btnDiamond, 0);
        this.changeSpriteView(this.node_btnCoins, this.list_btnCoins, 1);
        this.unitConvert(100, this.changeMode);
      },
      coinsExchangeToCoins: function coinsExchangeToCoins() {
        this.changeMode = 2;
        this.changeSpriteView(this.node_view, this.list_view, 1);
        this.changeSpriteView(this.node_icon, this.list_cost, 0);
        this.changeSpriteView(this.node_btnDiamond, this.list_btnDiamond, 1);
        this.changeSpriteView(this.node_btnCoins, this.list_btnCoins, 0);
        this.unitConvert(1e4, this.changeMode);
      },
      changeSpriteView: function changeSpriteView(node, list, type) {
        node.getComponent(cc.Sprite).spriteFrame = list[type];
      },
      changeLabelContent: function changeLabelContent(node, str) {
        node.getComponent(cc.Label).string = new String(str);
      },
      unitConvert: function unitConvert(number, mode) {
        if (1 == mode) {
          this.oringeNumber = number * changeRate;
          this.exchangeNumber = number;
          this.changeLabelContent(this.node_cost, this.oringeNumber);
          this.changeLabelContent(this.node_exchangeNumber, this.exchangeNumber);
        } else if (2 == mode) {
          this.exchangeNumber = number;
          this.oringeNumber = this.exchangeNumber / changeRate;
          this.changeLabelContent(this.node_cost, this.oringeNumber);
          this.changeLabelContent(this.node_exchangeNumber, this.exchangeNumber);
        }
      },
      addExchangeNumber: function addExchangeNumber() {
        1 == this.changeMode ? this.exchangeNumber += 100 : 2 == this.changeMode && (this.exchangeNumber += 1e4);
        this.unitConvert(this.exchangeNumber, this.changeMode);
      },
      reduceExchangeNumber: function reduceExchangeNumber() {
        if (1 == this.changeMode) {
          if (this.exchangeNumber <= 100) return;
          this.exchangeNumber -= 100;
        } else if (2 == this.changeMode) {
          if (this.exchangeNumber <= 1e4) return;
          this.exchangeNumber -= 1e4;
        }
        this.unitConvert(this.exchangeNumber, this.changeMode);
      },
      exchange: function exchange() {
        var diamond = FarmUtils.getCoins();
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        if (1 == this.changeMode) if (farmInfo.coin >= this.oringeNumber) {
          diamond += this.exchangeNumber;
          FarmUtils.saveCoins(diamond);
          farmInfo.coin -= this.oringeNumber;
          FarmUtils.setLocalData(farmInfo, "localFarmInfo");
          this.updateCoinsAndDiamondDisplay();
          cc.systemEvent.emit("SHOW_WORD_NOTICE", {
            code: 1007
          });
        } else cc.systemEvent.emit("SHOW_WORD_NOTICE", {
          code: 1006
        }); else if (diamond > this.oringeNumber) {
          farmInfo.coin += this.exchangeNumber;
          diamond -= this.oringeNumber;
          FarmUtils.saveCoins(diamond);
          FarmUtils.setLocalData(farmInfo, "localFarmInfo");
          this.updateCoinsAndDiamondDisplay();
          cc.systemEvent.emit("SHOW_WORD_NOTICE", {
            code: 1007
          });
        } else cc.systemEvent.emit("SHOW_WORD_NOTICE", {
          code: 1005
        });
      },
      updateCoinsAndDiamondDisplay: function updateCoinsAndDiamondDisplay() {
        var diamond = FarmUtils.getCoins();
        var coin = FarmUtils.getObjectProperty("localFarmInfo", "coin");
        this.changeLabelContent(this.node_diamondNumber, diamond);
        this.changeLabelContent(this.node_coinsNumber, coin);
        cc.systemEvent.emit("UPDATE_FARM_COINS");
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_fountain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01d44NesHRMPJuVWjOcVRdB", "farm_fountain");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        prefab_fountain_small: cc.Prefab,
        node_fountain_big: cc.Node,
        label_fountain_countdown: cc.Label
      },
      onLoad: function onLoad() {
        this.posList = [ cc.v2(-300, -250), cc.v2(320, -20), cc.v2(-50, 240) ];
        cc.systemEvent.on("STARTOVER_AUTOWATER", this.startoverAutoWater, this);
        cc.director.isAutoWater = false;
        cc.director.isAutoInsec = false;
      },
      bigfountaianStartover: function bigfountaianStartover() {
        var anima = this.node_fountain_big.getComponent(cc.Animation);
        anima.play("fountain");
      },
      smallFountainStartover: function smallFountainStartover(num) {
        var anima;
        for (var i = 0; i < this.posList.length; i++) {
          var sFountain = cc.instantiate(this.prefab_fountain_small);
          sFountain.parent = this.node;
          sFountain.position = this.posList[i];
          anima = sFountain.getComponent(cc.Animation);
          anima.play("fountain_s");
          if (num == i) break;
        }
      },
      startoverAutoWater: function startoverAutoWater(event) {
        cc.director.SoundManager.playSound("farm_waterMachine");
        var type = event.type;
        this.bigfountaianStartover();
        9 == type ? this.smallFountainStartover(type - 9) : 10 == type ? this.smallFountainStartover(type - 9) : 11 == type && this.smallFountainStartover(type - 9);
        1 == event.mode && this.recordPropsDetail(type);
      },
      recordPropsDetail: function recordPropsDetail(type) {
        var autoProp = FarmUtils.getLocalData("autoProp");
        if (autoProp) {
          var addtime = FarmData.propShopList[type].effectTime * FarmData.costTime.ONE_MIN;
          var current = FarmUtils.getServerTime();
          if (type >= 8 && type < 12) {
            if (current > autoProp.autowater.endTime) {
              autoProp.autowater.endTime = current + addtime;
              autoProp.autowater.grade = type;
            } else {
              autoProp.autowater.endTime += addtime;
              autoProp.autowater.grade < type && (autoProp.autowater.grade = type);
            }
            this.endTime = autoProp.autowater.endTime;
          } else if (type >= 12 && type < 15) if (current > autoProp.autoInsec.endTime) {
            autoProp.autoInsec.endTime = current + addtime;
            autoProp.autoInsec.grade = type;
          } else {
            autoProp.autoInsec.endTime += addtime;
            autoProp.autoInsec.grade < type && (autoProp.autoInsec.grade = type);
          }
        } else {
          autoProp = {};
          var effectTime = FarmData.propShopList[type].effectTime * FarmData.costTime.ONE_MIN;
          var endTime = FarmUtils.getServerTime() + effectTime;
          var autowater = {};
          var autoInsec = {};
          if (type >= 8 && type < 12) {
            autowater.endTime = endTime;
            autowater.grade = type;
            autoInsec.endTime = -1;
            autoInsec.grade = -1;
          } else if (type >= 12 && type < 15) {
            autowater.endTime = -1;
            autowater.grade = -1;
            autoInsec.endTime = endTime;
            autoInsec.grade = grade;
          }
          autoProp.autowater = autowater;
          autoProp.autoInsec = autoInsec;
        }
        console.log(autoProp);
        FarmUtils.setLocalData(autoProp, "autoProp");
        this.isAutoWater();
      },
      isAutoWater: function isAutoWater() {
        var current = FarmUtils.getServerTime();
        var autoProp = FarmUtils.getLocalData("autoProp");
        if (!autoProp) this.label_fountain_countdown.node.active = false; else if (autoProp.autowater.endTime > current) {
          this.label_fountain_countdown.node.active = true;
          cc.systemEvent.emit("STARTOVER_AUTOWATER", {
            type: autoProp.autowater.grade,
            mode: 2
          });
          this.endTime = autoProp.autowater.endTime;
          console.log(this.endTime, "122");
          this.label_fountain_countdown.string = FarmUtils.countdown(this.endTime, 1);
          this.schedule(this.showFountainCountdown, 1);
          cc.director.isAutoWater = true;
        } else this.label_fountain_countdown.node.active = false;
      },
      showFountainCountdown: function showFountainCountdown() {
        var str = FarmUtils.countdown(this.endTime, 1);
        this.label_fountain_countdown.string = new String(str);
      },
      start: function start() {
        this.isAutoWater();
      }
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_friend: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f8daCftDlLarg8I0/Ty9CT", "farm_friend");
    "use strict";
    var ServerManager = require("../ServerManager");
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    var NativeManager = require("../NativeManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        item_friend: cc.Prefab,
        itemContainer: cc.Node,
        label_aciton_number: cc.Label,
        btn_askHelp: cc.Button,
        scrollView: cc.ScrollView,
        mask: cc.Node,
        helpPrompt: cc.Node,
        node_btn_claim: cc.Node,
        node_tips: cc.Node
      },
      onLoad: function onLoad() {
        this.node.on("helpFriendWater", this.helpFriendWater, this);
      },
      initFriendContainer: function initFriendContainer() {
        var list = this.friendList;
        console.log(this.friendList);
        if (!list || list.length <= 0) {
          cc.log("no data, please try later!");
          return;
        }
        var len = list.length;
        var index = -1;
        for (var i = 0; i < len; i++) {
          var item = cc.instantiate(this.item_friend);
          item.parent = this.itemContainer;
          list[i].index = i;
          if (1 == list[i].self) {
            item.getComponent("item_friend").initItem_Friend(list[i], true);
            index = i;
          } else item.getComponent("item_friend").initItem_Friend(list[i]);
        }
        if (index >= 0) {
          var data = list[index];
          this.onList(data);
        } else {
          this.btn_askHelp.node.active = true;
          this.btn_askHelp.interactable = true;
          this.node_btn_claim.active = false;
          this.node_tips.active = true;
        }
      },
      helpFriendWater: function helpFriendWater(event) {
        var index = event.detail.index;
        var count = event.detail.count;
        var id = event.detail.id;
        var actionMove = this.getHelpTime();
        console.log(count, "54");
        if (actionMove > 0 && count < 5) {
          actionMove--;
          cc.sys.localStorage.setItem("helpLimited", actionMove);
          var childNode = this.itemContainer.children[index];
          childNode.getComponent("item_friend").updateHelpCount(count + 1);
          this.updateActionMoves(actionMove);
          var stamp = FarmUtils.getServerTime();
          cc.sys.localStorage.setItem("actionMovesCostTime", stamp);
          var tempObj = FarmData.OperationReward[5];
          var exp = tempObj.exp;
          var coins = tempObj.coins;
          cc.systemEvent.emit("UPDATE_FARM", {
            exp: exp,
            coins: coins,
            worldPos: cc.v2(0, 0)
          });
          var data = {};
          data.id = id;
          data.time = stamp;
          console.log(data);
          this.saveUserOperate(data);
        } else cc.log("error:sorry,you have no action moves or had finished help!");
      },
      getWaterFriendList: function getWaterFriendList() {
        var self = this;
        var uid, localData = FarmUtils.getLocalData("localData");
        uid = localData ? "" == localData.uid ? window.NativeManager.getUid() : localData.uid : window.NativeManager.getUid();
        var callback = function callback(res) {
          !res || (self.friendList = res.data.list);
        };
      },
      saveUserOperate: function saveUserOperate(item) {
        this.needSubmitData.push(item);
      },
      submitWaterDataToServer: function submitWaterDataToServer() {
        if (this.needSubmitData.length <= 0) return;
        console.log(JSON.stringify(this.needSubmitData));
        FarmUtils.updateFarmData(2, JSON.stringify(this.needSubmitData), 0);
        this.needSubmitData = [];
      },
      getHelpTime: function getHelpTime() {
        var time = cc.sys.localStorage.getItem("helpLimited");
        time = time ? parseInt(time) >= 0 ? parseInt(time) : 0 : 3;
        return time;
      },
      updateActionMoves: function updateActionMoves(num) {
        this.label_aciton_number.string = num ? new String(num) : new String(this.getHelpTime());
      },
      getActionsMovesByVideo: function getActionsMovesByVideo() {
        var watchTimes = this.getVideoWatchTimes();
        if (watchTimes > 0) {
          var time = this.getHelpTime();
          time += 2;
          time >= 5 && (time = 5);
          this.updateActionMoves(time);
          cc.sys.localStorage.setItem("helpLimited", time);
          watchTimes--;
          cc.sys.localStorage.setItem("farmFriendVideWatchTimes", watchTimes);
        } else console.log("tips:no enough times");
      },
      askWaterHelp: function askWaterHelp() {
        var item = cc.instantiate(this.item_friend);
        var myInfo = this.composeMyInfo();
        item.getComponent("item_friend").initItem_Friend(myInfo, true);
        item.parent = this.itemContainer;
        this.scrollView.scrollToBottom(1);
      },
      onList: function onList(data) {
        if (data.helpcount > 0) {
          this.btn_askHelp.node.active = true;
          this.btn_askHelp.interactable = false;
          this.node_btn_claim.active = false;
          this.node_tips.active = true;
        } else {
          this.node_btn_claim.active = true;
          this.btn_askHelp.node.active = false;
          this.node_tips.active = false;
        }
      },
      composeMyInfo: function composeMyInfo() {
        var farmInfo = cc.game.FarmUtils.getLocalData("localFarmInfo");
        var localData = cc.game.FarmUtils.getLocalData("localData");
        var myInfo = {};
        myInfo.fmlevel = farmInfo.level;
        myInfo.helpCount = 0;
        myInfo.name = localData.name;
        myInfo.country = localData.country;
        myInfo.self = 1;
        return myInfo;
      },
      judgeIsSameDay: function judgeIsSameDay() {
        var serverTime = cc.sys.localStorage.getItem("ServerTime");
        serverTime = parseInt(serverTime);
        var actionMovesCostTime = cc.sys.localStorage.getItem("actionMovesCostTime");
        var isSame;
        if (actionMovesCostTime) {
          actionMovesCostTime = parseInt(actionMovesCostTime);
          isSame = cc.game.FarmUtils.campareTwoStamp(serverTime, actionMovesCostTime);
        } else isSame = false;
        if (isSame) console.log("heiheihei"); else {
          console.log("gee~~~~~~");
          var t = cc.game.FarmUtils.getServerTime();
          cc.sys.localStorage.setItem("actionMovesCostTime", t);
          cc.sys.localStorage.setItem("farmFriendVideWatchTimes", 1);
          cc.sys.localStorage.setItem("helpLimited", 3);
        }
      },
      getVideoWatchTimes: function getVideoWatchTimes() {
        var videoWatchTimes = cc.sys.localStorage.getItem("farmFriendVideWatchTimes");
        videoWatchTimes = videoWatchTimes ? parseInt(videoWatchTimes) : 1;
        return videoWatchTimes;
      },
      showView: function showView() {
        this.restartView();
        this.judgeIsSameDay();
        this.node.active = true;
        this.fromTopToCenter(this.node);
        this.getWaterFriendList();
        this.scheduleOnce(function() {
          this.initFriendContainer();
          cc.systemEvent.emit("HIDE_CACHE_ANIMA");
        }, 1.5);
        this.updateActionMoves();
        this.needSubmitData = [];
      },
      hideView: function hideView() {
        this.fromCenterToTop(this.node);
        this.submitWaterDataToServer();
        cc.systemEvent.emit("HIDE_CACHE_ANIMA");
      },
      showGetHelpRewardPrompt: function showGetHelpRewardPrompt() {
        this.mask.active = true;
        this.helpPrompt.active = true;
      },
      hideGetHelpRewardPrompt: function hideGetHelpRewardPrompt() {
        this.mask.active = false;
        this.helpPrompt.active = false;
      },
      getDoubleReward: function getDoubleReward() {
        var self = this;
        self.hideGetHelpRewardPrompt();
        cc.director.farmDialog.hideFarmFriend();
        cc.systemEvent.emit("WATER_ALLLAND_TIME", {
          number: 10
        });
      },
      getReward: function getReward() {
        this.hideGetHelpRewardPrompt();
        cc.director.farmDialog.hideFarmFriend();
        cc.systemEvent.emit("WATER_ALLLAND_TIME", {
          number: 5
        });
      },
      restartView: function restartView() {
        this.btn_askHelp.node.active = false;
        this.node_btn_claim.active = false;
        this.node_tips.active = false;
        this.itemContainer.removeAllChildren();
      },
      fromTopToCenter: function fromTopToCenter(node) {
        var windowSize = cc.view.getDesignResolutionSize();
        node.position = cc.v2(0, (windowSize.height + node.height) / 2);
        var action = cc.sequence(cc.moveTo(.5, cc.v2(0, 0)).easing(cc.easeBackOut(3)), cc.callFunc(function() {
          cc.systemEvent.emit("SHOW_CACHE_ANIMA");
        }));
        node.runAction(action);
      },
      fromCenterToTop: function fromCenterToTop(node) {
        var windowSize = cc.view.getDesignResolutionSize();
        var action = cc.sequence(cc.moveTo(.5, cc.v2(0, (windowSize.height + node.height) / 2)).easing(cc.easeBackIn(3)), cc.callFunc(function() {
          node.active = false;
          cc.director.farmDialog.mask.active = false;
        }));
        node.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../NativeManager": "NativeManager",
    "../ServerManager": "ServerManager",
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_header: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0f659PhZkpI15GGUeIUALc1", "farm_header");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        progressBar: cc.ProgressBar,
        label_lv: cc.Label,
        label_coins: cc.Label,
        icon: cc.Node
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("UPDATE_FARM_LEVEL", this.updateLevel, this);
        cc.systemEvent.on("UPDATE_FARM_COINS", this.updateCoins, this);
        cc.systemEvent.on("UPDATE_FARM_PROGRESS", this.updateProgressBar, this);
      },
      updateProgressBar: function updateProgressBar(event) {
        this.progressBar.progress = event.num;
        console.log(event.num, "progerssBar 25");
        this.icon.runAction(cc.sequence(cc.scaleTo(.2, 1.1), cc.scaleTo(.2, .9), cc.scaleTo(.2, 1)));
        event.islevelUp && cc.director.farmDialog.showFarmLevelUpPrompt();
        this.updateLevel();
        this.updateCoins();
      },
      updateLevel: function updateLevel() {
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        if (farmInfo) {
          this.label_lv.string = new String(farmInfo.level);
          this.label_lv.node.getChildByName("Lv").getComponent(cc.Widget).left = -30;
        } else this.label_lv.string = "1";
      },
      updateCoins: function updateCoins(event) {
        var self = this;
        console.log("updateCoins event : " + event);
        if (event) if (0 == event.number) {
          var coins = FarmUtils.getObjectProperty("localFarmInfo", "coin");
          coins || (coins = 0);
          self.label_coins.string = new String(coins);
        } else FarmUtils.numberRoll(this.label_coins, event.number); else {
          var _coins = FarmUtils.getObjectProperty("localFarmInfo", "coin");
          _coins || (_coins = 0);
          self.label_coins.string = new String(_coins);
        }
        cc.systemEvent.emit("UPDATE_LAND_STATUE");
      },
      updateCurrentProgress: function updateCurrentProgress() {
        var farmInfo = FarmUtils.getLocalData("localFarmInfo");
        if (farmInfo) {
          var num = farmInfo.exp / FarmData.getLevelUpExp(farmInfo.level + 1);
          cc.systemEvent.emit("UPDATE_FARM_PROGRESS", {
            num: num
          });
        } else cc.systemEvent.emit("UPDATE_FARM_PROGRESS", {
          num: .01
        });
      },
      init: function init() {
        this.updateLevel();
        this.updateCoins();
        this.updateCurrentProgress();
      },
      start: function start() {
        this.init();
      }
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_levelUp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02d47cRIMpPu4YFcCWqb37W", "farm_levelUp");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        sprite_view: cc.Sprite,
        label_Level_current: cc.Label,
        label_Level_next: cc.Label,
        label_produce_current: cc.Label,
        label_produce_next: cc.Label,
        node_bg_light: cc.Node,
        list_view: [ cc.SpriteFrame ],
        node_particle: cc.ParticleSystem,
        node_animation: cc.Node
      },
      lightRatation: function lightRatation() {
        var action = cc.rotateBy(6, 360).repeatForever();
        this.node_bg_light.runAction(action);
      },
      showView: function showView(type) {
        this.node.active = true;
        FarmUtils.showPromptWithScale(this.node);
        this.updateView(type);
        this.updateLevel(type);
        this.updateProduce(type);
        this.lightRatation();
        this.playParticleAnimation();
        this.playAnimation(this.node_animation);
      },
      hideView: function hideView() {
        this.node_animation.active = false;
        this.node.active = false;
        this.node_bg_light.stopAllActions();
      },
      updateLevel: function updateLevel(type) {
        var level = FarmUtils.getDataProperty(type, "seedData", "level");
        this.updateLabelString(this.label_Level_next, level);
        this.updateLabelString(this.label_Level_current, level - 1);
      },
      updateProduce: function updateProduce(type) {
        var level = FarmUtils.getDataProperty(type, "seedData", "level");
        var p1 = FarmData.getPlantProduce(level - 1, type);
        var p2 = FarmData.getPlantProduce(level, type);
        this.updateLabelString(this.label_produce_current, p1);
        this.updateLabelString(this.label_produce_next, p2);
      },
      updateView: function updateView(type) {
        this.sprite_view.spriteFrame = this.list_view[type];
      },
      updateLabelString: function updateLabelString(label, str) {
        label.string = new String(str);
      },
      playParticleAnimation: function playParticleAnimation() {
        this.node_particle.node.active = true;
        this.node_particle.resetSystem();
      },
      playAnimation: function playAnimation(node) {
        node.active = true;
        var anima = node.getComponent(cc.Animation);
        anima.play();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_message: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03abd7/3XNBHbQoSgFwmkQg", "farm_message");
    "use strict";
    var ServerManager = require("../ServerManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        node_container: cc.Node,
        prefab_messageItem: cc.Prefab
      },
      onLoad: function onLoad() {
        this.data = [ {
          country: 1,
          name: "red",
          level: 1,
          time: 1578483458
        }, {
          country: 3,
          name: "yellow",
          level: 3,
          time: 1578485458
        }, {
          country: 4,
          name: "green",
          level: 2,
          time: 1578483458
        }, {
          country: 6,
          name: "TarloySwift",
          level: 1,
          time: 1578482458
        }, {
          country: 8,
          name: "James",
          level: 4,
          time: 1578480458
        }, {
          country: 9,
          name: "KobeBryant",
          level: 2,
          time: 1578473458
        } ];
      },
      initMessageContainer: function initMessageContainer() {
        this.node_container.children.length > 0 && this.node_container.removeAllChildren();
        for (var i = 0; i < this.data.length; i++) {
          var item = cc.instantiate(this.prefab_messageItem);
          item.parent = this.node_container;
          item.getComponent("item_farm_message").initItemDeatail(this.data[i]);
        }
      },
      getFriendHelpMessage: function getFriendHelpMessage() {
        var self = this;
        var localData = cc.sys.localStorage.getItem("localData");
        var uid;
        if (localData) {
          localData = JSON.parse(localData);
          uid = localData.uid;
        } else {
          uid = window.NativeManager.getUid();
          console.log("localData is not exist");
        }
      },
      showView: function showView() {
        this.node.active = true;
        this.fromTopToCenter(this.node);
        this.getFriendHelpMessage();
        this.initMessageContainer();
      },
      hideView: function hideView() {
        this.fromCenterToTop(this.node);
      },
      fromTopToCenter: function fromTopToCenter(node) {
        var windowSize = cc.view.getDesignResolutionSize();
        node.position = cc.v2(0, (windowSize.height + node.height) / 2);
        var action = cc.moveTo(.5, cc.v2(0, 0)).easing(cc.easeBackOut(3));
        node.runAction(action);
      },
      fromCenterToTop: function fromCenterToTop(node) {
        var windowSize = cc.view.getDesignResolutionSize();
        var action = cc.sequence(cc.moveTo(.5, cc.v2(0, (windowSize.height + node.height) / 2)).easing(cc.easeBackIn(3)), cc.callFunc(function() {
          node.active = false;
          cc.director.farmDialog.mask.active = false;
        }));
        node.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../ServerManager": "ServerManager"
  } ],
  farm_offlineExp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45a2ai5xQZLd5lNgorCquij", "farm_offlineExp");
    "use strict";
    var FarmUtils = require("./framUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        offlineNumber: cc.Node,
        house: cc.Node,
        doubleOfflineNumber: cc.Node,
        btn_get: cc.Node,
        btn_collect: cc.Node,
        btn_close: cc.Node
      },
      computedOfflineExp: function computedOfflineExp() {
        var exp = cc.director.FarmManager.getCurrentAllLandExp();
        this.exp = exp;
      },
      getOfflineExp: function getOfflineExp() {
        cc.director.farmDialog.hideOfflineExpPrompt();
      },
      getDoubleOfflineExp: function getDoubleOfflineExp() {
        var worldPos = this.offlineNumber.parent.convertToWorldSpaceAR(this.offlineNumber.position);
        cc.systemEvent.emit("UPDATE_FARM", {
          coins: 0,
          exp: 2 * this.exp,
          worldPos: worldPos
        });
        cc.director.farmDialog.hideOfflineExpPrompt();
        cc.director.FarmManager.resetAllLandExp();
      },
      watchVideoAd: function watchVideoAd() {
        this.numberRoll(this.offlineNumber, this.exp);
        this.btn_collect.active = true;
        this.btn_get.active = false;
        this.btn_close.active = false;
      },
      showView: function showView() {
        this.node.active = true;
        FarmUtils.showPromptWithScale(this.node);
        this.playNodeAnimation(this.house, 1);
        this.computedOfflineExp();
        this.computedOfflineExp();
        this.changeNodeLabelString(this.offlineNumber, this.exp);
        this.changeNodeLabelString(this.doubleOfflineNumber, 2 * this.exp);
        this.btn_collect.active = false;
        this.btn_close.active = true;
        this.btn_get.active = true;
      },
      hideView: function hideView() {
        this.playNodeAnimation(this.house, 2);
        this.node.active = false;
      },
      changeNodeLabelString: function changeNodeLabelString(node, str) {
        var label = node.getComponent(cc.Label);
        label.string = new String(str);
      },
      playNodeAnimation: function playNodeAnimation(node, type, name) {
        var anima = node.getComponent(cc.Animation);
        if (!anima) {
          cc.log("no animation component on this node!");
          return;
        }
        name ? 1 == type ? anima.play(name) : 2 == type ? anima.stop(name) : cc.log(type, "sorry, your type is not exist!") : 1 == type ? anima.play() : 2 == type ? anima.stop() : cc.log(type, "sorry, your type is not exist!");
      },
      numberRoll: function numberRoll(node, addNumber) {
        var _this = this;
        var label = node.getComponent(cc.Label);
        var number = parseInt(label.string);
        var quotient = Math.floor(addNumber / 20);
        var oneOfAll, len, rest = 0, isAddRest = false;
        if (quotient > 1) {
          oneOfAll = quotient;
          len = 20;
          rest = addNumber - 20 * oneOfAll;
          isAddRest = true;
        } else {
          oneOfAll = 1;
          len = addNumber;
        }
        var _loop = function _loop(i) {
          _this.scheduleOnce(function() {
            number += oneOfAll;
            i == len - 1 && rest > 0 && isAddRest && (number += rest);
            label.string = new String(number);
          }, .05 * i);
        };
        for (var i = 0; i < len; i++) _loop(i);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./framUtils": "framUtils"
  } ],
  farm_operateInterface: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e74019QbbZA54ZlCnoAshaY", "farm_operateInterface");
    "use strict";
    var delayTime = 3;
    cc.Class({
      extends: cc.Component,
      properties: {
        label_tips_text: cc.Label,
        label_plant_number: cc.Label,
        sprite_plant_view: cc.Sprite,
        list_plant_seed: [ cc.SpriteFrame ],
        list_plant_props: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("UPDATE_OPERATE_NUMBER", this.updatePlantNumber, this);
      },
      addOperateListener: function addOperateListener() {
        cc.systemEvent.on("SHOW_OPERATE", this.updateOperateView, this);
        this.operateTextList = [ "In using the seeds", "In using the props" ];
      },
      updatePlantNumber: function updatePlantNumber(event) {
        this.updateLabelString(event.number, this.label_plant_number);
        0 == event.number && this.scheduleOnce(function() {
          this.showPromptByMode();
        }, delayTime);
      },
      updateOperateView: function updateOperateView(event) {
        var data = event.data;
        this.data = data;
        this.updateLabelString(this.operateTextList[data.mode], this.label_tips_text);
        this.updateLabelString(data.number, this.label_plant_number);
        0 == data.mode ? this.updateSpriteView(this.sprite_plant_view, this.list_plant_seed, data.type) : 1 == data.mode && this.updateSpriteView(this.sprite_plant_view, this.list_plant_props, data.type);
      },
      updateLabelString: function updateLabelString(str, label) {
        label.string = new String(str);
      },
      updateSpriteView: function updateSpriteView(sprite, viewList, index) {
        sprite.spriteFrame = viewList[index];
      },
      showView: function showView() {
        this.node.active = true;
        cc.systemEvent.emit("HIDE_LAND_STATUE");
      },
      hideView: function hideView() {
        this.node.active = false;
        cc.director.currentPlantIndex = -1;
        cc.director.currentPropsIndex = -1;
        cc.systemEvent.emit("SHOW_LAND_STATUE");
      },
      showPromptByMode: function showPromptByMode() {
        cc.director.farmDialog.hideOperateView();
        0 == this.data.mode ? cc.director.farmDialog.showPlantPrompt() : 1 == this.data.mode && cc.director.farmDialog.showPropsView();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  farm_plantPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec52dOXiZJJyJ/5/hCHlj4r", "farm_plantPrompt");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    var actionTime = .25;
    var limitedList = FarmData.plantLimitedList;
    cc.Class({
      extends: cc.Component,
      properties: {
        container: cc.Node,
        item_plant_seed: cc.Prefab,
        node_touchNode1: cc.Node,
        node_touchNode2: cc.Node
      },
      onLoad: function onLoad() {
        this.node_touchNode1.on(cc.Node.EventType.TOUCH_END, this.hideView, this);
        this.node_touchNode2.on(cc.Node.EventType.TOUCH_END, this.hideView, this);
        this.itemPool = new cc.NodePool();
        this.node.on("touchBuyBtn", this.touchBuyBtn, this);
      },
      initPlantContainer: function initPlantContainer() {
        var currenFarmLevel = FarmUtils.getObjectProperty("localFarmInfo", "level");
        currenFarmLevel = "number" == typeof currenFarmLevel ? currenFarmLevel : 1;
        this.container.children.length > 0 && this.recycleItem();
        var seedData = FarmUtils.getLocalData("seedData");
        if (!seedData) {
          seedData = FarmData.seedData;
          FarmUtils.setLocalData(seedData, "seedData");
        }
        var item;
        for (var i = 0; i < seedData.length; i++) {
          item = !!this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.item_plant_seed);
          seedData[i].limitedLevel = limitedList[i];
          item.parent = this.container;
          item.getComponent("item_farm_plant_seed").updateItem(seedData[i], currenFarmLevel);
        }
      },
      recycleItem: function recycleItem() {
        var item, len = this.container.children.length;
        if (len > 0) for (var i = len - 1; i >= 0; i--) {
          item = this.container.children[i];
          "item_farm_plant_seed" == item.name ? this.itemPool.put(item) : item.removeFromParent();
        } else cc.log("error:no children in the container");
      },
      showView: function showView() {
        this.initPlantContainer();
        this.node.active = true;
        this.nodeFadeIn();
      },
      nodeFadeIn: function nodeFadeIn() {
        var windowSize = cc.view.getDesignResolutionSize();
        var startPosY = -(windowSize.height + this.node.height) / 2;
        var endPosY = -(windowSize.height - this.node.height) / 2;
        var position = cc.v2(0, startPosY);
        this.node.position = position;
        var action = cc.spawn(cc.fadeIn(actionTime), cc.moveTo(actionTime, cc.v2(0, endPosY)));
        this.node.runAction(action);
      },
      nodeFadeOut: function nodeFadeOut() {
        var self = this;
        var windowSize = cc.view.getDesignResolutionSize();
        var startPosY = -(windowSize.height + this.node.height) / 2;
        var action = cc.sequence(cc.spawn(cc.fadeOut(actionTime), cc.moveTo(actionTime, cc.v2(0, startPosY))), cc.callFunc(function() {
          cc.director.farmDialog.mask.active = false;
          self.node.active = false;
        }));
        this.node.runAction(action);
      },
      hideView: function hideView() {
        cc.director.currentPlantIndex = -1;
        cc.director.SoundManager.playSound("farm_btn");
        this.nodeFadeOut();
      },
      touchBuyBtn: function touchBuyBtn(event) {
        cc.director.currentPlantIndex = -1;
        var self = this;
        var windowSize = cc.view.getDesignResolutionSize();
        var startPosY = -(windowSize.height + this.node.height) / 2;
        var action = cc.sequence(cc.spawn(cc.fadeOut(actionTime), cc.moveTo(actionTime, cc.v2(0, startPosY))), cc.callFunc(function() {
          cc.director.farmDialog.mask.active = false;
          self.node.active = false;
          cc.director.farmDialog.showFarmShop();
        }));
        this.node.runAction(action);
      },
      showFarmGuide: function showFarmGuide() {
        cc.systemEvent.emit("SHOW_FARM_GUIDE");
      }
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_plantUnlock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4b01CTG8FKv7Y/FV7tZBbO", "farm_plantUnlock");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        viewList: [ cc.SpriteFrame ],
        node_view: cc.Node,
        node_unlockAnimation: cc.Node,
        node_name: cc.Label
      },
      showView: function showView(type) {
        this.node.active = true;
        FarmUtils.showPromptWithScale(this.node);
        this.type = type;
        this.playUnlockAnimation(this.node_unlockAnimation);
        console.log(type, "43,plantunlock");
        this.changeSpriteView(this.node_view, this.viewList, type);
        var name = FarmData.plantInfo[type].name;
        this.changeLabelContent(this.node_name, name);
      },
      hideView: function hideView() {
        this.node_unlockAnimation.active = false;
        this.node.active = false;
        this.sendRequestToAnimaLayer();
      },
      playUnlockAnimation: function playUnlockAnimation(node) {
        node.active = true;
        var animation = node.getComponent(cc.Animation);
        animation.play();
      },
      sendRequestToAnimaLayer: function sendRequestToAnimaLayer() {
        var wp = this.node_view.parent.convertToWorldSpaceAR(this.node_view.position);
        var data = {};
        data.type = this.type;
        data.number = FarmData.plantUnlockSeedReward[this.type];
        cc.systemEvent.emit("OBTAIN_SEED", {
          worldPos: wp,
          data: data
        });
      },
      changeSpriteView: function changeSpriteView(node, list, type) {
        node.getComponent(cc.Sprite).spriteFrame = list[type];
      },
      changeLabelContent: function changeLabelContent(node, str) {
        node.getComponent(cc.Label).string = new String(str);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_propsPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d80adNvKA5MoKVf69prrimy", "farm_propsPrompt");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    var actionTime = .25;
    cc.Class({
      extends: cc.Component,
      properties: {
        container: cc.Node,
        item_props: cc.Prefab,
        node_touchNode1: cc.Node,
        node_touchNode2: cc.Node
      },
      onLoad: function onLoad() {
        this.node_touchNode1.on(cc.Node.EventType.TOUCH_END, this.hideView, this);
        this.node_touchNode2.on(cc.Node.EventType.TOUCH_END, this.hideView, this);
        this.node.on("atuoUseProp", this.autoUseProp, this);
        this.itemPool = new cc.NodePool();
      },
      showView: function showView() {
        this.initPropContainer();
        this.node.active = true;
        this.nodeFadeIn();
      },
      initPropContainer: function initPropContainer() {
        this.container.children.length > 0 && this.recycleItem();
        var propsData = FarmUtils.getLocalData("propsData");
        if (!propsData) {
          propsData = FarmData.propsData;
          FarmUtils.setLocalData(propsData, "propsData");
        }
        var item;
        for (var i = 0; i < propsData.length; i++) {
          item = !!this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.item_props);
          propsData[i].timeStr = FarmData.propShopList[propsData[i].type].timeStr;
          item.parent = this.container;
          item.getComponent("item_farm_backpack").initItem(propsData[i]);
        }
      },
      recycleItem: function recycleItem() {
        var item, len = this.container.children.length;
        if (len > 0) for (var i = len - 1; i >= 0; i--) {
          item = this.container.children[i];
          "item_farm_prop" == item.name ? this.itemPool.put(item) : item.removeFromParent();
        } else cc.log("error:no children in the container");
      },
      nodeFadeIn: function nodeFadeIn() {
        var windowSize = cc.view.getDesignResolutionSize();
        var startPosY = -(windowSize.height + this.node.height) / 2;
        var endPosY = -(windowSize.height - this.node.height) / 2;
        var position = cc.v2(0, startPosY);
        this.node.position = position;
        var action = cc.spawn(cc.fadeIn(actionTime), cc.moveTo(actionTime, cc.v2(0, endPosY)));
        this.node.runAction(action);
      },
      nodeFadeOut: function nodeFadeOut() {
        var self = this;
        var windowSize = cc.view.getDesignResolutionSize();
        var startPosY = -(windowSize.height + this.node.height) / 2;
        var action = cc.sequence(cc.spawn(cc.fadeOut(actionTime), cc.moveTo(actionTime, cc.v2(0, startPosY))), cc.callFunc(function() {
          cc.director.farmDialog.mask.active = false;
          self.node.active = false;
        }));
        this.node.runAction(action);
      },
      hideView: function hideView() {
        cc.director.currentPropsIndex = -1;
        this.nodeFadeOut();
        cc.director.SoundManager.playSound("farm_btn");
      },
      autoUseProp: function autoUseProp(event) {
        console.log(event.detail);
        var data = event.detail.data;
        data.type >= 4 && data.type < 8 ? cc.systemEvent.emit("FERT_ALLLAND_TIME", {
          type: data.type,
          mode: 1
        }) : data.type >= 8 && data.type < 12 && cc.systemEvent.emit("STARTOVER_AUTOWATER", {
          type: data.type,
          mode: 1
        });
        this.hideView();
        cc.systemEvent.emit("UPDATE_PROPS", {
          data: {
            mode: 2,
            type: data.type
          }
        });
      },
      showFarmGuide: function showFarmGuide() {
        cc.systemEvent.emit("SHOW_FARM_GUIDE");
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_shop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff8087Cz9ZLbITVkRBukfNw", "farm_shop");
    "use strict";
    var FarmData = require("./FarmData");
    var FarmUtils = require("./framUtils");
    var limitedList = FarmData.plantLimitedList;
    cc.Class({
      extends: cc.Component,
      properties: {
        btn_seed: cc.Node,
        btn_prop: cc.Node,
        btn_seed_viewList: [ cc.SpriteFrame ],
        btn_prop_viewList: [ cc.SpriteFrame ],
        node_seedContainer: cc.Node,
        node_propContainer: cc.Node,
        item_seed: cc.Prefab,
        item_prop: cc.Prefab,
        node_seed: cc.Node,
        node_prop: cc.Node,
        node_coin: cc.Node,
        label_coin_number: cc.Label
      },
      onLoad: function onLoad() {
        this.node.on("buy_prop", this.buyProps, this);
        this.node.on("buySeed", this.buySeed, this);
        this.propPool = new cc.NodePool();
        this.seedPool = new cc.NodePool();
        this.addNumberPool = new cc.NodePool();
      },
      initSeedContainer: function initSeedContainer() {
        var currentFarmLevel = FarmUtils.getObjectProperty("localFarmInfo", "level");
        currentFarmLevel = "number" == typeof currentFarmLevel ? currentFarmLevel : 1;
        this.node_seedContainer.children.length > 0 && this.recycleRankItem(this.node_seedContainer, this.seedPool, "item_farm_seed");
        var shopSeedData = this.composeShopSeedData();
        var len = shopSeedData.length;
        var item;
        for (var i = 0; i < len; i++) {
          item = this.seedPool.size() > 0 ? this.seedPool.get() : cc.instantiate(this.item_seed);
          shopSeedData[i].limitedlevel = limitedList[i];
          item.parent = this.node_seedContainer;
          item.getComponent("item_farm_seed").initItemSeed(shopSeedData[i], currentFarmLevel);
        }
      },
      composeShopSeedData: function composeShopSeedData() {
        var seedData = FarmUtils.getLocalData("seedData");
        seedData || (seedData = FarmData.seedData);
        var shopSeedData = FarmData.shopSeedData;
        var len = shopSeedData.length;
        for (var i = 0; i < len; i++) {
          var shopItem = shopSeedData[i];
          for (var j = 0; j < seedData.length; j++) {
            var seedItem = seedData[j];
            if (shopItem.type == seedItem.type) {
              shopItem.number = seedItem.number;
              shopItem.level = seedItem.level;
              shopItem.name = FarmData.plantInfo[shopItem.type].name;
              shopItem.timeCost = FarmData.seedLabel[shopItem.type].matureTime;
              shopItem.produce = FarmData.getPlantProduce(seedItem.level, seedItem.type);
              break;
            }
          }
        }
        return shopSeedData;
      },
      computedCurrentProduce: function computedCurrentProduce(basic, level) {
        var produce = Math.floor(basic * Math.pow(1 + FarmData.PRODUCE_RATE, level - 1));
        return produce;
      },
      initPropContainer: function initPropContainer() {
        this.node_propContainer.children.length > 0 && this.recycleRankItem(this.node_propContainer, this.propPool, "item_farm_prop");
        var propList = FarmData.propShopList;
        var len = propList.length;
        for (var i = 0; i < len; i++) {
          var item = cc.instantiate(this.item_prop);
          var data = propList[i];
          data.index = i;
          item.getComponent("item_farm_prop").updateItem(data);
          item.parent = this.node_propContainer;
        }
      },
      buyProps: function buyProps(event) {
        var data = event.detail;
        cc.systemEvent.emit("UPDATE_PROPS", {
          data: {
            mode: 1,
            type: data.type
          }
        });
        this.updateCoins();
        this.iconCoinScale();
        cc.director.SoundManager.playSound("farm_shopBuy");
      },
      buySeed: function buySeed(event) {
        var data = event.detail;
        cc.systemEvent.emit("ADD_COINS", -data.price);
        cc.systemEvent.emit("UPDATE_SEED", {
          data: {
            mode: 1,
            type: data.type,
            number: 1
          }
        });
        this.updateCoins();
        this.iconCoinScale();
        cc.director.SoundManager.playSound("farm_shopBuy");
      },
      buySuccess: function buySuccess() {},
      buyFail: function buyFail() {},
      showSeedContainer: function showSeedContainer() {
        if (this.node_seed.active) return;
        cc.director.SoundManager.playSound("farm_btn");
        this.initSeedContainer();
        this.node_seed.active = true;
        this.node_prop.active = false;
        this.btn_seed.getComponent(cc.Sprite).spriteFrame = this.btn_seed_viewList[0];
        this.btn_prop.getComponent(cc.Sprite).spriteFrame = this.btn_prop_viewList[1];
      },
      showPropContainer: function showPropContainer() {
        if (this.node_prop.active) return;
        cc.director.SoundManager.playSound("farm_btn");
        this.initPropContainer();
        this.node_seed.active = false;
        this.node_prop.active = true;
        this.btn_seed.getComponent(cc.Sprite).spriteFrame = this.btn_seed_viewList[1];
        this.btn_prop.getComponent(cc.Sprite).spriteFrame = this.btn_prop_viewList[0];
      },
      showView: function showView() {
        this.node.active = true;
        this.showPromptWithScale(this.node);
        this.showSeedContainer();
        this.updateCoins();
      },
      showPromptWithScale: function showPromptWithScale(node) {
        node.scale = .2;
        node.runAction(cc.scaleTo(.3, 1).easing(cc.easeBackOut(3)));
      },
      recycleRankItem: function recycleRankItem(node, pool, name) {
        var children = node.children;
        if (children.length > 0) {
          var len = children.length;
          for (var i = len - 1; i >= 0; i--) {
            var child = children[i];
            child.name == name ? pool.put(child) : child.removeFromParent();
          }
        }
      },
      hideView: function hideView() {
        this.node_prop.active = false;
        this.node_seed.active = false;
        this.node.active = false;
      },
      start: function start() {},
      updateCoins: function updateCoins() {
        var coins = FarmUtils.getLocalData("localFarmInfo").coin;
        coins || (coins = 0);
        console.log(coins, "217");
        this.label_coin_number.string = coins + "";
      },
      iconCoinScale: function iconCoinScale() {
        var action = cc.sequence(cc.scaleTo(.3, 1.2), cc.scaleTo(.3, .9), cc.scaleTo(.1, 1));
        this.node_coin.stopAllActions();
        this.node_coin.runAction(action);
      }
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_stuffAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e96d2hd1QJCL5Jwyw0WDedE", "farm_stuffAnimation");
    "use strict";
    var mowPositionList = [ cc.v2(-300, 280), cc.v2(-370, 250), cc.v2(320, 230) ];
    var flower_PosList_double = [ cc.v2(-320, -330), cc.v2(-260, 100) ];
    var flower_PosList_single = [ cc.v2(100, -420) ];
    cc.Class({
      extends: cc.Component,
      properties: {
        mow: cc.Prefab,
        flower_double: cc.Prefab,
        flower_single: cc.Prefab
      },
      start: function start() {
        this.addMowToFarm();
        this.addFlowerToFarm();
        this.turnOnSchedule();
      },
      addMowToFarm: function addMowToFarm() {
        for (var i = 0; i < mowPositionList.length; i++) this.addStuffToFarm(this.mow, mowPositionList[i]);
      },
      addDoubleFlower: function addDoubleFlower() {
        for (var i = 0; i < flower_PosList_double.length; i++) this.addStuffToFarm(this.flower_double, flower_PosList_double[i]);
      },
      addSingleFlower: function addSingleFlower() {
        for (var i = 0; i < flower_PosList_single.length; i++) this.addStuffToFarm(this.flower_single, flower_PosList_single[i]);
      },
      addStuffToFarm: function addStuffToFarm(stuff, position) {
        var dFlower = cc.instantiate(stuff);
        dFlower.parent = this.node;
        dFlower.position = position;
      },
      addFlowerToFarm: function addFlowerToFarm() {
        this.addDoubleFlower();
        this.addSingleFlower();
      },
      playAnimaiton: function playAnimaiton(node) {
        var anima = node.getComponent(cc.Animation);
        anima.play();
      },
      playStuffAnimation: function playStuffAnimation() {
        var children = this.node.children;
        for (var i = children.length - 1; i >= 0; i--) this.playAnimaiton(children[i]);
      },
      turnOnSchedule: function turnOnSchedule() {
        this.schedule(this.playStuffAnimation, 5);
      },
      onDestroy: function onDestroy() {
        this.unschedule(this.playStuffAnimation);
      }
    });
    cc._RF.pop();
  }, {} ],
  farm_tips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "300abnZs6dNp52tkZzkCUT0", "farm_tips");
    "use strict";
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        netCacheNode: cc.Node,
        node_cloud: cc.Node,
        node_mask: cc.Node,
        node_guide: cc.Node,
        node_wordNotice: cc.Node,
        voice_bgm: cc.AudioSource
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("SHOW_CACHE_ANIMA", this.showNetCacheAnimation, this);
        cc.systemEvent.on("HIDE_CACHE_ANIMA", this.hideNetCacheAnimation, this);
        cc.systemEvent.on("FADEIN_COULD_ANIMA", this.cloudFadeIn, this);
        cc.systemEvent.on("FADEOUT_COULD_ANIMA", this.cloudFadeOut, this);
        cc.systemEvent.on("SHOW_FARM_GUIDE", this.showFarmGuide, this);
        cc.systemEvent.on("HIDE_FARM_GUIDE", this.hidefarmGuide, this);
        cc.systemEvent.on("SHOW_WORD_NOTICE", this.showWordNotice, this);
        this.node_mask.on(cc.Node.EventType.TOUCH_END, this.onTouchMask, this);
      },
      onTouchMask: function onTouchMask() {
        cc.systemEvent.emit("HIDE_FARM_GUIDE");
      },
      showNetCacheAnimation: function showNetCacheAnimation() {
        console.log("helloworld");
        this.netCacheNode.active = true;
        this.anima = this.netCacheNode.getComponent(cc.Animation);
        this.anima.play("cache");
      },
      hideNetCacheAnimation: function hideNetCacheAnimation() {
        this.anima || (this.anima = this.netCacheNode.getComponent(cc.Animation));
        this.anima.stop("cache");
        this.netCacheNode.active = false;
      },
      cloudFadeOut: function cloudFadeOut() {
        var self = this;
        this.node_cloud.active = true;
        var left = this.node_cloud.getChildByName("cloudLeft");
        var right = this.node_cloud.getChildByName("cloudRight");
        left.position = cc.v2(-400, 0);
        right.position = cc.v2(400, 0);
        var action1 = cc.sequence(cc.fadeIn(.1), cc.spawn(cc.fadeOut(1), cc.moveTo(1, cc.v2(-1200, 0)))).easing(cc.easeInOut(3));
        var action2 = cc.sequence(cc.fadeIn(.1), cc.spawn(cc.fadeOut(1), cc.moveTo(1, cc.v2(1200, 0))), cc.callFunc(function() {
          self.startFarmBgm();
        })).easing(cc.easeInOut(3));
        left.runAction(action1);
        right.runAction(action2);
        cc.director.SoundManager.playSound("farm_cloud");
      },
      cloudFadeIn: function cloudFadeIn() {
        var self = this;
        this.node_cloud.active = true;
        var left = this.node_cloud.getChildByName("cloudLeft");
        var right = this.node_cloud.getChildByName("cloudRight");
        left.position = cc.v2(-1200, 0);
        right.position = cc.v2(1200, 0);
        var action1 = cc.sequence(cc.fadeOut(.1), cc.spawn(cc.fadeIn(1), cc.moveTo(1, cc.v2(-400, 0)))).easing(cc.easeInOut(3));
        var action2 = cc.sequence(cc.fadeOut(.1), cc.spawn(cc.fadeIn(1), cc.moveTo(1, cc.v2(400, 0))), cc.callFunc(function() {
          self.endFarmBgm();
        })).easing(cc.easeInOut(3));
        left.runAction(action1);
        right.runAction(action2);
        cc.director.SoundManager.playSound("farm_cloud");
      },
      showFarmGuide: function showFarmGuide() {
        this.node_mask.active = true;
        this.node_guide.active = true;
      },
      hidefarmGuide: function hidefarmGuide() {
        this.node_mask.active = false;
        this.node_guide.active = false;
      },
      startFarmBgm: function startFarmBgm() {
        var isBgmOn = cc.sys.localStorage.getItem("bgm");
        console.log(isBgmOn, "farm_tips");
        isBgmOn ? this.voice_bgm.play() : console.log("fuck music!");
      },
      endFarmBgm: function endFarmBgm() {
        this.voice_bgm.stop();
      },
      showWordNotice: function showWordNotice(event) {
        var label_word = this.node_wordNotice.getChildByName("word").getComponent(cc.Label);
        var tipsCode = event.code + "";
        label_word.string = FarmData.wordTips[tipsCode];
        this.node_wordNotice.stopAllActions();
        this.node_wordNotice.scale = 0;
        this.node_wordNotice.active = true;
        var action = cc.sequence(cc.spawn(cc.scaleTo(.2, 1), cc.fadeIn(.2)), cc.delayTime(1), cc.spawn(cc.scaleTo(.2, 0), cc.fadeOut(.2)));
        this.node_wordNotice.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData"
  } ],
  farm_unlockLand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93d8eA31HhJFLIf5TBLUj2w", "farm_unlockLand");
    "use strict";
    var FarmData = require("./FarmData");
    var FarmUtils = require("./framUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        land: cc.Node,
        land_effect: cc.Node,
        circleContainer: cc.Node,
        landUnlockCost: [ cc.SpriteFrame ],
        price: cc.Sprite
      },
      landScaleAnima: function landScaleAnima() {
        var action = cc.sequence(cc.scaleTo(.25, 1.1), cc.scaleTo(.5, .9), cc.scaleTo(.25, 1)).repeatForever();
        this.land.runAction(action);
      },
      landUnlockEffect: function landUnlockEffect() {
        var anima = this.land_effect.getComponent(cc.Animation);
        anima.play();
      },
      endLandUnlockEffect: function endLandUnlockEffect() {
        var anima = this.land_effect.getComponent(cc.Animation);
        anima.stop();
      },
      circleScaleFadeAnimation: function circleScaleFadeAnimation(node, time, scale) {
        node.scale = .6;
        node.active = true;
        var action = cc.sequence(cc.callFunc(function() {
          node.active = true;
          node.scale = .6;
          node.opacity = 255;
        }), cc.spawn(cc.scaleTo(time, scale), cc.fadeOut(time)), cc.callFunc(function() {
          node.active = false;
        })).repeatForever();
        node.runAction(action);
      },
      openWholeEffect: function openWholeEffect(node) {
        var _this = this;
        var children = node.children;
        var _loop = function _loop(i) {
          _this.scheduleOnce(function() {
            this.circleScaleFadeAnimation(children[i], 5, 2.5);
          }, 1 * i);
        };
        for (var i = children.length - 1; i >= 0; i--) _loop(i);
      },
      startCircleLight: function startCircleLight() {
        this.openWholeEffect(this.circleContainer);
      },
      showView: function showView(obj) {
        this.obj = obj;
        this.node.active = true;
        FarmUtils.showPromptWithScale(this.node);
        this.startCircleLight();
        this.landScaleAnima();
        this.landUnlockEffect();
      },
      hideAllLightCircle: function hideAllLightCircle() {
        var children = this.circleContainer.children;
        for (var i = children.length - 1; i >= 0; i--) {
          children[i].active = false;
          children[i].stopAllActions();
        }
      },
      stopLandAnimation: function stopLandAnimation() {
        this.land.stopAllActions();
      },
      hideView: function hideView() {
        this.hideAllLightCircle();
        this.stopLandAnimation();
        this.endLandUnlockEffect();
        this.node.active = false;
        !this.obj || cc.systemEvent.emit("ANIMA_LAND_UNLOCK", this.obj);
      },
      start: function start() {
        this.startCircleLight();
        this.landScaleAnima();
        this.landUnlockEffect();
      }
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  farm_warehouse: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d709IPLGVGqq4InOIW1Vm3", "farm_warehouse");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        warehouse_container: cc.Node,
        item_vagetable: cc.Prefab,
        item_prompt_view: cc.Sprite,
        display_view_list: [ cc.SpriteFrame ],
        mask: cc.Node,
        node_prompt: cc.Node,
        node_sell: cc.Node,
        label_prompt_number: cc.Label,
        node_prompt_name: cc.Sprite,
        label_btn_sell_price: cc.Label,
        label_btn_sell_totalPrice: cc.Label,
        node_null: cc.Node,
        node_btn_sellAll: cc.Node,
        node_farmer: cc.Node
      },
      onLoad: function onLoad() {
        this.node.on("click_item", this.showItemDeatailPrompt, this);
      },
      showItemDeatailPrompt: function showItemDeatailPrompt(event) {
        var data = event.detail;
        var detail = {};
        var plantInfo = FarmData.plantInfo;
        var item, index = -1;
        for (var i = 0; i < plantInfo.length; i++) if (plantInfo[i].type == data.type) {
          index = i;
          break;
        }
        if (!(index >= 0)) {
          cc.log("warehouse error: no type! ");
          return;
        }
        item = plantInfo[index];
        if (!!item) {
          detail.name = item.name;
          detail.price = item.price;
          detail.type = item.type;
          detail.number = data.number;
          this.showItemPrompt(detail);
        }
      },
      updatePromptView: function updatePromptView(data) {
        this.data = data;
        console.log(data);
        this.label_prompt_number.string = data.number + "";
        this.label_btn_sell_price.string = data.number * data.price + "";
        this.item_prompt_view.spriteFrame = this.display_view_list[data.type];
        this.itemCount = data.number;
        this.addItemNumber();
      },
      addItemNumber: function addItemNumber() {
        if (this.itemCount < this.data.number) {
          this.itemCount++;
          this.label_prompt_number.string = this.itemCount + "";
        } else this.label_prompt_number.string = this.itemCount + "";
        this.label_btn_sell_price.string = this.itemCount * this.data.price + "";
      },
      reduceItemNumber: function reduceItemNumber() {
        if (this.itemCount > 1) {
          this.itemCount--;
          this.label_prompt_number.string = this.itemCount + "";
        } else this.label_prompt_number.string = this.itemCount + "";
        this.label_btn_sell_price.string = this.itemCount * this.data.price + "";
      },
      showItemPrompt: function showItemPrompt(data) {
        this.itemCount = data.number;
        this.mask.active = true;
        this.node_prompt.active = true;
        FarmUtils.showPromptWithScale(this.node_prompt);
        this.updatePromptView(data);
      },
      hideItemPrompt: function hideItemPrompt() {
        this.mask.active = false;
        this.node_prompt.active = false;
      },
      initWarehouseContainer: function initWarehouseContainer() {
        this.recycleItem();
        var data = FarmUtils.getLocalData("warehouseData");
        var len;
        if (!data) {
          this.node_null.active = true;
          this.node_btn_sellAll.getComponent(cc.Button).interactable = false;
        } else {
          len = data.length;
          if (len <= 0) {
            this.node_null.active = true;
            this.node_btn_sellAll.getComponent(cc.Button).interactable = false;
            return;
          }
          this.node_btn_sellAll.getComponent(cc.Button).interactable = true;
          this.node_null.active = false;
          for (var i = 0; i < len; i++) {
            var item = void 0;
            if (this.itemPool) item = this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.item_vagetable); else {
              this.itemPool = new cc.NodePool();
              item = cc.instantiate(this.item_vagetable);
            }
            var obj = data[i];
            obj.index = i;
            item.getComponent("item_farm_warehouse").initItemDetail(obj);
            item.parent = this.warehouse_container;
          }
        }
      },
      recycleItem: function recycleItem() {
        var len = this.warehouse_container.children.length;
        if (!!len && len > 0) for (var i = len - 1; i >= 0; i--) {
          var item = this.warehouse_container.children[i];
          this.itemPool || (this.itemPool = new cc.NodePool());
          this.itemPool.put(item);
        }
      },
      sell: function sell() {
        var data = {
          type: this.data.type,
          number: this.itemCount
        };
        cc.systemEvent.emit("UPDATE_WAREHOUSE", {
          data: data,
          mode: 2
        });
        var coins = this.data.price * this.itemCount;
        cc.systemEvent.emit("OBTAIN_COINS", {
          coin: coins
        });
        this.hideItemPrompt();
        this.initWarehouseContainer();
      },
      sellAll: function sellAll() {
        var warehouse = FarmUtils.getLocalData("warehouseData");
        for (var i = 0; i < warehouse.length; i++) {
          var data = {
            type: warehouse[i].type,
            number: warehouse[i].number
          };
          cc.systemEvent.emit("UPDATE_WAREHOUSE", {
            data: data,
            mode: 2
          });
        }
        var coins = this.totalEarn;
        cc.systemEvent.emit("OBTAIN_COINS", {
          coin: coins
        });
        this.hideSellAll();
        this.initWarehouseContainer();
      },
      showView: function showView() {
        this.node.active = true;
        this.showPromptWithScale(this.node);
        this.initWarehouseContainer();
      },
      hideView: function hideView() {
        this.node_farmer.active = false;
        this.node.active = false;
      },
      showSellAll: function showSellAll() {
        var totalEarn = this.computedAllPrice();
        this.totalEarn = totalEarn;
        this.mask.active = true;
        this.node_sell.active = true;
        FarmUtils.showPromptWithScale(this.node_sell);
        this.label_btn_sell_totalPrice.string = totalEarn + "";
      },
      hideSellAll: function hideSellAll() {
        this.mask.active = false;
        this.node_sell.active = false;
      },
      showPromptWithScale: function showPromptWithScale(node) {
        var self = this;
        node.scale = .2;
        node.runAction(cc.sequence(cc.scaleTo(.3, 1).easing(cc.easeBackOut(3)), cc.callFunc(function() {
          self.farmerFadeIn();
        })));
      },
      computedAllPrice: function computedAllPrice() {
        var warehouse = FarmUtils.getLocalData("warehouseData");
        var plantInfo = FarmData.plantInfo;
        var price, earn, sum = 0;
        if (!!warehouse) {
          var len = warehouse.length;
          for (var i = 0; i < len; i++) {
            var type = warehouse[i].type;
            for (var j = 0; j < plantInfo.length; j++) if (type === plantInfo[j].type) {
              price = plantInfo[j].price;
              break;
            }
            earn = price * warehouse[i].number;
            sum += earn;
          }
        }
        console.log(sum);
        return sum;
      },
      warehouseFadeIn: function warehouseFadeIn() {
        var self = this;
        this.node.position = cc.v2(800, -50);
        this.node_farmer.active = false;
        var action = cc.sequence(cc.moveTo(.5, cc.v2(0, -50)).easing(cc.easeIn(3)), cc.callFunc(function() {
          self.farmerFadeIn();
        }));
        this.node.runAction(action);
      },
      farmerFadeIn: function farmerFadeIn() {
        this.node_farmer.active = true;
        this.node_farmer.position = cc.v2(-650, 100);
        var action = cc.moveTo(.5, cc.v2(-100, 100)).easing(cc.easeIn(3));
        this.node_farmer.runAction(action);
      },
      warehouseFadeOut: function warehouseFadeOut() {
        this.node.position = cc.v2(0, -50);
        this.node_farmer.active = false;
        var action = cc.sequence(cc.moveTo(.5, cc.v2(800, -50)).easing(cc.easeIn(3)), cc.callFunc(function() {
          cc.director.farmDialog.hideWarehouseView();
        }));
        this.node.runAction(action);
      },
      farmerFadeOut: function farmerFadeOut() {
        var self = this;
        this.node_farmer.active = true;
        this.node_farmer.position = cc.v2(-100, 100);
        var action = cc.sequence(cc.moveTo(.5, cc.v2(-650, 100)).easing(cc.easeIn(3)), cc.callFunc(function() {
          self.warehouseFadeOut();
        }));
        this.node_farmer.runAction(action);
        cc.director.SoundManager.playSound("farm_btn");
      },
      closeWarehouse: function closeWarehouse() {
        this.farmerFadeOut();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  framUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2ae66ZgVx9CXYQP/7eCL7qS", "framUtils");
    "use strict";
    var GameData = require("../gameData");
    var FarmData = require("./FarmData");
    var ServerManager = require("../ServerManager");
    function getUTCtime() {
      var nowTime = new Date();
      var offsetMin = nowTime.getTimezoneOffset();
      var currentStamp = Math.floor(nowTime.getTime() / 1e3);
      var currentUTCStamp = currentStamp + 60 * offsetMin;
      return currentUTCStamp;
    }
    function saveSyncServerTime() {
      var time = this.getUTCtime();
      cc.sys.localStorage.setItem("SyncTime", time);
    }
    function saveServerTime(timeStamp) {
      cc.sys.localStorage.setItem("ServerTime", timeStamp);
    }
    function getServerTime() {
      var now = this.getUTCtime();
      var recordTime, lastServerTime;
      recordTime = cc.sys.localStorage.getItem("SyncTime");
      lastServerTime = cc.sys.localStorage.getItem("ServerTime");
      if (!recordTime || !lastServerTime) return 0;
      recordTime = parseInt(recordTime);
      lastServerTime = parseInt(lastServerTime);
      var passTime = now - recordTime;
      var currentServerTime = passTime + lastServerTime;
      return currentServerTime;
    }
    function checkLocalAndServerTime(timeStamp) {
      var now = this.getUTCtime();
      var recordTime, lastServerTime;
      recordTime = cc.sys.localStorage.getItem("SyncTime");
      lastServerTime = cc.sys.localStorage.getItem("ServerTime");
      if (!recordTime || !lastServerTime) {
        cc.log("error: No record time!");
        return false;
      }
      recordTime = parseInt(recordTime);
      lastServerTime = parseInt(lastServerTime);
      var localPassTime = now - recordTime;
      var serverPassTime = timeStamp - lastServerTime;
      if (Math.abs(localPassTime - serverPassTime) >= 10) {
        cc.log("error:Time anomaly!!");
        return false;
      }
      return true;
    }
    function showPromptWithScale(node) {
      node.scale = .2;
      node.runAction(cc.scaleTo(.3, 1).easing(cc.easeBackOut(3)));
    }
    function getLevel() {
      var gd = GameData.getGameData();
      if (!gd) {
        GameData.initAllGameData();
        GameData.storeGameData();
        gd = GameData.getGameData();
      }
      return gd.bestLevel + 1;
    }
    function getCoins() {
      var gd = GameData.getGameData();
      if (!gd) {
        GameData.initAllGameData();
        GameData.storeGameData();
        gd = GameData.getGameData();
      }
      return gd.starCount;
    }
    function saveCoins(cNum) {
      console.log(cNum, "save coin");
      var gd = GameData.getGameData();
      gd.starCount = cNum;
      GameData.overlapGameData(gd);
    }
    function getWarehouseData(name) {
      var warehouseData = cc.sys.localStorage.getItem(name);
      if (!warehouseData) return false;
      warehouseData = JSON.parse(warehouseData);
      return warehouseData;
    }
    function saveWarehouseData(data, name) {
      !data || "object" != typeof data || cc.sys.localStorage.setItem(name, JSON.stringify(data));
    }
    function countdown(end, type) {
      var leftTime;
      var str = "";
      if (1 == type) {
        var now = this.getServerTime();
        leftTime = end - now;
      } else if (2 == type) leftTime = end; else {
        leftTime = 0;
        cc.log("counttime,type is unexpected");
      }
      var d, h, m, s;
      if (!(leftTime >= 0)) return false;
      d = Math.floor(leftTime / 60 / 60 / 24);
      h = Math.floor(leftTime / 60 / 60 % 24);
      m = Math.floor(leftTime / 60 % 60);
      s = Math.floor(leftTime % 60);
      d > 0 && (h += 24 * d);
      var hour, min, sec;
      hour = h < 10 ? "0" + h : "" + h;
      min = m < 10 ? "0" + m : "" + m;
      sec = s < 10 ? "0" + s : "" + s;
      str = h > 0 ? hour + ":" + min + ":" + sec : min + ":" + sec;
      return str;
    }
    function getLocalData(name) {
      if (!name || "string" != typeof name) {
        cc.log("error:params error on get", name);
        return false;
      }
      var farmInfo = cc.sys.localStorage.getItem(name);
      if (!farmInfo) {
        cc.log("error:data is not exist!", name);
        return false;
      }
      farmInfo = JSON.parse(farmInfo);
      return farmInfo;
    }
    function setLocalData(data, name) {
      data && "object" == typeof data ? cc.sys.localStorage.setItem(name, JSON.stringify(data)) : cc.log("error:params error on set", name);
    }
    function removeLocalData(name) {
      name && "string" == typeof name ? cc.sys.localStorage.removeItem(name) : cc.log("error:params error on remove");
    }
    function checkLocalData(name) {
      if (!name || "string" != typeof name) {
        cc.log("error:params error on remove");
        return false;
      }
      var data = cc.sys.localStorage.getItem(name);
      return !!data;
    }
    function resize() {
      var cvs = cc.find("Canvas").getComponent(cc.Canvas);
      this.curDR || (this.curDR = cvs.designResolution);
      var dr = this.curDR;
      var s = cc.view.getFrameSize();
      var rw = s.width;
      var rh = s.height;
      var finalW = rw;
      var finalH = rh;
      if (rw / rh > dr.width / dr.height) {
        finalH = dr.height;
        finalW = finalH * rw / rh;
      } else {
        finalW = dr.width;
        finalH = rh / rw * finalW;
      }
      cvs.designResolution = cc.size(finalW, finalH);
      cvs.node.width = finalW;
      cvs.node.height = finalH;
      cvs.node.emit("resize");
    }
    function campareTwoStamp(stamp1, stamp2) {
      console.log(new Date(1e3 * stamp1).toDateString());
      console.log(new Date(1e3 * stamp2).toDateString());
      return new Date(1e3 * stamp1).toDateString() === new Date(1e3 * stamp2).toDateString();
    }
    function getDataProperty(type, dataName, propName) {
      var tempData = this.getLocalData(dataName);
      if (tempData) {
        var index = -1;
        for (var i = 0; i < tempData.length; i++) if (tempData[i].type === type) {
          index = i;
          break;
        }
        return index >= 0 ? tempData[index][propName] : 0;
      }
      cc.log(dataName, "error:Cound not find data with this name!----getDataProperty");
    }
    function getObjectProperty(objName, propName) {
      var tempObj = this.getLocalData(objName);
      return !!tempObj && tempObj[propName];
    }
    function numberRoll(node, addNumber, callback) {
      if (0 === addNumber) return;
      var label = node.getComponent(cc.Label);
      var number = parseInt(label.string);
      var quotient = Math.floor(addNumber / 20);
      var oneOfAll, len, rest = 0, isAddRest = false;
      if (quotient > 1) {
        oneOfAll = quotient;
        len = 20;
        rest = addNumber - 20 * oneOfAll;
        isAddRest = true;
      } else {
        oneOfAll = 1;
        len = addNumber;
      }
      var _loop = function _loop(i) {
        node.scheduleOnce(function() {
          number += oneOfAll;
          i == len - 1 && rest > 0 && isAddRest && (number += rest);
          label.string = new String(number);
          i != len - 1 || !callback || callback();
        }, .05 * i);
      };
      for (var i = 0; i < len; i++) _loop(i);
    }
    function computedCurrentProduce(basic, level) {
      var produce = Math.floor(basic * Math.pow(1 + FarmData.PRODUCE_RATE, level - 1));
      return produce;
    }
    function composeFarmData() {
      var seedData = this.getLocalData("seedData");
      var landData = this.getLocalData("landData");
      var warehouseData = this.getLocalData("warehouseData");
      var localFarmInfo = this.getLocalData("localFarmInfo");
      var propsData = this.getLocalData("propsData");
      var fData = {};
      var newSeedData = this.composeList(seedData, [ "type", "number", "level" ]);
      fData.seedData = newSeedData;
      var newPropsData = this.composeList(propsData, [ "type", "number" ]);
      fData.propsData = newPropsData;
      fData.warehouseData = warehouseData;
      fData.landData = landData;
      var farmData = {};
      farmData.fmexp = localFarmInfo.exp;
      farmData.fmlevel = localFarmInfo.level;
      farmData.coin = this.getCoins();
      farmData.fmlasttime = this.getServerTime();
      farmData.fmdata = JSON.stringify(fData);
      return farmData;
    }
    function composeList(list, propList) {
      var newList = [];
      for (var i = 0; i < list.length; i++) {
        var item = {};
        for (var j = 0; j < propList.length; j++) item[propList[j]] = list[i][propList[j]];
        newList.push(item);
      }
      return newList.length > 0 && newList;
    }
    function updateFarmData(type, str, help) {
      var localData = cc.sys.localStorage.getItem("localData");
      var uid;
      if (localData) {
        localData = JSON.parse(localData);
        uid = "" == localData.uid ? window.NativeManager.getUid() : localData.uid;
      } else {
        uid = window.NativeManager.getUid();
        console.log("localData is not exist");
      }
      var params = this.composeFarmData();
      var callback = function callback(res) {};
      if (1 == type) ; else if (2 == type) {
        params.help = help;
        params.helplist = str;
      }
    }
    function login() {
      var self = this;
      var uid;
      var localData = cc.sys.localStorage.getItem("localData");
      if (localData) {
        localData = JSON.parse(localData);
        uid = "" == localData.uid ? window.NativeManager.getUid() : localData.uid;
      } else {
        uid = window.NativeManager.getUid();
        console.log("localData is not exist");
      }
      var callback = function callback(res) {
        self.saveServerTime(res.data.curtime);
        self.saveSyncServerTime();
      };
      ServerManager.login(3, uid, "", callback);
    }
    module.exports = {
      resize: resize,
      getUTCtime: getUTCtime,
      saveServerTime: saveServerTime,
      saveSyncServerTime: saveSyncServerTime,
      getServerTime: getServerTime,
      checkLocalAndServerTime: checkLocalAndServerTime,
      showPromptWithScale: showPromptWithScale,
      getLevel: getLevel,
      getCoins: getCoins,
      saveCoins: saveCoins,
      getWarehouseData: getWarehouseData,
      getObjectProperty: getObjectProperty,
      saveWarehouseData: saveWarehouseData,
      getLocalData: getLocalData,
      setLocalData: setLocalData,
      removeLocalData: removeLocalData,
      checkLocalData: checkLocalData,
      campareTwoStamp: campareTwoStamp,
      countdown: countdown,
      getDataProperty: getDataProperty,
      computedCurrentProduce: computedCurrentProduce,
      composeFarmData: composeFarmData,
      composeList: composeList,
      updateFarmData: updateFarmData,
      login: login,
      numberRoll: numberRoll
    };
    cc._RF.pop();
  }, {
    "../ServerManager": "ServerManager",
    "../gameData": "gameData",
    "./FarmData": "FarmData"
  } ],
  freeCoinsPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "546cfiKYsVFioTYpapQsMK8", "freeCoinsPanel");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    var REWARD_COINS_NUM = Config.REWARD_COINS_NUM;
    cc.Class({
      extends: cc.Component,
      properties: {
        number: cc.Label,
        videoEnable: cc.Node,
        videoUnable: cc.Node,
        label_timeNumber: cc.Label,
        watchVideoTimes: cc.Sprite,
        numberViewList: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        this.number.string = "" + REWARD_COINS_NUM;
      },
      showView: function showView(index) {
        this.index = index;
        this.node.active = true;
        this.showPromptWithScale(this.node);
        this.getCurrentDayVideoTimes();
      },
      showPromptWithScale: function showPromptWithScale(node) {
        node.scale = .2;
        node.runAction(cc.scaleTo(.3, .9).easing(cc.easeBackOut(3)));
      },
      hideView: function hideView() {
        this.node.active = false;
        this.unschedule(this.countDown);
      },
      videoReward: function videoReward() {
        cc.director.SoundManager.playSound("btnEffect");
        var callback = function callback(res) {
          if (!!res) {
            var freeVideoTimes = cc.sys.localStorage.getItem("freeVideoTimes");
            freeVideoTimes = parseInt(freeVideoTimes);
            freeVideoTimes -= 1;
            cc.sys.localStorage.setItem("freeVideoTimes", freeVideoTimes);
            var name = cc.director.getScene().name;
            if ("mainScreen" == name) {
              cc.director.screenDialog.hideCoinsPanel();
              cc.systemEvent.emit("TOOLOBTAIN", {
                type: 0,
                number: REWARD_COINS_NUM
              });
            } else if ("gameView" == name) {
              GameData.starCount += REWARD_COINS_NUM;
              GameData.storeGameData();
              if (1 == this.index) {
                cc.director.dialogScript.showRetryPrompt();
                cc.systemEvent.emit("GAMEVIEW_COINS_OBTAIN", REWARD_COINS_NUM);
              } else {
                cc.director.dialogScript.hideFreeCoinsPanel();
                cc.systemEvent.emit("GAMEVIEW_COINS_OBTAIN", REWARD_COINS_NUM);
              }
            } else "farm" == name && console.log("farm scene!");
          }
        };
        var hasVideo = window.NativeManager.hasRewardVideo();
        if (!hasVideo) {
          var name = cc.director.getScene().name;
          "mainScreen" == name ? cc.systemEvent.emit("TIPS_SUCCESS", {
            wordIndex: 0
          }) : "gameView" == name ? cc.systemEvent.emit("GAMEVIEW_TIPS", {
            wordIndex: 0
          }) : "farm" == name && console.log("farm scene11111!");
        } else window.NativeManager.showRewardVideo(callback);
      },
      getCurrentDayVideoTimes: function getCurrentDayVideoTimes() {
        var freeVideoTimes = cc.sys.localStorage.getItem("freeVideoTimes");
        if (freeVideoTimes) {
          freeVideoTimes = parseInt(freeVideoTimes);
          if (freeVideoTimes > 0) {
            this.videoEnable.active = true;
            this.videoUnable.active = false;
            this.watchVideoTimes.spriteFrame = this.numberViewList[freeVideoTimes - 1];
          } else {
            this.videoEnable.active = false;
            this.videoUnable.active = true;
            var currentTime = Math.floor(new Date(new Date().toLocaleDateString()).getTime() / 1e3);
            this.endTime = currentTime + 86400;
            var str = Utils.countDonwTime(this.endTime);
            this.label_timeNumber.string = str;
            this.schedule(this.countDown, 1);
          }
        } else {
          freeVideoTimes = 3;
          cc.sys.localStorage.setItem("freeVideoTimes", 3);
          this.videoEnable.active = true;
          this.videoUnable.active = false;
          this.watchVideoTimes.spriteFrame = this.numberViewList[freeVideoTimes - 1];
        }
      },
      countDown: function countDown() {
        var str = Utils.countDonwTime(this.endTime);
        if (!str) {
          this.unschedule(this.countDown);
          this.videoEnable.active = true;
          this.videoUnable.active = false;
        } else this.label_timeNumber.string = str;
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  funcView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f00b96SdFGMpWZOR45TYX/", "funcView");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        fMask: cc.Node,
        shop: require("./shop"),
        powerPool: require("./powerPool"),
        shop_android: require("./shop_android")
      },
      onLoad: function onLoad() {
        cc.director.funcView = this;
      },
      hideAllChilden: function hideAllChilden() {
        var children = this.node.children;
        for (var i = 0; i < children.length; i++) children[i].active = false;
      },
      showShop: function showShop() {
        cc.director.SoundManager.playSound("btnEffect");
        if (cc.sys.os == cc.sys.OS_ANDROID) {
          this.hideAllChilden();
          this.fMask.active = true;
          this.shop_android.showView();
          window.NativeManager.showInterstitialAd(2);
        } else {
          this.hideAllChilden();
          this.fMask.active = true;
          this.shop.showView();
          window.NativeManager.showInterstitialAd(2);
        }
      },
      hideShop: function hideShop() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChilden();
        this.shop.hideView();
      },
      showPowerPool: function showPowerPool() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChilden();
        this.fMask.active = true;
        this.powerPool.showView();
        window.NativeManager.showInterstitialAd(2);
      },
      hidePowerPool: function hidePowerPool() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChilden();
        this.powerPool.hideView();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./powerPool": "powerPool",
    "./shop": "shop",
    "./shop_android": "shop_android"
  } ],
  gameData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2920ay2CzZIKZizHqYtR8hP", "gameData");
    "use strict";
    var level = 0;
    var targetScore = 0;
    var currScore = 0;
    var bestScore = 0;
    var starMatrix = null;
    var starSprite = [];
    var psconfig = require("./psconfig.js");
    var LeaderBoardManager = require("./LeaderBoardManager.js");
    var isContinu = 1;
    var game_prop = [ {
      type: 0,
      name: "battle",
      number: 0
    }, {
      type: 1,
      name: "fork",
      number: 0
    }, {
      type: 2,
      name: "hammer",
      number: 0
    }, {
      type: 3,
      name: "dice",
      number: 0
    } ];
    var starCount = 0;
    var boxPoint = [];
    var bestLevel = 0;
    var bestLevelScore = 0;
    var continueCount = 0;
    var lifeNumber = 0;
    var currentStar = 0;
    var passRate = -1;
    var gameToolList = [ 0, 0, 0 ];
    var choosedList = [];
    var totalStar = 0;
    function cleanStarData(list) {
      list.forEach(function(elem, index, arr) {
        this.starMatrix[elem.x][elem.y] = -1;
      }, this);
    }
    function updateSingleData(grid, type) {
      this.starMatrix[grid.x][grid.y] = this.starMatrix[grid.x][grid.y] + type >= psconfig.dType ? psconfig.dType : this.starMatrix[grid.x][grid.y] + type;
    }
    function getDataBygrid(grid) {
      return !!grid && this.starMatrix[grid.x][grid.y];
    }
    function tampStarData() {
      for (var i = 0; i < psconfig.matrixCol; i++) {
        var col = i;
        var row = -1;
        for (var j = 0; j < psconfig.matrixRow; j++) if (-1 == this.starMatrix[j][col]) {
          row = j;
          break;
        }
        if (row >= 0) for (var k = row; k < psconfig.matrixCol; k++) {
          if (-2 == this.starMatrix[k][col]) continue;
          var index = -1;
          for (var t = k + 1; t < psconfig.matrixRow; t++) if (this.starMatrix[t][col] >= 0) {
            index = t;
            break;
          }
          if (!(index >= 0)) break;
          this.starMatrix[k][col] = this.starMatrix[index][col];
          this.starMatrix[index][col] = -1;
        }
      }
    }
    function checkEmptyCol() {
      var index = -1;
      for (var i = 0; i < psconfig.matrixCol; i++) if (this.starMatrix[0][i] < 0) {
        index = i;
        break;
      }
      if (index >= 0) for (var c = index; c < psconfig.matrixCol - 1; c++) {
        var nIndex = -1;
        for (var j = c + 1; j < psconfig.matrixCol; j++) if (this.starMatrix[0][j] >= 0) {
          nIndex = j;
          break;
        }
        if (nIndex >= 0) for (var r = 0; r < psconfig.matrixRow; r++) {
          this.starMatrix[r][c] = this.starMatrix[r][nIndex];
          this.starMatrix[r][nIndex] = -1;
        }
      }
    }
    function remainStarData() {
      var list = [];
      var pos;
      for (var i = 0; i < psconfig.matrixRow; i++) for (var j = 0; j < psconfig.matrixCol; j++) if (this.starMatrix[i][j] >= 0) {
        pos = cc.v2(i, j);
        list.push(pos);
      }
      return list;
    }
    function initAllGameData() {
      this.targetScore = 1e3;
      this.currScore = 0;
      this.level = 1;
      this.starMatrix = null;
      this.starSprite = [];
      this.isContinu = 1;
      this.passRate = -1;
      this.game_prop = [ {
        type: 0,
        name: "battle",
        number: 1
      }, {
        type: 1,
        name: "fork",
        number: 1
      }, {
        type: 2,
        name: "hammer",
        number: 1
      }, {
        type: 3,
        name: "dice",
        number: 1
      } ];
      this.boxPoint = [];
      this.continueCount = 0;
      this.gameToolList = [ 0, 0, 0 ];
      this.currentStar = 0;
      this.lifeNumber = 6;
      var oldData = this.getGameData();
      if (!oldData) {
        this.bestLevel = 0;
        this.bestScore = 0;
        this.starCount = 0;
        this.bestLevelScore = 0;
        this.totalStar = 0;
      } else {
        this.bestLevel = oldData.bestLevel ? oldData.bestLevel : 0;
        this.bestScore = oldData.bestScore ? oldData.bestScore : 0;
        this.starCount = oldData.starCount ? oldData.starCount : 0;
        this.bestLevelScore = oldData.bestLevelScore ? oldData.bestLevelScore : 0;
        this.totalStar = oldData.totalStar ? oldData.totalStar : 0;
      }
    }
    function storeGameData() {
      var data = cc.sys.localStorage.getItem("starGameData");
      data = data ? JSON.parse(data) : {};
      data.currScore = this.currScore;
      data.targetScore = this.targetScore;
      data.level = this.level;
      data.bestScore = this.bestScore;
      data.isContinu = this.isContinu;
      data.starCount = this.starCount;
      data.game_prop = this.game_prop;
      data.boxPoint = this.boxPoint;
      data.bestLevel = this.bestLevel;
      data.bestScore = this.bestScore;
      data.bestLevelScore = this.bestLevelScore;
      data.continueCount = this.continueCount;
      data.gameToolList = this.gameToolList;
      data.lifeNumber = this.lifeNumber;
      data.currentStar = this.currentStar;
      data.passRate = this.passRate;
      data.totalStar = this.totalStar;
      cc.sys.localStorage.setItem("starGameData", JSON.stringify(data));
    }
    function getGameData() {
      var starGameData = cc.sys.localStorage.getItem("starGameData");
      return !!starGameData && JSON.parse(starGameData);
    }
    function overlapGameData(data) {
      if (!!data) {
        this.currScore = data.currScore;
        this.targetScore = data.targetScore;
        this.level = data.level;
        this.bestScore = data.bestScore;
        this.isContinu = data.isContinu;
        this.starCount = data.starCount;
        this.game_prop = data.game_prop;
        this.boxPoint = data.boxPoint;
        this.bestLevel = data.bestLevel;
        this.bestLevelScore = data.bestLevelScore;
        this.continueCount = data.continueCount;
        this.gameToolList = data.gameToolList;
        this.lifeNumber = data.lifeNumber;
        this.currentStar = data.currentStar;
        this.passRate = data.passRate;
        this.totalStar = data.totalStar;
      }
      cc.sys.localStorage.setItem("starGameData", JSON.stringify(data));
    }
    function getStarCount() {
      var starCount = cc.sys.localStorage.getItem("starCount");
      return starCount ? parseInt(starCount) : 0;
    }
    function setStarCount(num) {
      cc.sys.localStorage.setItem("starCount", num);
    }
    function getFriendLeaderBoard() {
      if (!window.FBInstant) {
        var myData = cc.sys.localStorage.getItem("userNameInfo");
        if (!!myData) {
          myData = JSON.parse(myData);
          LeaderBoardManager.getListData(myData.uid, function(res) {
            if (!!res) {
              cc.log(res, "gameData_280");
              cc.director.friendList = res.data;
              cc.director.myGameData = res.mine;
            }
          });
        }
      } else {
        var self = this;
        FBInstant.getLeaderboardAsync("GlobalBoard").then(function(leaderboard) {
          return leaderboard.getConnectedPlayerEntriesAsync(100, 0);
        }).then(function(entries) {
          var data = [];
          for (var i = 0; i < entries.length; i++) {
            var item = {};
            item.name = entries[i].getPlayer().getName();
            item.rank = entries[i].getRank();
            item.score = entries[i].getScore();
            item.avatar = entries[i].getPlayer().getPhoto();
            item.uid = entries[i].getPlayer().getID();
            data.push(item);
          }
          cc.director.friendList = data;
        })["catch"](function(error) {
          console.error(error);
        });
      }
    }
    function submitMyScore(score) {
      if (!window.FBInstant) {
        var myData = cc.sys.localStorage.getItem("userNameInfo");
        if (!!myData) {
          myData = JSON.parse(myData);
          var userInfo = {
            name: myData.name,
            avatar: myData.avatar
          };
          userInfo = JSON.stringify(userInfo);
          LeaderBoardManager.setScore(myData.uid, userInfo, score, function(res) {
            if (!!res) {
              cc.log(res);
              cc.director.myScoreList = res.data;
            }
          });
        }
      } else FBInstant.getLeaderboardAsync("GlobalBoard").then(function(leaderboard) {
        return leaderboard.setScoreAsync(score);
      }).then(function(entry) {
        var item = {};
        item.name = entry.getPlayer().getName();
        item.rank = entry.getRank();
        item.score = entry.getScore();
        item.avatar = entry.getPlayer().getPhoto();
        item.uid = entry.getPlayer().getID();
        cc.director.myGameData = item;
      });
    }
    function submitMyGameInfo() {
      var data = this.getGameData();
      var str = JSON.stringify(data);
      data.strData = str;
      !window.FBInstant || FBInstant.player.setDataAsync(data).then(function(res) {});
    }
    function getMyGameInfo() {
      var self = this;
      !window.FBInstant || FBInstant.player.getDataAsync([ "strData" ]).then(function(res) {
        var data = res.strData;
        if (!!res) {
          var d = JSON.parse(data);
          self.overlapGameData(d);
        }
      });
    }
    function getNativeGameData() {
      var myData = cc.sys.localStorage.getItem("userNameInfo");
      if (!!myData) {
        myData = JSON.parse(myData);
        LeaderBoardManager.getListData(myData.uid, function(res) {
          cc.director.myGameData = res.mine;
        });
      }
    }
    function changeGameTool(protoName, number, type, addOrSub) {
      "gameTool" == protoName && (addOrSub ? this.gameToolList[type] += number : this.gameToolList[type] -= number);
      "playerTool" == protoName && (addOrSub ? this.game_prop[type].number += number : this.game_prop[type].number -= number);
      this.storeGameData();
    }
    module.exports = {
      level: level,
      targetScore: targetScore,
      currScore: currScore,
      bestScore: bestScore,
      starMatrix: starMatrix,
      starSprite: starSprite,
      game_prop: game_prop,
      isContinu: isContinu,
      starCount: starCount,
      boxPoint: boxPoint,
      lifeNumber: lifeNumber,
      currentStar: currentStar,
      choosedList: choosedList,
      passRate: passRate,
      gameToolList: gameToolList,
      changeGameTool: changeGameTool,
      cleanStarData: cleanStarData,
      tampStarData: tampStarData,
      checkEmptyCol: checkEmptyCol,
      remainStarData: remainStarData,
      initAllGameData: initAllGameData,
      storeGameData: storeGameData,
      getGameData: getGameData,
      overlapGameData: overlapGameData,
      getStarCount: getStarCount,
      setStarCount: setStarCount,
      bestLevel: bestLevel,
      getFriendLeaderBoard: getFriendLeaderBoard,
      submitMyScore: submitMyScore,
      bestLevelScore: bestLevelScore,
      continueCount: continueCount,
      submitMyGameInfo: submitMyGameInfo,
      getMyGameInfo: getMyGameInfo,
      getNativeGameData: getNativeGameData,
      updateSingleData: updateSingleData,
      getDataBygrid: getDataBygrid,
      totalStar: totalStar
    };
    cc._RF.pop();
  }, {
    "./LeaderBoardManager.js": "LeaderBoardManager",
    "./psconfig.js": "psconfig"
  } ],
  gameToolShop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "88c25fA2B1LkaN+f/7rM+5S", "gameToolShop");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        tool_name: cc.Sprite,
        tool_view: cc.Sprite,
        tool_function: cc.Sprite,
        viewList: [ cc.SpriteFrame ],
        funcList: [ cc.SpriteFrame ],
        nameList: [ cc.SpriteFrame ],
        price: cc.Label
      },
      onLoad: function onLoad() {
        this.count = 0;
        cc.director.UiCacheList = [];
        this.playerToolPrice = Config.playerTooLCostList;
        this.gameToolCost = Config.gameToolCost;
        this.currentPrice = 0;
      },
      showView: function showView(type, index) {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        if (1 == index) {
          this.tool_name.spriteFrame = this.nameList[type];
          this.tool_view.spriteFrame = this.viewList[type];
          this.tool_function.spriteFrame = this.funcList[type];
          this.price.string = this.gameToolCost + "";
          this.currentPrice = this.gameToolCost;
        }
        if (2 == index) {
          this.tool_name.spriteFrame = this.nameList[type + 2];
          this.tool_view.spriteFrame = this.viewList[type + 2];
          this.tool_function.spriteFrame = this.funcList[type + 2];
          this.price.string = this.playerToolPrice[type - 1].price + "";
          this.currentPrice = this.playerToolPrice[type - 1].price;
        }
        this.type = type;
        this.index = index;
      },
      hideView: function hideView() {
        this.node.active = false;
        var scene = cc.director.getScene();
        "gameView" == scene.name && 1 == this.index && cc.director.dialogScript.showRetryPrompt();
        "mainScreen" == scene.name && cc.director.screenDialog.showStartPrompt();
      },
      buyGameTool: function buyGameTool() {
        var self = this;
        var name, type;
        var number = 1;
        var price = 100;
        cc.director.SoundManager.playSound("btnEffect");
        if (1 == this.index) {
          name = "gameTool";
          type = this.type;
        }
        if (2 == this.index) {
          name = "playerTool";
          type = this.type - 1;
        }
        var sName = cc.director.getScene().name;
        if (GameData.starCount >= this.currentPrice) {
          GameData.starCount -= this.currentPrice;
          if ("gameView" == sName) {
            GameData.changeGameTool(name, number, type, true);
            if (1 == this.index) this.hideView(); else {
              cc.systemEvent.emit("AFTER_BUY_PLAYERTOOL", {
                num: type + 1
              });
              cc.director.dialogScript.hidePlayerShop();
            }
          }
          if ("mainScreen" == sName) {
            GameData.changeGameTool(name, number, type, true);
            GameData.storeGameData();
            cc.systemEvent.emit("UPDATE_COINS");
            cc.systemEvent.emit("TIPS_SUCCESS", {
              word: "Buy success!"
            });
          }
        } else {
          "gameView" == sName && cc.director.dialogScript.showFreeCoinsPanel(this.index);
          "mainScreen" == sName && cc.director.screenDialog.showCoinsPanel();
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  glassGround: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9722e/pmFZBaoDm8kpipPPh", "glassGround");
    "use strict";
    var Config = require("../psconfig");
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        grass: cc.Prefab,
        squirrel_container: cc.Node,
        squirrel: cc.Prefab
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("REMOVE_SINGLE_GRASS", this.removeSingleGrass, this);
        this.grassPool = new cc.NodePool();
        this.squirrelNodeList = [];
      },
      initGroundView: function initGroundView() {
        var matrixData = new Array(Config.matrixRow);
        var spriteList = [];
        for (var row = 0; row < Config.matrixRow; row++) {
          matrixData[row] = new Array(Config.matrixCol);
          for (var col = 0; col < Config.matrixCol; col++) {
            matrixData[row][col] = 0;
            var index = Utils.indexValue(row, col);
            spriteList[index] = null;
          }
        }
        this.groundList = matrixData;
        this.spriteList = spriteList;
      },
      loadMapRes: function loadMapRes(posList, dataList) {
        for (var p = 0; p < posList.length; p++) {
          var item = posList[p];
          var xStart = item[0][0];
          var xEnd = item[1][0];
          var yStart = item[0][1];
          var yEnd = item[1][1];
          var type = item[2];
          for (var i = xStart; i <= xEnd; i++) for (var j = yStart; j <= yEnd; j++) {
            if (-2 == GameData.starMatrix[i][j]) continue;
            dataList[i][j] = type;
          }
        }
      },
      loadGrassRes: function loadGrassRes(dataList) {
        this.node.children.length > 0 && this.recycleGrassNode();
        for (var i = 0; i < dataList.length; i++) for (var j = 0; j < dataList.length; j++) if (dataList[i][j] >= 1) {
          var item = cc.v2(i, j);
          this.addGrassChild(item, dataList[i][j]);
        }
      },
      loadSquirrelStatue: function loadSquirrelStatue(list) {
        for (var i = 0; i < list.length; i++) {
          var item = list[i];
          var squirrel = cc.instantiate(this.squirrel);
          var script = squirrel.getComponent("squirrel");
          script.initBearData(item);
          var position = script.comfirmBearPosition(item);
          squirrel.parent = this.squirrel_container;
          squirrel.position = position;
          this.squirrelNodeList.push(squirrel);
        }
      },
      addGrassChild: function addGrassChild(pos, type) {
        var index = Utils.indexValue(pos.x, pos.y);
        var grass;
        grass = this.grassPool.size() > 0 ? this.grassPool.get() : cc.instantiate(this.grass);
        grass.parent = this.node;
        grass.position = Utils.grid2Pos(pos.x, pos.y);
        var script = grass.getComponent("ground");
        script.initGroundData(type);
        this.spriteList[index] = grass;
      },
      recycleGrassNode: function recycleGrassNode() {
        var list = this.node.children;
        for (var i = list.length - 1; i >= 0; i--) "ground" == list[i].name ? this.grassPool.put(list[i]) : list[i].removeFromParent();
      },
      removeSingleGrass: function removeSingleGrass(event) {
        var pos = event.pos;
        var index = Utils.indexValue(pos.x, pos.y);
        if (!!this.spriteList && null != this.spriteList[index]) {
          var grassItem = this.spriteList[index];
          var script = grassItem.getComponent("ground");
          var wp = grassItem.parent.convertToWorldSpaceAR(grassItem.position);
          if (script.bombCount > 1) {
            script.bombCount--;
            script.hitGround();
            cc.systemEvent.emit("HIT_GRASS_ANIMATION", {
              worldPos: wp,
              index: 1
            });
          } else {
            cc.systemEvent.emit("HIT_GRASS_ANIMATION", {
              worldPos: wp,
              index: 2
            });
            this.grassPool.put(grassItem);
            this.spriteList[index] = null;
            this.groundList[pos.x][pos.y] = 0;
            this.judgeSquirrelIsHide();
          }
        }
      },
      judgeSquirrelIsHide: function judgeSquirrelIsHide() {
        var self = this;
        for (var i = 0; i < this.squirrelNodeList.length; i++) {
          var item = this.squirrelNodeList[i];
          var script = item.getComponent("squirrel");
          var isHide = script.judgeBearIsHide(this.groundList);
          if (!isHide) {
            var wp = this.squirrel_container.convertToWorldSpaceAR(item.position);
            this.squirrelNodeList.splice(i, 1);
            item.removeFromParent();
            cc.systemEvent.emit("HINDER_SQUIRREL_ANIMATION", {
              statue: item,
              worldPos: wp
            });
          }
        }
      },
      releaseSquirreStatue: function releaseSquirreStatue() {
        if (!!this.squirrelNodeList && this.squirrelNodeList.length > 0) while (this.squirrelNodeList.length > 0) {
          var item = this.squirrelNodeList.pop();
          item.removeFromParent();
        }
      },
      reset: function reset() {
        this.releaseSquirreStatue();
        this.recycleGrassNode();
      },
      initFunc: function initFunc(list, stoneList) {
        this.releaseSquirreStatue();
        this.initGroundView();
        this.loadMapRes(list, this.groundList);
        this.loadGrassRes(this.groundList);
        this.loadSquirrelStatue(stoneList);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  goalDisplay: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0d42bkATyxOTqQRsj91eaPS", "goalDisplay");
    "use strict";
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        goal: require("./goal"),
        bg: cc.Node,
        toolList: require("./toolList"),
        squirrelNode: cc.Node
      },
      initGoalPosition: function initGoalPosition() {
        var viewSize = cc.view.getFrameSize();
        this.constNum = this.node.width + viewSize.width / 2;
        this.node.position = cc.v2(this.constNum, 0);
        this.squirrelNode.position = cc.v2(viewSize.width / 2 + this.squirrelNode.width / 2, 0);
      },
      squirrelAnimation: function squirrelAnimation() {
        var viewSize = cc.view.getVisibleSize();
        this.scaleRate = viewSize.width / cc.view.getDesignResolutionSize().width;
        this.squirrelNode.active = true;
        var anima = this.squirrelNode.getComponent(cc.Animation);
        anima.play("squirrelsRun");
        var action = cc.sequence(cc.fadeIn(.1), cc.moveTo(2 * this.scaleRate, cc.v2(-(viewSize.width + 2 * this.squirrelNode.width) / 2, 0)), cc.fadeOut(.1));
        this.squirrelNode.runAction(action);
      },
      fadeInAndOut: function fadeInAndOut() {
        cc.director.SoundManager.playSound("mission_show");
        this.node.parent.active = true;
        this.node.active = true;
        var self = this;
        var t = .79;
        this.initGoalPosition();
        this.squirrelAnimation();
        var action = cc.sequence(cc.spawn(cc.fadeIn(t), cc.moveTo(2 * t * this.scaleRate, cc.v2(0, 0))), cc.callFunc(function() {
          var txt = self.goal.getTargetItemWorldPosition();
          for (var i = 0; i < txt.length; i++) cc.systemEvent.emit("NOTICE_TARGET", txt[i]);
          self.goal.node.active = false;
        }), cc.fadeOut(t), cc.callFunc(function() {
          cc.director.container.addGameToolToContainer(GameData.choosedList);
          self.toolList.judgeLevel();
          self.bg.runAction(cc.fadeOut(.5));
          setTimeout(function() {
            cc.systemEvent.emit("EXCUTE_GUIDE_STEP");
          }, 500);
        }));
        this.node.runAction(action);
      },
      initGoalNumber: function initGoalNumber(list) {
        this.bg.active = true;
        this.bg.opacity = 120;
        this.goal.node.active = true;
        this.goal.updateNodeTag(list);
        this.fadeInAndOut();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "./goal": "goal",
    "./toolList": "toolList"
  } ],
  goal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f19aCCGENB2pNHJZ/cGtf+", "goal");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        nodeList: [ cc.Node ],
        viewList: [ cc.SpriteFrame ],
        hinderListView: [ cc.SpriteFrame ]
      },
      hideTargetNode: function hideTargetNode() {
        for (var i = 0; i < this.nodeList.length; i++) this.nodeList[i].active = false;
      },
      updateNodeTag: function updateNodeTag(list) {
        this.tContent = list;
        this.hideTargetNode();
        var gap = Utils.computedNodeGap(list.length, this.node, this.nodeList[0]);
        for (var i = 0; i < list.length; i++) {
          var node = this.nodeList[i];
          node.position = cc.v2(gap * (i + 1) + node.width * i + node.width / 2, 0);
          node.active = true;
          var sprite = node.getChildByName("icon");
          var type = list[i][0] < 20 ? list[i][0] : list[i][0] - 20;
          list[i][0] < 20 ? Utils.changeLocalNodeTexture(sprite, this.viewList, type) : 38 == list[i][0] ? Utils.changeLocalNodeTexture(sprite, this.hinderListView, 10) : 39 == list[i][0] ? Utils.changeLocalNodeTexture(sprite, this.hinderListView, 11) : 37 == list[i][0] ? Utils.changeLocalNodeTexture(sprite, this.hinderListView, 12) : Utils.changeLocalNodeTexture(sprite, this.hinderListView, type);
        }
        this.updateGoalNumber(list);
      },
      getTargetItemWorldPosition: function getTargetItemWorldPosition() {
        var itemList = [];
        for (var i = 0; i < this.nodeList.length; i++) {
          var nItem = this.nodeList[i];
          if (nItem.active) {
            var wp = nItem.parent.convertToWorldSpaceAR(nItem.position);
            var item = {};
            item.index = i;
            item.worldPos = wp;
            item.type = this.tContent[i][0];
            itemList.push(item);
          }
        }
        return itemList;
      },
      updateGoalNumber: function updateGoalNumber(list) {
        for (var i = 0; i < list.length; i++) {
          var item = this.nodeList[i];
          var number = item.getChildByName("num").getComponent(cc.Label);
          if (list[i][1] > 0) {
            number.string = "" + list[i][1];
            number.node.active = true;
          } else number.node.active = false;
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../utils": "utils"
  } ],
  groundLand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8aa126xaslHl7VEwjYO4Ru4", "groundLand");
    "use strict";
    var FarmUtils = require("../framUtils");
    var FarmData = require("../FarmData");
    var matureTime = 10;
    var unitTime = FarmData.costTime.ONE_MIN;
    var groundLand = cc.Class({
      extends: cc.Component,
      properties: {
        earth: cc.Sprite,
        growStatue: cc.Sprite,
        statueList: [ cc.SpriteFrame ],
        list_locked_view: [ cc.SpriteFrame ],
        node_animaArea: cc.Node,
        node_speedUp: cc.Node,
        node_woodNotice: cc.Node,
        label_unlockLevel: cc.Label,
        node_tips: cc.Node,
        node_progress_reap: cc.Node,
        node_progress_produce: cc.Node,
        node_progress_protect: cc.Node,
        label_reap_time: cc.Label,
        label_produce_pecent: cc.Label,
        label_time_protectTime: cc.Label,
        list_inner_bar: [ cc.SpriteFrame ],
        list_tips_bg: [ cc.SpriteFrame ],
        unmatureProgressSpriteList: [ cc.SpriteFrame ],
        matureProgressSpriteList: [ cc.SpriteFrame ],
        progressNode: require("../progressNode"),
        plantAnimationNode: require("../plantAnimaNode"),
        landStatueNodeList: [ cc.Node ],
        insecMachine: cc.Prefab,
        landUnlockCost: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchStart, this);
        this.node.on("growStatueClick", this.growStatueClick, this);
        this.node.on("colliderEvent", this.handleColliderEvent, this);
        this.growStatue.node.on(cc.Node.EventType.TOUCH_END, this.click, this);
      },
      click: function click() {
        var event = new cc.Event.EventCustom();
        this.growStatue.node.dispatchEvent(event);
      },
      growStatueClick: function growStatueClick() {
        this.onTouchStart();
      },
      handleColliderEvent: function handleColliderEvent(event) {
        console.log("handleColliderEvent!!!", event.detail.index);
        this.progressNode.collectExp();
      },
      getCurrentLandExp: function getCurrentLandExp() {
        var exp = this.progressNode.getAccumulateExpNumber();
        return exp;
      },
      initGroundLand: function initGroundLand(info) {
        this.info = info;
        console.log(info, "90");
        this.computedAutoWaterReduceTime();
        this.updateServerData();
        this.compareInsectAppearTime();
        this.showShield();
        this.isLandLock(this.info.isUse);
        this.showPlantGrowStatue(this.info.healthStatue);
        this.updatePlantGrowStatue(this.info.type, this.info.growthStatue);
        this.excuteTimeCount();
        this.landNormal();
        this.allLandPlantMove();
      },
      updateServerData: function updateServerData() {
        var current = FarmUtils.getServerTime();
        var rest = this.getPlantReapRestTime(current, 0);
        if (rest <= 0) {
          var witheredTime = FarmData.plantInfo[this.info.type].witheredTime * unitTime;
          if (Math.abs(rest) >= witheredTime) {
            this.info.growthStatue = 3;
            this.info.restTime = -1;
            this.info.healthStatue.withered = 1;
          } else {
            this.info.healthStatue.reap = 1;
            this.info.restTime = -1;
            this.info.growthStatue = 2;
          }
        } else {
          this.info.restTime = rest;
          var waterTime = this.getRestTimeNextWater();
          if (waterTime <= 0) this.restWaterTime = Math.abs(waterTime); else if (this.info.type >= 3) {
            this.info.healthStatue.water = 1;
            this.info.waterTime = -1;
          }
          this.tempPart = Math.floor(FarmData.plantInfo[this.info.type].cycle * unitTime / 3);
          this.judgePlantGrowStage(rest, this.tempPart);
        }
      },
      computedAutoWaterReduceTime: function computedAutoWaterReduceTime() {
        var autoProp = FarmUtils.getLocalData("autoProp");
        var current = FarmUtils.getServerTime();
        if (!!autoProp) {
          var time;
          var plantInterval = FarmData.plantInfo[this.info.type].waterIntervel * unitTime;
          if (autoProp.autowater.endTime > current) {
            time = Math.floor((current - this.info.waterTime) / plantInterval);
            console.log(current, this.info.waterTime, time, plantInterval, "2222222");
          } else {
            var rest = this.getPlantReapRestTime(current, 0);
            if (autoProp.autowater.endTime < 0 || rest < 0) return;
            time = Math.floor((autoProp.autowater.endTime - this.info.waterTime) / plantInterval);
            console.log("3333", time);
          }
          time = time >= 0 ? time : 0;
          if (0 == time) return;
          this.updatePlantReapRestTime(time * FarmData.IndirectTime);
          this.info.waterTime += time * plantInterval;
          console.log(time, "11111111111111");
          cc.systemEvent.emit("UPDATE_LAND", this.info);
        }
      },
      getPlantReapRestTime: function getPlantReapRestTime(time, reduceTime) {
        var restTime = -1;
        if (this.info) {
          if (this.info.restTime < 0) restTime = FarmData.plantInfo[this.info.type].cycle * unitTime; else if (this.info.plantTime >= 0) {
            restTime = FarmData.plantInfo[this.info.type].cycle * unitTime + this.info.plantTime - time - reduceTime;
            restTime = restTime >= 0 ? restTime : 0;
          } else restTime = FarmData.plantInfo[this.info.type].cycle * unitTime;
          return restTime;
        }
        return restTime;
      },
      judgePlantGrowStage: function judgePlantGrowStage(restTime, part) {
        if (restTime <= part) {
          this.info.growthStatue = 2;
          this.plantAnimationNode.changePlantTexture(this.info.type, 2, this.info.index);
        } else if (restTime <= 2 * part) {
          this.info.growthStatue = 1;
          this.plantAnimationNode.changePlantTexture(this.info.type, 1, this.info.index);
        } else if (restTime <= 3 * part) {
          this.info.growthStatue = 0;
          this.plantAnimationNode.changePlantTexture(this.info.type, 0, this.info.index);
        }
      },
      getRestTimeNextWater: function getRestTimeNextWater() {
        var restWaterTime;
        var current = FarmUtils.getServerTime();
        restWaterTime = this.info.waterTime < 0 ? FarmData.plantInfo[this.info.type].waterIntervel * unitTime : current - this.info.waterTime - FarmData.plantInfo[this.info.type].waterIntervel * unitTime;
        return restWaterTime;
      },
      excuteTimeCount: function excuteTimeCount() {
        if (this.info.isUse) if (this.info.healthStatue.reap) {
          console.log("jinlezheli2222");
          this.progressNode.initProgressNode(matureTime, 2, this.info);
        } else {
          this.startWaterIntervel();
          this.startReapInterVel();
          this.scheduleOnce(function() {
            this.progressNode.initProgressNode(matureTime, 1, this.info);
          }, .2 * this.info.index);
          console.log("jinlezheli11111");
        } else this.progressNode.hideProgressNode();
      },
      startWaterIntervel: function startWaterIntervel() {
        this.restWaterTime = Math.abs(this.getRestTimeNextWater());
        this.schedule(this.excuteWater, 1);
      },
      startReapInterVel: function startReapInterVel() {
        var time = FarmUtils.getServerTime();
        this.restTime = this.getPlantReapRestTime(time, 0);
        this.schedule(this.excuteReap, 1);
      },
      startInsectAppearIntervel: function startInsectAppearIntervel() {
        this.schedule(this.excuteInsectAppear, 1);
      },
      startShieldIntervel: function startShieldIntervel() {
        this.schedule(this.excuteShield, 1);
      },
      excuteWater: function excuteWater() {
        if (this.restWaterTime <= 0) {
          this.unschedule(this.excuteWater);
          if (!cc.director.isAutoWater) {
            if (!this.info.healthStatue) {
              this.info.healthStatue.water = 1;
              this.showPlantGrowStatue(this.info.healthStatue);
            }
            cc.systemEvent.emit("UPDATE_LAND", this.info);
          } else this.water();
        } else if (this.info.healthStatue.reap) {
          this.info.healthStatue.water = 0;
          this.unschedule(this.excuteWater);
          this.restWaterTime = 0;
        } else this.restWaterTime--;
      },
      excuteReap: function excuteReap() {
        if (this.restTime <= 0) {
          this.unschedule(this.excuteReap);
          this.info.healthStatue.reap = 1;
          this.info.healthStatue.water = 0;
          this.info.restTime = 0;
          this.info.waterTime = -1;
          this.info.growthStatue = 2;
          this.scheduleOnce(function() {
            this.showPlantGrowStatue(this.info.healthStatue);
          }, 2);
          cc.systemEvent.emit("UPDATE_LAND", this.info);
          this.progressNode.finishedMoveAnimation();
        } else {
          this.restTime--;
          this.judgePlantGrowStage(this.restTime, this.tempPart);
        }
      },
      excuteInsectAppear: function excuteInsectAppear() {
        if (this.insectTime <= 0) {
          this.unschedule(this.excuteInsectAppear);
          var curr = FarmUtils.getServerTime();
          if (this.info.protectEndTime > curr) return;
          this.info.healthStatue.bug = 1;
          this.insectAnimation();
          this.showPlantGrowStatue(this.info.healthStatue);
          cc.systemEvent.emit("UPDATE_LAND", this.info);
        } else {
          this.insectTime--;
          console.log(this.insectTime);
        }
      },
      excuteShield: function excuteShield() {
        if (this.shieldTime <= 0) {
          this.hideShield();
          this.unschedule(this.excuteShield);
          cc.systemEvent.emit("UPDATE_LAND", this.info);
        } else this.shieldTime--;
      },
      updatePlantHealthStatue: function updatePlantHealthStatue(num) {
        var node = this.growStatue.node;
        if ("number" == typeof num) {
          !node.active && this.info.isUse && (this.growStatue.node.active = true);
          node.rotation = 0;
          node.position = cc.v2(0, 20);
          node.stopAllActions();
          this.growStatue.spriteFrame = this.statueList[num];
          node.scale = .1;
          var action = cc.sequence(cc.spawn(cc.moveTo(.5, cc.v2(0, 120)), cc.scaleTo(.5, 1)), cc.callFunc(function() {
            var action1 = cc.sequence(cc.spawn(cc.scaleTo(1, .9), cc.rotateBy(1, 10)), cc.spawn(cc.scaleTo(1, 1), cc.rotateBy(1, -10))).repeatForever();
            node.runAction(action1);
          }));
          this.growStatue.node.runAction(action);
        }
      },
      updatePlantGrowStatue: function updatePlantGrowStatue(type, num) {
        if ("number" == typeof type && "number" == typeof num) {
          if (!(num >= 0)) return;
          this.plantAnimationNode.changePlantTexture(type, num, this.info.index);
        }
      },
      isLandUsed: function isLandUsed(isUse) {
        this.growStatue.node.active = !!isUse;
      },
      isLandLock: function isLandLock(isUse) {
        var level, farmInfo = FarmUtils.getLocalData("localFarmInfo");
        level = farmInfo ? farmInfo.level : 1;
        this.displayLandStatue(this.info.isLock, isUse);
      },
      hideAllChildren: function hideAllChildren(list) {
        for (var i = 0; i < list.length; i++) list[i].active = false;
      },
      isEnoughBuy: function isEnoughBuy(cost) {
        var coins = cc.game.FarmUtils.getLocalData("localFarmInfo").coin;
        coins || (coins = 0);
        return coins >= cost;
      },
      displayLandStatue: function displayLandStatue(num, isUse) {
        switch (num) {
         case 0:
          this.earth.spriteFrame = this.list_locked_view[0];
          this.hideAllChildren(this.landStatueNodeList);
          this.landStatueNodeList[2].active = true;
          this.landStatueNodeList[2].getChildByName("level").getComponent(cc.Label).string = "lv " + this.info.unlockLevel;
          if (0 != this.info.isLock) {
            this.info.isLock = 0;
            cc.systemEvent.emit("UPDATE_LAND", this.info);
          }
          break;

         case 1:
          this.earth.spriteFrame = this.list_locked_view[0];
          this.hideAllChildren(this.landStatueNodeList);
          this.landStatueNodeList[1].active = true;
          if (1 != this.info.isLock) {
            this.info.isLock = 1;
            cc.systemEvent.emit("UPDATE_LAND", this.info);
          }
          break;

         case 2:
          this.earth.spriteFrame = this.list_locked_view[0];
          this.hideAllChildren(this.landStatueNodeList);
          var cost = FarmData.landUnlockAndLevelUpCost[this.info.index].cost;
          var price = this.landStatueNodeList[3];
          price.getComponent(cc.Sprite).spriteFrame = this.landUnlockCost[8 - this.info.index];
          if (this.isEnoughBuy(cost)) this.landStatueNodeList[3].active = true; else {
            this.landStatueNodeList[3].active = true;
            this.landStatueNodeList[0].active = true;
          }
          if (2 != this.info.isLock) {
            this.info.isLock = 2;
            cc.systemEvent.emit("UPDATE_LAND", this.info);
          }
          break;

         case 3:
          this.earth.spriteFrame = this.list_locked_view[1];
          this.hideAllChildren(this.landStatueNodeList);
          this.isLandUsed(isUse);
          if (3 != this.info.isLock) {
            this.info.isLock = 3;
            cc.systemEvent.emit("UPDATE_LAND", this.info);
          }
          console.log("\u50bb\u72cd\u5b50\uff0c\u8fdb\u6765\u4e86\u4e48\uff1f");
        }
      },
      landLocked: function landLocked(num) {
        this.earth.spriteFrame = this.list_locked_view[0];
        0 == num ? this.node_woodNotice.active = true : 1 == num ? this.node_icon_lock.active = true : 2 == num && (this.node_land_mask = true);
        this.label_unlockLevel.string = "lv " + this.info.unlockLevel;
      },
      landNormal: function landNormal() {
        if (this.info.isLock < 3) return;
        this.earth.spriteFrame = this.list_locked_view[1];
        this.node_tips.active = false;
        this.hideTipsNode();
      },
      managerLand: function managerLand(type) {
        if (1 == type) this.landLocked(); else if (2 == type) {
          if (this.info.isLock < 3) return;
          this.landNormal();
        } else 3 == type && this.landChoosed();
      },
      onTouchStart: function onTouchStart() {
        if (this.info.isLock < 3) {
          if (2 == this.info.isLock) {
            var worldPos = this.node.parent.convertToWorldSpaceAR(this.node.position);
            var obj = {};
            obj.worldPos = worldPos;
            obj.index = this.info.index;
            cc.director.farmDialog.showLandUnlockPormpt(obj);
          }
          return;
        }
        if (-1 == cc.director.currentPropsIndex && -1 == cc.director.currentPlantIndex) this.info.isUse ? this.operateByPlantStatue(this.info.healthStatue) : this.landChoosed("a"); else {
          if (cc.director.currentPlantIndex >= 0 && -1 == cc.director.currentPropsIndex) {
            if (this.info.isUse) return;
            this.cultivate();
          }
          if (cc.director.currentPropsIndex >= 0 && -1 == cc.director.currentPlantIndex) {
            if (!this.info.isUse) return;
            this.fertilization();
          }
        }
        cc.systemEvent.emit("UPDATE_LAND", this.info);
      },
      landChoosed: function landChoosed(str) {
        console.log("landchoosed!!", str);
        var event = new cc.Event.EventCustom("manager_land", true);
        event.detail = {
          index: this.info.index
        };
        this.node.dispatchEvent(event);
        if (!this.info.isUse || this.node_tips.active) {
          this.landNormal();
          return;
        }
        this.earth.spriteFrame = this.list_locked_view[2];
        this.node_tips.active = true;
        this.showTipsNode();
      },
      showTipsNode: function showTipsNode() {
        console.log("nimabizenmebuxianshi le?");
        if (!!this.shieldTime && this.shieldTime > 0) {
          this.node_tips.getComponent(cc.Sprite).spriteFrame = this.list_tips_bg[0];
          this.node_progress_reap.position = cc.v2(0, 60);
          this.node_progress_produce.position = cc.v2(0, 10);
          this.node_progress_protect.position = cc.v2(0, -40);
          this.settingReaptTime();
          this.settingProducePercent();
          this.settingProtectTime();
          this.node_progress_protect.active = true;
        } else {
          this.node_tips.getComponent(cc.Sprite).spriteFrame = this.list_tips_bg[1];
          this.node_progress_reap.position = cc.v2(0, 30);
          this.node_progress_produce.position = cc.v2(0, -10);
          this.settingReaptTime();
          this.settingProducePercent();
          this.node_progress_protect.active = false;
        }
      },
      settingProducePercent: function settingProducePercent() {
        var percent = this.node_progress_produce.getChildByName("percent").getComponent(cc.Label);
        var progress = this.node_progress_produce.getChildByName("outer").getComponent(cc.ProgressBar);
        if (1 == this.info.isReduceProduce) {
          progress.progress = .5;
          progress.barSprite.spriteFrame = this.list_inner_bar[0];
          percent.string = "50%";
        } else if (-1 == this.info.isReduceProduce) {
          progress.progress = 1;
          progress.barSprite.spriteFrame = this.list_inner_bar[1];
          percent.string = "100%";
        }
      },
      settingReaptTime: function settingReaptTime() {
        var reapPeriod = FarmData.plantInfo[this.info.type].cycle * unitTime;
        var progress = Math.floor(this.restTime / reapPeriod * 100) / 100;
        var progressBar = this.node_progress_reap.getChildByName("outer").getComponent(cc.ProgressBar);
        progressBar.progress = 1 - progress >= 0 ? 1 - progress : 1;
        this.showReapTimeCount();
        this.schedule(this.showReapTimeCount, 1);
      },
      settingProtectTime: function settingProtectTime() {
        if (!!this.shieldTime && this.shieldTime > 0) {
          var wholeTime = FarmData.propShopList[this.info.protectType].effectTime * unitTime;
          var progress = Math.floor(this.shieldTime / wholeTime * 100) / 100;
          var progressBar = this.node_progress_protect.getChildByName("outer").getComponent(cc.ProgressBar);
          progressBar.progress = progress;
          this.showProtectTimeCount();
          this.schedule(this.showProtectTimeCount, 1);
        }
      },
      showReapTimeCount: function showReapTimeCount() {
        var str = FarmUtils.countdown(this.restTime, 2);
        this.label_reap_time.string = new String(str);
      },
      showProtectTimeCount: function showProtectTimeCount() {
        var str = FarmUtils.countdown(this.shieldTime, 2);
        this.label_time_protectTime.string = new String(str);
      },
      hideTipsNode: function hideTipsNode() {
        this.unschedule(this.showNextWaterTime);
        this.unschedule(this.showReapTimeCount);
        this.unschedule(this.showProtectTimeCount);
      },
      showNextWaterTime: function showNextWaterTime() {
        var str = FarmUtils.countdown(this.restWaterTime, 2);
        this.label_tips_water_time.string = new String(str);
      },
      changePlantStatue: function changePlantStatue(type) {
        1 == type ? this.hideHealthStatue() : 2 == type && this.showPlantGrowStatue(this.info.healthStatue);
      },
      showPlantGrowStatue: function showPlantGrowStatue(healthStatue) {
        if (cc.director.currentPlantIndex >= 0 || cc.director.currentPropsIndex >= 0) return;
        if ("object" == typeof healthStatue) {
          var nameList = Object.keys(healthStatue);
          var len = nameList.length;
          var index = -1;
          for (var i = 0; i < len; i++) if (healthStatue[nameList[i]]) {
            index = i;
            break;
          }
          if (index >= 0) {
            console.log(index, "698!!");
            this.updatePlantHealthStatue(index);
          } else this.growStatue.node.active = false;
        }
      },
      operateByPlantStatue: function operateByPlantStatue(healthStatue) {
        if ("object" == typeof healthStatue) {
          var nameList = Object.keys(healthStatue);
          var len = nameList.length;
          var index = -1;
          for (var i = 0; i < len; i++) if (healthStatue[nameList[i]]) {
            this.updatePlantHealthStatue(i);
            index = i;
            break;
          }
          index >= 0 ? 0 == index ? this.pestControl() : 1 == index ? this.reap() : 2 == index ? this.water() : 3 == index && this.rootOut() : this.landChoosed("b");
        }
      },
      hideHealthStatue: function hideHealthStatue() {
        this.growStatue.node.active = false;
      },
      resetLandProp: function resetLandProp() {
        var info = {};
        info.index = this.info.index;
        info.type = 0;
        info.growthStatue = -1;
        info.healthStatue = {
          bug: 0,
          reap: 0,
          water: 0,
          withered: 0
        };
        info.isUse = false;
        info.isLock = this.info.isLock;
        info.waterTime = -1;
        info.restTime = -1;
        info.plantTime = -1;
        info.unlockLevel = this.info.unlockLevel;
        info.protectEndTime = this.info.protectEndTime;
        info.insectAppearTime = -1;
        info.isReduceProduce = -1;
        info.protectType = this.info.protectType;
        this.info = info;
      },
      reap: function reap() {
        this.hideHealthStatue();
        this.info.isUse = false;
        this.isLandUsed(false);
        var produce = this.getCurrentLevelReapNumber(this.info.type);
        console.log(this.info.type, produce, "425");
        if (1 == this.info.isReduceProduce) {
          produce = Math.floor(.5 * produce);
          console.log("ssssssssssssssssss");
        }
        var data = {
          type: this.info.type,
          number: produce
        };
        var coins = 0;
        var exp = FarmData.getReapExp(this.info.type, produce);
        var accumulateExpNumber = this.progressNode.getAccumulateExpNumber();
        exp += accumulateExpNumber;
        var wp = this.node.parent.convertToWorldSpaceAR(this.node.position);
        cc.systemEvent.emit("UPDATE_WAREHOUSE", {
          data: data,
          mode: 1,
          worldPos: wp
        });
        cc.systemEvent.emit("UPDATE_FARM", {
          exp: exp,
          coins: coins,
          worldPos: wp
        });
        this.addSeedPlantAmount(this.info.type);
        this.resetLandProp();
        this.plantAnimationNode.fadeOut();
        this.progressNode.resetAccumulateStartTime();
        this.progressNode.resetPlantStartTime(this.info.index);
        this.progressNode.hideProgressNode();
        cc.director.SoundManager.playSound("farm_reap");
        this.progressNode.active = false;
      },
      getCurrentLevelReapNumber: function getCurrentLevelReapNumber(type) {
        var sData = FarmUtils.getLocalData("seedData");
        sData || (sData = FarmData.seedData);
        var index = -1, produce;
        for (var i = 0; i < sData.length; i++) if (sData[i].type == type) {
          index = i;
          break;
        }
        index >= 0 && (produce = FarmData.getPlantProduce(sData[index].level, type));
        return produce;
      },
      addSeedPlantAmount: function addSeedPlantAmount(type) {
        var sData = FarmUtils.getLocalData("seedData");
        var index = -1;
        sData || (sData = FarmData.seedData);
        for (var i = 0; i < sData.length; i++) if (sData[i].type == type) {
          sData[i].plantCount += 1;
          index = i;
          break;
        }
        if (index >= 0) {
          var limit = FarmData.plantInfo[index].levelUplimite;
          if (sData[index].plantCount >= limit) {
            sData[index].plantCount -= limit;
            if (sData[index].level < 5) {
              sData[index].level += 1;
              index = -10;
            } else sData[index].level = 5;
          }
        }
        FarmUtils.setLocalData(sData, "seedData");
        -10 == index && cc.systemEvent.emit("SHOW_LEVELUP", {
          type: this.info.type
        });
      },
      water: function water() {
        this.hideHealthStatue();
        var reduceTime;
        reduceTime = FarmData.IndirectTime;
        var time = FarmUtils.getServerTime();
        this.info.healthStatue.water = 0;
        this.info.waterTime = time;
        this.restWaterTime = FarmData.plantInfo[this.info.type].waterIntervel * unitTime;
        this.updatePlantReapRestTime(reduceTime);
        this.schedule(this.excuteWater, 1);
        this.waterAnimation(5);
        var tempObj = FarmData.OperationReward[0];
        var exp = tempObj.exp;
        var coins = tempObj.coins;
        var wp = this.node.parent.convertToWorldSpaceAR(this.node.position);
        cc.systemEvent.emit("UPDATE_FARM", {
          exp: exp,
          coins: coins,
          worldPos: wp
        });
        cc.director.SoundManager.playSound("farm_water");
      },
      updatePlantReapRestTime: function updatePlantReapRestTime(time) {
        if (!this.info.isUse) return;
        if (!!this.restTime) if (this.restTime > time) {
          this.restTime = this.restTime - time;
          this.progressNode.addSpeedUpTimeExpToAccumulateExpNumber(false, time);
        } else {
          this.restTime = 1;
          this.progressNode.addSpeedUpTimeExpToAccumulateExpNumber(true, 0);
        }
        !!this.info.plantTime && this.info.plantTime > 0 && (this.info.plantTime -= time);
        cc.systemEvent.emit("UPDATE_LAND", this.info);
      },
      fertilization: function fertilization() {
        if (1 == this.info.healthStatue.reap) {
          cc.systemEvent.emit("SHOW_WORD_NOTICE", {
            code: 1003
          });
          return;
        }
        var type = cc.director.currentPropsIndex;
        var number = this.getPropsNumber(type);
        if (number > 0) {
          if (type < 4) {
            var reduceTime = FarmData.propShopList[type].effectTime * unitTime;
            this.updatePlantReapRestTime(reduceTime);
            this.fertAnimation(type);
          } else type >= 12 && type < 15 && this.addShield(type);
          cc.systemEvent.emit("UPDATE_PROPS", {
            data: {
              mode: 2,
              type: type
            }
          });
          var tempObj = FarmData.OperationReward[6];
          var exp = tempObj.exp;
          var coins = tempObj.coins;
          var wp = this.node.parent.convertToWorldSpaceAR(this.node.position);
          cc.systemEvent.emit("UPDATE_FARM", {
            exp: exp,
            coins: coins,
            worldPos: wp
          });
        } else cc.systemEvent.emit("SHOW_WORD_NOTICE", {
          code: 1008
        });
        console.log("\u65bd\u80a5");
        cc.director.SoundManager.playSound("farm_fert_1");
      },
      getPropsNumber: function getPropsNumber(type) {
        var propList = FarmUtils.getLocalData("propsData");
        if (!propList) return 0;
        var index = -1;
        for (var i = 0; i < propList.length; i++) if (propList[i].type == type) {
          index = i;
          break;
        }
        return index >= 0 ? propList[index].number : 0;
      },
      fertAnimation: function fertAnimation(type) {
        if (!this.info.isUse || this.info.isLock < 3) return;
        var fert = this.node_animaArea.getChildByName("fert");
        fert.active = true;
        var particle = fert.getComponent(cc.ParticleSystem);
        particle.resetSystem();
        var time = FarmData.propShopList[type].effectTime;
        this.scheduleOnce(function() {
          this.speedUpAnimation(time, "MINUTES");
          fert.active = false;
          cc.director.SoundManager.playSound("farm_fert_2");
        }, 1);
      },
      pestControl: function pestControl() {
        this.hideHealthStatue();
        console.log("bug");
        this.info.healthStatue.bug = 0;
        this.info.insectAppearTime = -1;
        this.insecAnimation();
        this.removeInsectAnimation();
        this.scheduleOnce(function() {
          this.showPlantGrowStatue(this.info.healthStatue);
        }, 2);
        var tempObj = FarmData.OperationReward[4];
        var exp = tempObj.exp;
        var coins = tempObj.coins;
        var wp = this.node.parent.convertToWorldSpaceAR(this.node.position);
        this.scheduleOnce(function() {
          cc.systemEvent.emit("UPDATE_FARM", {
            exp: exp,
            coins: coins,
            worldPos: wp
          });
        }, 1);
        cc.director.SoundManager.playSound("farm_insec");
      },
      rootOut: function rootOut() {
        this.resetLandProp();
        var tempObj = FarmData.OperationReward[2];
        var exp = tempObj.exp;
        var coins = tempObj.coins;
        var wp = this.node.parent.convertToWorldSpaceAR(this.node.position);
        cc.systemEvent.emit("UPDATE_FARM", {
          exp: exp,
          coins: coins,
          worldPos: wp
        });
      },
      cultivate: function cultivate() {
        this.info.type = cc.director.currentPlantIndex;
        var seedCount = FarmUtils.getDataProperty(this.info.type, "seedData", "number");
        if (seedCount > 0) {
          this.tempPart = Math.floor(FarmData.plantInfo[this.info.type].cycle * unitTime / 3);
          this.info.plantTime = FarmUtils.getServerTime();
          this.info.isUse = true;
          var healthStatue = {
            bug: 0,
            reap: 0,
            water: 0,
            withered: 0
          };
          this.info.healthStatue = healthStatue;
          this.info.type > 1 && (this.info.healthStatue.water = 1);
          this.info.growthStatue = 0;
          this.computedInsectAppearTime(this.info.plantTime, this.info.type);
          cc.systemEvent.emit("UPDATE_SEED", {
            data: {
              mode: 2,
              type: this.info.type,
              number: 1
            }
          });
          this.plantAnimationNode.changePlantTexture(this.info.type, this.info.growStatue, this.info.index);
          !!cc.director.isAutoWater && this.type > 1 && this.scheduleOnce(function() {
            this.water();
          }, 2);
          this.startReapInterVel();
          this.progressNode.initProgressNode(matureTime, 1, this.info);
          var tempObj = FarmData.OperationReward[1];
          var exp = tempObj.exp;
          var coins = tempObj.coins;
          var wp = this.node.parent.convertToWorldSpaceAR(this.node.position);
          cc.systemEvent.emit("UPDATE_FARM", {
            exp: exp,
            coins: coins,
            worldPos: wp
          });
        } else cc.systemEvent.emit("SHOW_WORD_NOTICE", {
          code: 1009
        });
        cc.director.SoundManager.playSound("farm_plant");
      },
      computedInsectAppearTime: function computedInsectAppearTime(currentTime, type) {
        if (type < 3) return;
        var item = FarmData.insectAppearTimeList[type];
        var min = item[0], max = item[1];
        var peroidtime = Math.floor(Math.random(max - min) + min) * unitTime;
        this.info.insectAppearTime = peroidtime > 0 ? peroidtime + currentTime : -1;
        this.insectTime = peroidtime;
        this.startInsectAppearIntervel();
      },
      compareInsectAppearTime: function compareInsectAppearTime() {
        console.log(this.info, "767");
        var current = FarmUtils.getServerTime();
        var insectAppearTime = this.info.insectAppearTime;
        if (current < insectAppearTime || -1 == insectAppearTime) {
          this.insectTime = insectAppearTime - current;
          if (this.insectTime > 0) {
            this.startInsectAppearIntervel();
            console.log("insect is not appear! start insect countdown !");
          }
          return;
        }
        console.log("insect is appear");
        console.log(insectAppearTime, this.info.protectEndTime, "848");
        if (insectAppearTime < this.info.protectEndTime) return;
        console.log("shenmegui ?");
        var peroid = FarmData.insectAppearTimeList[this.info.type][3] * unitTime;
        this.info.healthStatue.bug = 1;
        this.insectAnimation();
        current < insectAppearTime + peroid || (this.info.isReduceProduce = 1);
      },
      insectAnimation: function insectAnimation() {
        if (!this.info.isUse || this.info.isLock < 3) return;
        var insectNode = this.node.getChildByName("insectNode");
        var peroidPosition = FarmData.insectAppearPositionList[this.info.type][this.info.growthStatue];
        for (var i = 0; i < 4; i++) {
          var insect = void 0;
          insect = cc.director.insectPool.size() > 0 ? cc.director.insectPool.get() : cc.instantiate(cc.director.FarmManager.insect);
          insect.opacity = 0;
          insect.parent = insectNode;
          insect.position = peroidPosition[i];
          insect.runAction(cc.fadeIn(2));
          insect.getComponent(cc.Animation).play("insect");
        }
      },
      removeInsectAnimation: function removeInsectAnimation() {
        var _this = this;
        var insectNode = this.node.getChildByName("insectNode");
        var children = insectNode.children;
        if (children.length <= 0) return;
        var _loop = function _loop(i) {
          _this.scheduleOnce(function() {
            children[i].getComponent(cc.Animation).stop("insect");
            var action = cc.sequence(cc.fadeOut(1), cc.callFunc(function() {
              cc.director.insectPool.put(children[i]);
            }));
            children[i].runAction(action);
          }, 1);
        };
        for (var i = children.length - 1; i >= 0; i--) _loop(i);
      },
      addShield: function addShield(type) {
        var shield = this.node.getChildByName("protect");
        shield.active = true;
        var protect = shield.getChildByName("protect");
        protect.active = true;
        protect.getComponent(cc.ParticleSystem).resetSystem();
        var currTime = FarmUtils.getServerTime();
        var peroid = FarmData.propShopList[type].effectTime * unitTime;
        this.info.protectType = type;
        if (this.info.protectEndTime > currTime) {
          this.info.protectEndTime += peroid;
          this.shieldTime += peroid;
          if (cc.director.getScheduler().isScheduled(this.excuteShield, this)) return;
          this.startShieldIntervel();
        } else {
          this.info.protectEndTime = currTime + peroid;
          this.shieldTime = peroid;
          this.startShieldIntervel();
        }
        console.log(peroid, FarmData.propShopList[type].effectTime, "878");
        cc.director.SoundManager.playSound("farm_protect");
        cc.systemEvent.emit("UPDATE_LAND", this.info);
      },
      showShield: function showShield() {
        if (!this.info.protectEndTime && this.info.protectEndTime <= 0) return;
        var current = FarmUtils.getServerTime();
        if (this.info.protectEndTime > current) {
          var shield = this.node.getChildByName("protect");
          shield.active = true;
          this.shieldTime = this.info.protectEndTime - current;
          var protect = shield.getChildByName("protect");
          protect.active = true;
          protect.getComponent(cc.ParticleSystem).resetSystem();
          this.startShieldIntervel();
        }
      },
      hideShield: function hideShield() {
        var shield = this.node.getChildByName("protect");
        shield.active = false;
        var protect = shield.getChildByName("protect");
        protect.active = false;
        this.info.protectEndTime = -1;
      },
      getSeedNumberByType: function getSeedNumberByType(type) {
        var seedData = FarmUtils.getLocalData("seedData");
        if (!!seedData) {
          var index = -1;
          for (var i = 0; i < seedData.length; i++) if (seedData[i].type == type) {
            index = i;
            break;
          }
          return index >= 0 ? seedData[index]["number"] : 0;
        }
      },
      getLandInfo: function getLandInfo() {
        return !!this.info && this.info;
      },
      waterAnimation: function waterAnimation(num) {
        if (!this.info.isUse || this.info.isLock < 3) return;
        var start = FarmData.waterStartPos;
        var end = FarmData.waterEndPos;
        var item;
        for (var i = 0; i < start.length; i++) {
          item = cc.director.nodePool.size() > 0 ? cc.director.nodePool.get() : cc.instantiate(cc.director.FarmManager.waterFall);
          item.parent = this.node_animaArea;
          item.position = start[i];
          item.getComponent("item_fallWater").fallDown(end[i]);
        }
        this.scheduleOnce(function() {
          this.speedUpAnimation(num, "MINUTES");
        }, .5);
      },
      speedUpAnimation: function speedUpAnimation(num, str) {
        this.node_speedUp.active = true;
        var anima = this.node_speedUp.getComponent(cc.Animation);
        anima.play("speedUp");
        var endTime = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          this.node_speedUp.active = false;
          this.reduceTimeAnimation(num, str);
        }, endTime);
      },
      reduceTimeAnimation: function reduceTimeAnimation(num, str) {
        var reduceTime = this.node_animaArea.getChildByName("reduceTime");
        var number = reduceTime.getChildByName("number");
        var numberStr = number.getComponent(cc.Label);
        reduceTime.getComponent(cc.Label).string = str;
        numberStr.string = "." + num;
        reduceTime.position = cc.v2(50, -50);
        reduceTime.active = true;
        var action = cc.sequence(cc.fadeIn(.1), cc.moveTo(.5, cc.v2(50, 0)), cc.fadeOut(.1), cc.callFunc(function() {
          reduceTime.active = false;
        }));
        reduceTime.runAction(action);
      },
      start: function start() {},
      onDestroy: function onDestroy() {
        this.unschedule(this.excuteReap);
        this.unschedule(this.excuteWater);
      },
      insecAnimation: function insecAnimation() {
        var insec = cc.instantiate(this.insecMachine);
        insec.parent = this.node;
        insec.position = cc.v2(60, 120);
        var particle = insec.getComponent(cc.ParticleSystem);
        particle.resetSystem();
        var duration = particle.duration;
        this.scheduleOnce(function() {
          insec.removeFromParent();
        }, duration);
      },
      allLandPlantMove: function allLandPlantMove() {
        if (this.info.isLock < 3 || !this.info.isUse) {
          this.plantAnimationNode.hideView();
          return;
        }
        this.plantAnimationNode.changePlantTexture(this.info.type, this.info.growthStatue, this.info.index);
      }
    });
    cc._RF.pop();
  }, {
    "../FarmData": "FarmData",
    "../framUtils": "framUtils",
    "../plantAnimaNode": "plantAnimaNode",
    "../progressNode": "progressNode"
  } ],
  ground: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f325fcklOlLcLmFmH1umQQn", "ground");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        texture: cc.Sprite,
        viewList: [ cc.SpriteFrame ],
        bombCount: -1
      },
      initGroundData: function initGroundData(type) {
        this.bombCount = type;
        this.texture.spriteFrame = this.viewList[this.bombCount - 1];
        this.changeTexture(this.texture, this.bombCount - 1, this.viewList);
      },
      hitGround: function hitGround() {
        this.bombCount > 0 && this.changeTexture(this.texture, this.bombCount - 1, this.viewList);
      },
      changeTexture: function changeTexture(sprite, num, viewList) {
        if (!sprite) return;
        sprite instanceof cc.Sprite && (sprite.spriteFrame = viewList[num]);
        sprite instanceof cc.Node && (sprite.getComponent(cc.Sprite).spriteFrame = viewList[num]);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  guideNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afdf00Zsc9LUqSlq/HmhRTh", "guideNode");
    "use strict";
    var GameData = require("./gameData");
    var Utils = require("./utils");
    var stepList = [ "one_step", "two_step", "three_step", "four_step", "five_step", "six_step", "seven_step", "eight_step", "nine_step", "ten_step", "eleven_step", "twelve_step", "fourteen_step" ];
    var toolName = [ "btn1", "btn2", "btn3", "btn4" ];
    var offset = 400;
    cc.Class({
      extends: cc.Component,
      properties: {
        goal: cc.Node,
        finger: cc.Node,
        wordList: cc.Sprite,
        createList: [ cc.SpriteFrame ],
        funcList: [ cc.SpriteFrame ],
        explain: cc.Node,
        superWord: cc.SpriteFrame,
        balloonWord: cc.SpriteFrame,
        nutsWord: cc.SpriteFrame,
        firstWord: cc.SpriteFrame,
        vineWord: cc.SpriteFrame,
        toolList: cc.Node,
        arrow: cc.Node,
        playerTool_explain: cc.Node,
        playerToolList: [ cc.SpriteFrame ],
        hinderWordList: [ cc.SpriteFrame ],
        prefab_bubble: cc.Prefab
      },
      onLoad: function onLoad() {
        this.currentStep = -1;
        cc.systemEvent.on("EXCUTE_GUIDE_STEP", this.accordingLevelShowGuide, this);
        cc.systemEvent.on("PLAYER_TOOL_GUIDE", this.guide_playerTool, this);
        cc.systemEvent.on("WINDMILL_SECOND_GUIDE", this.guideWindmill_again, this);
        cc.systemEvent.on("STATUE_SECOND_GUIDE", this.guide_thirteen, this);
      },
      guide_one: function guide_one() {
        var one_step = this.node.getChildByName("one_step");
        this.currentStep = 1;
        one_step.active = true;
        var goalPosition = this.node.convertToNodeSpaceAR(this.goal.parent.convertToWorldSpaceAR(this.goal.position));
        var goal = cc.instantiate(this.goal);
        goal.parent = one_step;
        goal.position = goalPosition;
        goal.removeComponent("target");
        var node = this.node.getChildByName("one_step").getChildByName("arrow");
        node.x = this.goal.x + this.goal.width / 2;
        node.scale = 1;
        node.runAction(cc.sequence(cc.scaleTo(1, .95), cc.scaleTo(1, 1.05)).repeatForever());
      },
      one_continue: function one_continue() {
        cc.director.SoundManager.playSound("btnEffect");
        this.node.getChildByName("one_step").active = false;
        cc.sys.localStorage.setItem("one_step", "yes");
        this.guide_two();
      },
      showClickCubeList: function showClickCubeList(node, itemList, finger) {
        if (!itemList || itemList.length <= 0) return;
        node.active = true;
        finger.active = true;
        var container = node.getChildByName("container");
        for (var i = 0; i < itemList.length; i++) {
          var item = itemList[i];
          var index = Utils.indexValue(item.x, item.y);
          var cNode = GameData.starSprite[index];
          var wp = cNode.parent.convertToWorldSpaceAR(cNode.position);
          var son = cc.instantiate(cNode);
          son.position = container.convertToNodeSpaceAR(wp);
          son.runAction(cc.sequence(cc.scaleTo(1, .95), cc.scaleTo(1, 1.05)).repeatForever());
          container.addChild(son);
          this.addTouchEvent(son);
          if (1 == i) {
            var pos = node.convertToNodeSpaceAR(wp);
            finger.position = cc.v2(pos.x + 80, pos.y - 80);
          }
        }
        this.fingerScale();
      },
      showTool: function showTool(node, itemList, finger, isBubble) {
        if (!itemList || 0 == itemList.length) return;
        node.active = true;
        finger.active = true;
        var container = node.getChildByName("container");
        for (var i = 0; i < itemList.length; i++) {
          var item = itemList[i];
          var index = Utils.indexValue(item.x, item.y);
          var cNode = GameData.starSprite[index];
          var wp = cNode.parent.convertToWorldSpaceAR(cNode.position);
          var son = cc.instantiate(cNode);
          if (!!isBubble) {
            var bubble = cc.instantiate(this.prefab_bubble);
            bubble.parent = son;
          }
          son.position = container.convertToNodeSpaceAR(wp);
          son.runAction(cc.sequence(cc.scaleTo(1, .95), cc.scaleTo(1, 1.05)).repeatForever());
          container.addChild(son);
          this.addTouchEvent(son);
          if (0 == i) {
            var pos = node.convertToNodeSpaceAR(wp);
            finger.position = cc.v2(pos.x + 80, pos.y - 80);
            this.fingerScale();
          }
        }
      },
      tool_display: function tool_display() {
        var toolDisplay = this.node.getChildByName("tool_display");
        this.currentStep = 4;
        var item = cc.director.container.getGameTool();
        if (!!item) {
          10 == GameData.starMatrix[item.x][item.y] && cc.sys.localStorage.setItem("three_step", "yes");
          this.showTool(toolDisplay, [ item ], this.finger);
          this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.funcList[GameData.bestLevel - 1];
          this.explain.position = cc.v2(0, this.finger.y + offset);
          this.explain.active = true;
        }
      },
      guide_two: function guide_two() {
        var two_step = this.node.getChildByName("two_step");
        this.currentStep = 2;
        var itemList = Utils.canRemoveList(GameData.starMatrix);
        this.showClickCubeList(two_step, itemList, this.finger);
        this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.firstWord;
        this.explain.position = cc.v2(0, this.finger.y + offset);
        this.explain.active = true;
      },
      guide_three: function guide_three() {
        var itemList = Utils.chooseRemoveList(GameData.starMatrix).pop();
        if (!itemList) return;
        var three_step = this.node.getChildByName("three_step");
        this.currentStep = 3;
        this.showClickCubeList(three_step, itemList, this.finger);
        this.explain.position = cc.v2(0, this.finger.y + offset);
        this.explain.active = true;
        this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.createList[GameData.bestLevel - 1];
      },
      guide_four: function guide_four() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var itemList = Utils.judgeNearNode(GameData.starMatrix);
        if (itemList.length > 0) {
          this.currentStep = 4;
          this.showTool(toolDisplay, itemList, this.finger);
          this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.superWord;
          this.explain.position = cc.v2(0, this.finger.y + offset);
          this.explain.active = true;
          cc.sys.localStorage.setItem("four_step", "yes");
        }
      },
      guide_five: function guide_five() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var itemList = Utils.noticeLongestList(GameData.starMatrix);
        var balloonList = Utils.getBalloonClearList(GameData.starMatrix, itemList, 21);
        var newList = [].concat(itemList, balloonList);
        if (!!balloonList && balloonList.length > 0 && newList.length > 0) {
          this.currentStep = 5;
          this.showTool(toolDisplay, newList, this.finger);
          this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.balloonWord;
          this.explain.position = cc.v2(0, this.finger.y + offset + 100);
          this.explain.active = true;
        }
      },
      guide_six: function guide_six() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var itemList = Utils.noticeLongestList(GameData.starMatrix);
        var nutsList = Utils.getBalloonClearList(GameData.starMatrix, itemList, 20);
        if (!!nutsList && nutsList.length > 0) {
          this.currentStep = 6;
          this.showTool(toolDisplay, nutsList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.nutsWord;
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset);
          this.finger.active = false;
          this.arrow.active = true;
          this.arrow.position = cc.v2(this.finger.x, this.finger.y + 200);
          this.arrow.scale = .5;
          this.arrow.runAction(cc.sequence(cc.scaleTo(.5, .55), cc.scaleTo(.5, .45)).repeatForever());
          this.playerTool_explain.active = true;
        }
      },
      guide_seven: function guide_seven() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var vineList = Utils.getCurrentMapVineList(GameData.starMatrix);
        if (!!vineList && vineList.length > 0) {
          this.currentStep = 7;
          this.showTool(toolDisplay, vineList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.vineWord;
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_eight: function guide_eight() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var boxList = Utils.judgeCurrentMapHinderByType(GameData.starMatrix, 25);
        if (!!boxList && boxList.length > 0) {
          this.currentStep = 8;
          this.showTool(toolDisplay, boxList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[0];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_nine: function guide_nine() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var flowerList = Utils.judgeCurrentMapHinderByType(GameData.starMatrix, 26);
        if (!!flowerList && flowerList.length > 0) {
          this.currentStep = 9;
          this.showTool(toolDisplay, flowerList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[1];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_ten: function guide_ten() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var windmillList = Utils.judgeCurrentMapHinderByType(GameData.starMatrix, 27);
        if (!!windmillList && windmillList.length > 0) {
          this.currentStep = 10;
          this.showTool(toolDisplay, windmillList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[2];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guideWindmill_again: function guideWindmill_again(event) {
        var toolDisplay = this.node.getChildByName("tool_display");
        var windmillList = event.windmillList;
        if (!!windmillList && windmillList.length > 0) {
          this.currentStep = 11;
          this.showTool(toolDisplay, windmillList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[3];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_twelve: function guide_twelve() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var hideList = Utils.noticeLongestList(GameData.starMatrix);
        if (!!hideList && hideList.length > 0) {
          this.currentStep = 12;
          this.showTool(toolDisplay, hideList, this.finger);
          this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[4];
          this.explain.position = cc.v2(0, this.finger.y + offset + 100);
          this.explain.active = true;
          this.finger.active = true;
        }
      },
      guide_thirteen: function guide_thirteen() {
        this.currentStep = 13;
        var toolDisplay = this.node.getChildByName("tool_display");
        toolDisplay.active = true;
        var container = toolDisplay.getChildByName("container");
        container.removeAllChildren();
        this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[5];
        this.playerTool_explain.position = cc.v2(0, 0);
        this.finger.active = false;
        this.playerTool_explain.active = true;
      },
      guide_fourteen: function guide_fourteen() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var windmillList = Utils.judgeCurrentMapHinderByType(GameData.starMatrix, 37);
        if (!!windmillList && windmillList.length > 0) {
          this.currentStep = 14;
          this.showTool(toolDisplay, windmillList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[6];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_fifteen: function guide_fifteen() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var hinderList = Utils.noticeLongestList(GameData.starMatrix);
        if (!!hinderList && hinderList.length > 0) {
          this.currentStep = 15;
          this.showTool(toolDisplay, hinderList, this.finger, true);
          this.explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[7];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 100);
          this.finger.active = false;
          this.explain.active = true;
        }
      },
      guide_sixteen: function guide_sixteen() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var windmillList = Utils.judgeCurrentMapHinderByType(GameData.starMatrix, 39);
        if (!!windmillList && windmillList.length > 0) {
          this.currentStep = 16;
          this.showTool(toolDisplay, windmillList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[8];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_seventeen: function guide_seventeen() {
        var toolDisplay = this.node.getChildByName("tool_display");
        var windmillList = Utils.judgeCurrentMapHinderByType(GameData.starMatrix, 29);
        console.log(windmillList, "415");
        if (!!windmillList && windmillList.length > 0) {
          this.currentStep = 17;
          this.showTool(toolDisplay, windmillList, this.finger);
          this.playerTool_explain.getChildByName("word").getComponent(cc.Sprite).spriteFrame = this.hinderWordList[9];
          this.playerTool_explain.position = cc.v2(0, this.finger.y + offset + 20);
          this.finger.active = false;
          this.playerTool_explain.active = true;
        }
      },
      guide_playerTool: function guide_playerTool(event) {
        var index = event.num - 1;
        this.playerType = index;
        var node = this.toolList.getChildByName(toolName[index]);
        var word = this.playerTool_explain.getChildByName("word");
        word.getComponent(cc.Sprite).spriteFrame = this.playerToolList[index];
        var toolDisplay = this.node.getChildByName("tool_display");
        toolDisplay.active = true;
        this.playerTool_explain.active = true;
        this.currentStep = 4;
        var nodePos = toolDisplay.convertToNodeSpaceAR(node.parent.convertToWorldSpaceAR(node.position));
        var display = cc.instantiate(node);
        display.parent = toolDisplay;
        display.position = nodePos;
        display.removeComponent(cc.Widget);
        display.removeComponent(cc.Button);
        this.arrow.position = cc.v2(display.position.x, display.position.y + 170);
        this.arrow.active = true;
        this.arrow.runAction(cc.sequence(cc.scaleTo(.5, .95), cc.scaleTo(.5, 1.05)).repeatForever());
      },
      closePlayerToolGuide: function closePlayerToolGuide() {
        var toolDisplay = this.node.getChildByName("tool_display");
        toolDisplay.active = false;
        this.playerTool_explain.active = false;
        this.finger.active = false;
        if (6 == this.currentStep) {
          this.arrow.stopAllActions();
          this.arrow.active = false;
          cc.sys.localStorage.setItem("six_step", "yes");
        } else if (7 == this.currentStep) cc.sys.localStorage.setItem("seven_step", "yes"); else if (8 == this.currentStep) cc.sys.localStorage.setItem("eight_step", "yes"); else if (9 == this.currentStep) cc.sys.localStorage.setItem("nine_step", "yes"); else if (10 == this.currentStep) cc.sys.localStorage.setItem("ten_step", "yes"); else if (11 == this.currentStep) cc.sys.localStorage.setItem("eleven_step", "yes"); else if (13 == this.currentStep) cc.sys.localStorage.setItem("thirteen_step", "yes"); else if (14 == this.currentStep) cc.sys.localStorage.setItem("fourteen_step", "yes"); else if (16 == this.currentStep) cc.sys.localStorage.setItem("sixteen_step", "yes"); else if (17 == this.currentStep) cc.sys.localStorage.setItem("seventeen_step", "yes"); else {
          cc.director.SoundManager.playSound("btnEffect");
          !this.playerType || cc.sys.localStorage.setItem("playerIndex" + this.playerType, "yes");
          this.arrow.stopAllActions();
          this.arrow.active = false;
        }
      },
      fingerScale: function fingerScale() {
        this.finger.runAction(cc.sequence(cc.scaleTo(1, .9), cc.scaleTo(1, 1.1)).repeatForever());
      },
      addTouchEvent: function addTouchEvent(node) {
        node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
      },
      onTouchStart: function onTouchStart(event) {
        event.target.getComponent("block").onTouchStart();
        if (2 == this.currentStep) {
          var two_step = this.node.getChildByName("two_step");
          two_step.active = false;
          this.finger.active = false;
          cc.sys.localStorage.setItem("two_step", "yes");
          this.explain.active = false;
        } else if (3 == this.currentStep) {
          var three_step = this.node.getChildByName("three_step");
          three_step.active = false;
          this.finger.active = false;
          var container = three_step.getChildByName("container");
          container.removeAllChildren();
          this.explain.active = false;
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 1
          });
          setTimeout(function() {
            this.tool_display();
            cc.systemEvent.emit("GAMEMASK_CONTROL", {
              order: 2
            });
          }.bind(this), 1500);
        } else if (4 == this.currentStep) {
          var toolDisplay = this.node.getChildByName("tool_display");
          toolDisplay.active = false;
          this.finger.active = false;
          this.explain.active = false;
        } else if (5 == this.currentStep) {
          var _toolDisplay = this.node.getChildByName("tool_display");
          _toolDisplay.active = false;
          this.finger.active = false;
          this.explain.active = false;
          cc.sys.localStorage.setItem("five_step", "yes");
        } else if (12 == this.currentStep) {
          var _toolDisplay2 = this.node.getChildByName("tool_display");
          _toolDisplay2.active = false;
          this.finger.active = false;
          this.explain.active = false;
          cc.sys.localStorage.setItem("twelve_step", "yes");
        } else if (15 == this.currentStep) {
          var _toolDisplay3 = this.node.getChildByName("tool_display");
          _toolDisplay3.active = false;
          this.finger.active = false;
          this.explain.active = false;
          cc.sys.localStorage.setItem("fifteen_step", "yes");
        }
      },
      accordingLevelShowGuide: function accordingLevelShowGuide() {
        var level = GameData.bestLevel;
        var localRecord;
        switch (level) {
         case 0:
          localRecord = cc.sys.localStorage.getItem("one_step");
          localRecord || this.guide_one();
          break;

         case 1:
         case 2:
         case 3:
          localRecord = cc.sys.localStorage.getItem("three_step");
          localRecord || this.guide_three();
          break;

         case 4:
          localRecord = cc.sys.localStorage.getItem("four_step");
          localRecord || this.guide_four();
          break;

         case 5:
          localRecord = cc.sys.localStorage.getItem("five_step");
          localRecord || this.guide_five();
          break;

         case 7:
          localRecord = cc.sys.localStorage.getItem("eight_step");
          localRecord || this.guide_eight();
          break;

         case 14:
          localRecord = cc.sys.localStorage.getItem("six_step");
          localRecord || this.guide_six();
          break;

         case 19:
          localRecord = cc.sys.localStorage.getItem("seven_step");
          localRecord || this.guide_seven();
          break;

         case 24:
          localRecord = cc.sys.localStorage.getItem("fourteen_step");
          localRecord || this.guide_fourteen();
          break;

         case 39:
          localRecord = cc.sys.localStorage.getItem("twelve_step");
          localRecord || this.guide_twelve();
          break;

         case 59:
          localRecord = cc.sys.localStorage.getItem("ten_step");
          localRecord || this.guide_ten();
          break;

         case 89:
          localRecord = cc.sys.localStorage.getItem("fifteen_step");
          localRecord || this.guide_fifteen();
          break;

         case 129:
          localRecord = cc.sys.localStorage.getItem("nine_step");
          localRecord || this.guide_nine();
          break;

         case 179:
          localRecord = cc.sys.localStorage.getItem("sixteen_step");
          localRecord || this.guide_sixteen();
          break;

         case 229:
          localRecord = cc.sys.localStorage.getItem("seventeen_step");
          localRecord || this.guide_seventeen();
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "./gameData": "gameData",
    "./utils": "utils"
  } ],
  guideScreenNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f462BUxZFO8o7+gYaDzJ5Z", "guideScreenNode");
    "use strict";
    var rotate = 210;
    cc.Class({
      extends: cc.Component,
      properties: {
        blueBox: cc.Node,
        mask: cc.Node,
        container: cc.Node,
        pinkBox: cc.Node,
        wordList: [ cc.SpriteFrame ],
        word: cc.Sprite,
        explainNode: cc.Node,
        gameToolMask: cc.Node,
        circle_finger: cc.Node,
        circle: cc.Node,
        finger: cc.Node
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("START_FINGER_GUIDE", this.startFingerGuide, this);
        cc.systemEvent.on("END_FINGER_GUIDE", this.endFingerGuide, this);
        this.guideTempList = [];
      },
      tipsStarCollectBox: function tipsStarCollectBox() {
        this.boxType = 1;
        this.mask.active = true;
        var blueBox = cc.instantiate(this.blueBox);
        var wp = this.blueBox.parent.convertToWorldSpaceAR(this.blueBox.position);
        blueBox.removeComponent(cc.Widget);
        blueBox.parent = this.container;
        blueBox.position = this.container.convertToNodeSpaceAR(wp);
        this.word.spriteFrame = this.wordList[this.boxType - 1];
        var arrow = this.container.getChildByName("arrow");
        arrow.active = true;
        arrow.rotation = rotate;
        this.arrowAnimation(arrow);
      },
      tipsLevelBox: function tipsLevelBox() {
        this.boxType = 2;
        var blueBox = this.container.getChildByName("blueBox");
        !blueBox || blueBox.removeFromParent();
        this.mask.active = true;
        var pinkBox = cc.instantiate(this.pinkBox);
        var wp = this.pinkBox.parent.convertToWorldSpaceAR(this.pinkBox.position);
        pinkBox.removeComponent(cc.Widget);
        pinkBox.parent = this.container;
        pinkBox.position = this.container.convertToNodeSpaceAR(wp);
        this.word.spriteFrame = this.wordList[this.boxType - 1];
        var arrow = this.container.getChildByName("arrow");
        arrow.active = true;
        arrow.rotation = -rotate;
        this.arrowAnimation(arrow);
      },
      stepByType: function stepByType() {
        cc.director.SoundManager.playSound("btnEffect");
        if (1 == this.boxType) this.tipsLevelBox(); else if (2 == this.boxType) {
          this.hideView();
          cc.sys.localStorage.setItem("boxGuide", "yes");
          cc.systemEvent.emit("DAILYSIGN_GUIDE");
        } else if (3 == this.boxType) {
          this.hideView();
          cc.sys.localStorage.setItem("gameToolGuide", "yes");
        }
      },
      arrowAnimation: function arrowAnimation(node) {
        node.scale = .5;
        node.runAction(cc.sequence(cc.scaleTo(1, .45), cc.scaleTo(1, .65)).repeatForever());
      },
      hideView: function hideView() {
        var arrow = this.container.getChildByName("arrow");
        arrow.active = false;
        this.explainNode.active = false;
        this.node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(function() {
          this.node.active = false;
        }.bind(this))));
      },
      showScreenGuide: function showScreenGuide() {
        this.mask.opacity = 180;
        this.node.active = true;
        this.container.active = true;
        this.explainNode.active = true;
        this.explainNode.position = cc.v2(0, 0);
        this.gameToolMask.active = false;
        this.tipsStarCollectBox();
      },
      showGameToolGuide: function showGameToolGuide() {
        var local = cc.sys.localStorage.getItem("gameToolGuide");
        if (!!local) return;
        this.boxType = 3;
        this.node.active = true;
        this.mask.active = false;
        this.gameToolMask.active = true;
        this.explainNode.active = true;
        this.explainNode.position = cc.v2(this.gameToolMask.position.x, this.gameToolMask.position.y + 350);
        this.gameToolGuide();
      },
      gameToolGuide: function gameToolGuide() {
        this.word.spriteFrame = this.wordList[this.boxType - 1];
      },
      guideGestureShow: function guideGestureShow() {
        var pinkNode = this.container.getChildByName("pinkBox");
        !pinkNode || pinkNode.removeFromParent();
        this.node.active = true;
        this.node.opacity = 255;
        this.circle_finger.active = true;
        this.circle_finger.zIndex = 3;
        this.fingerCircleAnimation();
      },
      fingerCircleAnimation: function fingerCircleAnimation() {
        var self = this;
        var action_circle = cc.sequence(cc.callFunc(function() {
          self.circle.scale = 3;
        }), cc.scaleTo(2, .1)).repeatForever();
        var action_finger = cc.sequence(cc.scaleTo(.5, 1.05), cc.scaleTo(1, .95), cc.scaleTo(.5, 1)).repeatForever();
        this.finger.runAction(action_finger);
        this.circle.runAction(action_circle);
      },
      guideGestureHide: function guideGestureHide() {
        this.circle_finger.active = false;
        this.finger.stopAllActions();
        this.circle.stopAllActions();
      },
      startFingerGuide: function startFingerGuide(event) {
        this.mask.active = true;
        var targetNode = cc.instantiate(event.targetNode);
        targetNode.parent = this.node;
        this.guideTempList.push(targetNode);
        var pos = this.node.convertToNodeSpaceAR(event.worldPos);
        this.circle_finger.position = pos;
        this.guideGestureShow();
      },
      endFingerGuide: function endFingerGuide() {
        if (!!this.mask.active) {
          this.mask.active = false;
          if (this.guideTempList.length > 0) {
            while (this.guideTempList.length > 0) {
              var node = this.guideTempList.pop();
              node.removeFromParent();
            }
            this.guideGestureHide();
          }
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  header: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d7419V+k1JhrnZQluBcDzs", "header");
    "use strict";
    var GameData = require("../gameData");
    var Utils = require("../utils");
    var lifeInterval = 3600;
    var maxLife = 6;
    cc.Class({
      extends: cc.Component,
      properties: {
        lifeNumber: cc.Label,
        coinsNumber: cc.Label,
        lifeDisplay: cc.Node,
        timeDisplay: cc.Node
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("UPDATE_COINS", this.changeCoinsNumber, this);
        cc.systemEvent.on("UPDATE_LIFE", this.changeLifeNumber, this);
        cc.systemEvent.on("UPDATE_TIME_LABEL", this.changeLifeNumber, this);
      },
      changeCoinsNumber: function changeCoinsNumber() {
        var data = GameData.getGameData();
        this.coinsNumber.string = data.starCount + "";
      },
      changeLifeNumber: function changeLifeNumber() {
        var data = GameData.getGameData();
        if (data.lifeNumber > 0) {
          this.lifeNumber.string = data.lifeNumber + "";
          this.lifeDisplay.active = true;
          this.timeDisplay.active = false;
        } else {
          this.lifeDisplay.active = false;
          this.timeDisplay.active = true;
        }
        var isScheduled = cc.director.getScheduler().isScheduled(this.timeDowmCount, this);
        if (!isScheduled && data.lifeNumber < maxLife) {
          this.timeCount();
          cc.systemEvent.emit("TIME_COUNT_FUNC");
        }
      },
      changeTimeLabel: function changeTimeLabel(event) {
        if (!this.timeDisplay.active) return;
        var str = event.str;
        this.timeDisplay.getComponent(cc.Label).string = str;
      },
      timeCount: function timeCount() {
        if (GameData.lifeNumber < maxLife) {
          var endTime = cc.sys.localStorage.getItem("costTime");
          if (!endTime) {
            endTime = Math.floor(new Date().getTime() / 1e3) + lifeInterval;
            cc.sys.localStorage.setItem("restTime", endTime);
          } else endTime = parseInt(endTime) + lifeInterval;
          this.time = endTime;
          this.timeDowmCount();
          this.schedule(this.timeDowmCount, 1);
        } else {
          var data = GameData.getGameData();
          this.lifeNumber.string = "" + data.lifeNumber;
        }
      },
      timeDowmCount: function timeDowmCount() {
        var label = Utils.countDonwTime(this.time);
        if (!label) {
          this.unschedule(this.timeDowmCount);
          return;
        }
        this.timeDisplay.getComponent(cc.Label).string = label;
      },
      loadNextTime: function loadNextTime() {
        var current = Math.floor(new Date().getTime() / 1e3);
        var costTime = cc.sys.localStorage.getItem("costTime");
        var endTime;
        if (!costTime) {
          var _data = GameData.getGameData();
          _data.lifeNumber > maxLife ? GameData.lifeNumber = _data.lifeNumber : GameData.lifeNumber = maxLife;
          GameData.storeGameData();
          window.NativeManager.reportLifeChanged(GameData.lifeNumber);
        } else {
          costTime = parseInt(costTime);
          if (maxLife - GameData.lifeNumber < 0) {
            cc.systemEvent.emit("UPDATE_LIFE");
            cc.systemEvent.emit("UPDATE_COINS");
            return;
          }
          endTime = costTime + (maxLife - GameData.lifeNumber) * lifeInterval;
          if (current - endTime <= 0) {
            var count = Math.floor((current - costTime) / lifeInterval);
            count >= 0 ? count : 0;
            GameData.lifeNumber += count;
            window.NativeManager.reportLifeChanged(GameData.lifeNumber);
            costTime = count * lifeInterval + parseInt(costTime);
            GameData.storeGameData();
            cc.sys.localStorage.setItem("costTime", costTime);
            cc.systemEvent.emit("UPDATE_LIFE");
            cc.systemEvent.emit("UPDATE_COINS");
            return;
          }
          var data = GameData.getGameData();
          if (data.lifeNumber > maxLife) GameData.lifeNumber = data.lifeNumber; else {
            GameData.lifeNumber = maxLife;
            GameData.storeGameData();
          }
          window.NativeManager.reportLifeChanged(GameData.lifeNumber);
          cc.sys.localStorage.removeItem("costTime");
        }
        cc.systemEvent.emit("UPDATE_LIFE");
        cc.systemEvent.emit("UPDATE_COINS");
      },
      start: function start() {
        this.loadNextTime();
        this.changeLifeNumber();
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  hinderPreview: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39d61pviM5M/aFSBeJQpV/K", "hinderPreview");
    "use strict";
    var GameData = require("../gameData");
    var correctDistance = 750;
    var stageList = [ 5, 7, 14, 19, 24, 39, 59, 89, 129, 179, 229 ];
    cc.Class({
      extends: cc.Component,
      properties: {
        previewContainer: cc.Node,
        prefab_item: cc.Prefab,
        scrollView: cc.ScrollView
      },
      judgeElement: function judgeElement(level) {
        for (var i = 0; i < stageList.length; i++) {
          if (level < stageList[0]) return false;
          if (level >= stageList[i] && (level < stageList[i + 1] || i == stageList.length - 1)) return i;
        }
      },
      showView: function showView() {
        this.node.active = true;
        var index = this.judgeElement(GameData.bestLevel);
        this.addHinderViewItem(index);
      },
      hideView: function hideView() {
        this.node.active = false;
        this.judgeIsFill();
      },
      addHinderViewItem: function addHinderViewItem(index) {
        var height = 734;
        for (var i = 0; i < stageList.length; i++) {
          var item = void 0;
          item = !!this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.prefab_item);
          var statusNumber = void 0;
          height = item.height;
          statusNumber = "boolean" == typeof index && false == index ? 0 == i ? 2 : 3 : i <= index ? 1 : i == index + 1 ? 2 : 3;
          item.parent = this.previewContainer;
          var script = item.getComponent("item_hinderPreview");
          script.initItemData(i, statusNumber);
        }
        this.comingSoonHinderPreview();
        this.jumpToCurrentElementPosition(index, height);
      },
      comingSoonHinderPreview: function comingSoonHinderPreview() {
        var item;
        item = !!this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.prefab_item);
        item.parent = this.previewContainer;
        var script = item.getComponent("item_hinderPreview");
        script.comingSoon();
      },
      judgeIsFill: function judgeIsFill() {
        var chidlren = this.previewContainer.children;
        if (chidlren.length > 0) {
          this.itemPool = new cc.NodePool();
          for (var i = chidlren.length - 1; i >= 0; i--) {
            var item = chidlren[i];
            "item_hinderPreview" == item.name ? this.itemPool.put(item) : item.removeFromParent(true);
          }
        }
      },
      jumpToCurrentElementPosition: function jumpToCurrentElementPosition(index, height) {
        "number" != typeof index && (index = 0);
        this.previewContainer.y = -index * height - correctDistance;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData"
  } ],
  interface: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02e1dtJ4pJIN7ag9kbszep/", "interface");
    "use strict";
    var Utils = require("./utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        wordList: [ cc.SpriteFrame ],
        toolViewList: [ cc.SpriteFrame ],
        toolView: cc.Node
      },
      onLoad: function onLoad() {},
      jumpToGameView: function jumpToGameView() {
        cc.director.preloadScene("gameView");
        this.scheduleOnce(function() {
          this.node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(function() {
            cc.director.NativeManager.showInterstitialAd(3);
            cc.director.loadScene("gameView");
          })));
        }, 4);
      },
      jumpToMainScreen: function jumpToMainScreen() {
        cc.director.preloadScene("mainScreen");
        this.scheduleOnce(function() {
          this.node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(function() {
            cc.director.NativeManager.showInterstitialAd(3);
            cc.director.loadScene("mainScreen");
          })));
        }, 3);
      },
      showRandomTipsPhoto: function showRandomTipsPhoto() {
        var isFresh = cc.sys.localStorage.getItem("isFresh");
        var random;
        if (isFresh) random = Math.floor(Math.random() * this.toolViewList.length); else {
          random = 9;
          cc.sys.localStorage.setItem("isFresh", "yes");
        }
        this.toolView.getComponent(cc.Sprite).spriteFrame = this.toolViewList[random];
      },
      start: function start() {
        this.showRandomTipsPhoto();
        Utils.resize();
        1 == cc.director.jumpCode && this.jumpToGameView();
        2 == cc.director.jumpCode && this.jumpToMainScreen();
      },
      onDestroy: function onDestroy() {}
    });
    cc._RF.pop();
  }, {
    "./utils": "utils"
  } ],
  item_daily_view: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aa05bCBryROfouvZB90Wi2q", "item_daily_view");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        light: cc.Node,
        view: cc.Sprite,
        viewList: [ cc.SpriteFrame ]
      },
      initView: function initView(type) {
        this.view.spriteFrame = this.viewList[type];
        this.lightAnimation();
      },
      lightAnimation: function lightAnimation() {
        var action = cc.sequence(cc.rotateBy(2, 90), cc.fadeOut(.2));
        this.light.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_daily: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "902fcGBuixMHJ5p6ZOZDb0g", "item_daily");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        reward: cc.Sprite,
        dayView: cc.Sprite,
        bgView: cc.Sprite,
        markView: cc.Node,
        light: cc.Node,
        rewardList: [ cc.SpriteFrame ],
        dayList: [ cc.SpriteFrame ],
        bgList: [ cc.SpriteFrame ]
      },
      initItem: function initItem(data) {
        this.data = data;
        this.judgeStatus(data.status);
        this.changeIndex(data.index);
        this.changeRewardView(data.index);
      },
      judgeStatus: function judgeStatus(statu) {
        this.markView.active = 1 == statu;
        if (2 == statu) {
          this.lightAnimation();
          this.node.getComponent(cc.Button).interactable = true;
          this.reward.node.y = 0;
          this.dayView.node.active = false;
        }
        this.changeBgView(statu);
      },
      changeBgView: function changeBgView(statu) {
        this.bgView.spriteFrame = this.bgList[statu - 1];
      },
      changeRewardView: function changeRewardView(type) {
        this.reward.spriteFrame = this.rewardList[type];
      },
      lightAnimation: function lightAnimation() {
        this.light.active = true;
        this.light.runAction(cc.rotateBy(2, 90).repeatForever());
      },
      changeIndex: function changeIndex(index) {
        this.dayView.spriteFrame = this.dayList[index];
      },
      clickEvent: function clickEvent() {
        var event = new cc.Event.EventCustom("get_reward", true);
        var pos = this.node.parent.convertToWorldSpaceAR(this.node.position);
        this.data.pos = pos;
        event.detail = this.data;
        this.node.dispatchEvent(event);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_fallWater: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9769kjEvtK8o/oyPFHYe1o", "item_fallWater");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        water: cc.Node,
        waterAnima: cc.Node
      },
      fallDown: function fallDown(pos) {
        var self = this;
        self.node.active = true;
        self.water.active = true;
        self.waterAnima.active = false;
        var action = cc.sequence(cc.moveTo(.5, pos), cc.callFunc(function() {
          self.water.active = false;
          self.waterAnima.active = true;
          self.waterFallDownAnimation();
        }));
        this.node.runAction(action);
      },
      waterFallDownAnimation: function waterFallDownAnimation() {
        var anima = this.waterAnima.getComponent(cc.Animation);
        anima.play("waterFall");
        var endtime = anima.getClips()[0].duration;
        this.scheduleOnce(function() {
          this.waterAnima.active = false;
          cc.director.nodePool.put(this.node);
        }, endtime);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_farm_backpack: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1e98m1UFJNrp6neorPAgd7", "item_farm_backpack");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        sprite_itemView: cc.Sprite,
        list_itemView: [ cc.SpriteFrame ],
        label_itemEffectTime: cc.Label,
        label_itemNumber: cc.Label
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.showFertilization, this);
      },
      initItem: function initItem(data) {
        console.log(data);
        this.data = data;
        this.updateView(data.type);
        this.label_itemEffectTime.string = new String(data.timeStr);
        this.updateNumber(data.number);
      },
      updateView: function updateView(type) {
        "number" == typeof type ? this.sprite_itemView.spriteFrame = this.list_itemView[type] : cc.log("type is null or params error!----view");
      },
      updateEffectTime: function updateEffectTime(type) {
        "number" == typeof type ? this.sprite_itemEffectTime.spriteFrame = this.list_effectTime[type] : cc.log("type is null or params error---effectTime!");
      },
      updateNumber: function updateNumber(num) {
        this.label_itemNumber.string = new String(num);
      },
      showFertilization: function showFertilization() {
        if (this.data.number > 0) {
          cc.director.currentPropsIndex = this.data.type;
          if (this.data.type >= 0 && this.data.type < 4 || this.data.type >= 12 && this.data.type < 15) {
            cc.director.farmDialog.hidePropsView();
            cc.director.farmDialog.showOperateView();
            cc.director.currentPropsIndex = this.data.type;
            this.data.mode = 1;
            cc.systemEvent.emit("SHOW_OPERATE", {
              data: this.data
            });
          } else {
            var event = new cc.Event.EventCustom("atuoUseProp", true);
            this.data.mode = 1;
            event.detail = {
              data: this.data
            };
            this.node.dispatchEvent(event);
            cc.systemEvent.emit("SHOW_OPERATE", {
              data: this.data
            });
          }
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_farm_message: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52190Q0rCpMM59iwchgu4bW", "item_farm_message");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        headView: cc.Sprite,
        atlas_headView: cc.SpriteAtlas,
        friendName: cc.Label,
        level: cc.Label,
        label_time: cc.Label
      },
      initItemDeatail: function initItemDeatail(data) {
        this.updateHeadView(data.country);
        this.updateFriendName(data.name);
        this.updateLevel(data.level);
        this.updateTime(data.time);
      },
      updateHeadView: function updateHeadView(index) {
        this.headView.spriteFrame = this.atlas_headView.getSpriteFrame("country" + index);
      },
      updateFriendName: function updateFriendName(name) {
        this.friendName.string = new String(name);
      },
      updateLevel: function updateLevel(level) {
        this.level.string = new String(level);
      },
      updateTime: function updateTime(stamp) {
        var date = new Date(1e3 * stamp);
        var hour = date.getHours();
        var min = date.getMinutes();
        var str = hour + ":" + min;
        this.label_time.string = str;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_farm_plant_seed: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f72e2yG+eRJKJTpD7ftrZcI", "item_farm_plant_seed");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        sprite_view: cc.Sprite,
        label_number: cc.Label,
        list_view: [ cc.SpriteFrame ],
        list_view_lock: [ cc.SpriteFrame ],
        node_locked: cc.Node,
        label_locked_level: cc.Label,
        node_buy: cc.Node,
        label_buy_price: cc.Label
      },
      onLoad: function onLoad() {},
      updateItem: function updateItem(data, currentLevel) {
        this.data = data;
        if (data.limitedLevel <= currentLevel) {
          this.node.on(cc.Node.EventType.TOUCH_END, this.showPlantOperate, this);
          this.plantUnlocked();
        } else this.plantLocked();
      },
      plantLocked: function plantLocked() {
        this.updateUnlockedLevel(this.data.limitedLevel);
        this.showLockedState(this.data.isUnlock);
      },
      plantUnlocked: function plantUnlocked() {
        this.node_locked.active = false;
        this.updateSpriteView(this.data.type, this.list_view);
        if (this.data.number > 0) {
          this.updateNumber(this.data.number);
          this.label_number.node.active = true;
        } else {
          this.node_buy.active = true;
          this.updateBuyPrice(this.data.price);
        }
      },
      updateSpriteView: function updateSpriteView(type, list) {
        "number" == typeof type ? this.sprite_view.spriteFrame = list[type] : cc.log("error:type is not a number,37");
      },
      updateNumber: function updateNumber(num) {
        if ("number" == typeof num) if (num > 0) {
          this.hideBuyBtn();
          this.label_number.string = num + "";
        } else this.showBuybtn(); else cc.log("error:num is not a number,51");
      },
      updateUnlockedLevel: function updateUnlockedLevel(num) {
        "number" == typeof num ? this.label_locked_level.string = "" + num : cc.log("error:num is not a number,60");
      },
      updateBuyPrice: function updateBuyPrice(num) {
        "number" == typeof num ? this.label_buy_price.string = num + "" : cc.log("error:num is not a number,69");
      },
      showLockedState: function showLockedState() {
        this.label_number.node.active = false;
        this.node_buy.active = false;
        this.node_locked.active = true;
        this.updateSpriteView(this.data.type, this.list_view_lock);
      },
      showBuybtn: function showBuybtn() {
        this.node_locked.active = false;
        this.label_number.node.active = false;
        this.node_buy.active = true;
      },
      hideBuyBtn: function hideBuyBtn() {
        this.node_locked.active = false;
        this.label_number.node.active = true;
        this.node_buy.active = false;
      },
      showPlantOperate: function showPlantOperate() {
        if (!!this.data.isUnlock && this.data.number > 0) {
          cc.director.farmDialog.hidePlantPrompt();
          cc.director.farmDialog.showOperateView();
          cc.director.currentPlantIndex = this.data.type;
          this.data.mode = 0;
          cc.systemEvent.emit("SHOW_OPERATE", {
            data: this.data
          });
        }
      },
      buyClick: function buyClick() {
        var event = new cc.Event.EventCustom("touchBuyBtn", true);
        this.node.dispatchEvent(event);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_farm_prop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38ae6bSY9pAWZsEVyLywRke", "item_farm_prop");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        effectTime: cc.Label,
        item_view: cc.Sprite,
        item_view_viewList: [ cc.SpriteFrame ],
        item_costNum: cc.Label,
        label_name: cc.Label,
        node_addItem: cc.Node
      },
      updateItem: function updateItem(data) {
        this.data = data;
        this.updateItemView(this.data.type);
        this.item_costNum.string = data.cost + "";
        this.updateLabelString(data.price, this.item_costNum);
        this.updateLabelString(data.name, this.label_name);
        this.updateLabelString(data.timeStr, this.effectTime);
      },
      buy_fertilizer: function buy_fertilizer() {
        var event = new cc.Event.EventCustom("buy_prop", true);
        event.detail = {
          price: this.data.price,
          type: this.data.type
        };
        this.node.dispatchEvent(event);
        this.tipsBuySuccess();
      },
      tipsBuySuccess: function tipsBuySuccess() {
        var node = cc.instantiate(this.node_addItem);
        var action = cc.sequence(cc.fadeIn(.1), cc.moveTo(.5, cc.v2(node.position.x, node.position.y + 50)), cc.fadeOut(.1), cc.callFunc(function() {
          node.removeFromParent();
        }));
        node.active = true;
        node.parent = this.node;
        node.runAction(action);
      },
      updateItemView: function updateItemView(type) {
        this.item_view.spriteFrame = this.item_view_viewList[type];
      },
      updateItemName: function updateItemName(type) {
        var num;
        type < 4 ? num = 0 : type < 8 ? num = 1 : type < 12 ? num = 2 : type < 15 && (num = 3);
        this.sprite_name.spriteFrame = this.list_itemName[num];
      },
      updateLabelString: function updateLabelString(str, Label) {
        Label.string = new String(str);
      },
      isEnoughBuy: function isEnoughBuy() {
        var coins = cc.game.FarmUtils.getLocalData("localFarmInfo").coin;
        coins || (coins = 0);
        if (coins >= this.data.cost) return true;
        cc.systemEvent.emit("SHOW_WORD_NOTICE", {
          code: 1001
        });
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_farm_rank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a405eB9ZlZCqoc1S5yfraRa", "item_farm_rank");
    "use strict";
    var levelSpace = 40;
    cc.Class({
      extends: cc.Component,
      properties: {
        sprite_headView: cc.Sprite,
        sprite_rankGrade: cc.Sprite,
        label_rankGrade: cc.Label,
        label_exp: cc.Label,
        label_name: cc.Label,
        label_level: cc.Label,
        spriteAtlas_country: cc.SpriteAtlas,
        list_rankGrade: [ cc.SpriteFrame ]
      },
      initItemDetail: function initItemDetail(data) {
        this.updateHeadView(data.country);
        this.updateNickName(data.name);
        this.updateRankGrade(data.index);
        this.updateLevel(data.fmlevel);
        this.updateExp(data.fmexp);
      },
      updateHeadView: function updateHeadView(index) {
        this.sprite_headView.spriteFrame = this.spriteAtlas_country.getSpriteFrame("country" + index);
      },
      updateNickName: function updateNickName(name) {
        this.changeLabelString(this.label_name, name);
      },
      updateRankGrade: function updateRankGrade(num) {
        if (num > 2) {
          num += 1;
          this.changeLabelString(label_rankGrade, num);
          this.sprite_rankGrade.node.active = false;
          this.label_rankGrade.node.active = true;
        } else {
          this.sprite_rankGrade.node.active = true;
          this.label_rankGrade.node.active = false;
          this.sprite_rankGrade.spriteFrame = this.list_rankGrade[num];
        }
      },
      updateLevel: function updateLevel(num) {
        this.changeLabelString(this.label_level, num);
        this.label_level.node.getComponent(cc.Widget).left = levelSpace;
      },
      updateExp: function updateExp(num) {
        this.changeLabelString(this.label_exp, num);
        this.label_exp.node.getComponent(cc.Widget).left = levelSpace;
      },
      changeLabelString: function changeLabelString(label, str) {
        label.string = new String(str);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_farm_seed: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "090649pyThP8p6U0kW8/HJm", "item_farm_seed");
    "use strict";
    var FarmData = require("../FarmData");
    cc.Class({
      extends: cc.Component,
      properties: {
        itme_level: cc.Label,
        itemView: cc.Sprite,
        item_name: cc.Label,
        item_get_icon: cc.Sprite,
        item_get_number: cc.Label,
        item_sell_price: cc.Label,
        item_time_cost: cc.Label,
        item_amount_number: cc.Label,
        itemView_viewList: [ cc.SpriteFrame ],
        node_display_unlock: cc.Node,
        node_display_lock: cc.Node,
        label_lock_name: cc.Label,
        label_lock_level: cc.Label,
        sprite_lock_view: cc.Sprite,
        list_lock_view: [ cc.SpriteFrame ],
        item_bg: cc.Sprite,
        list_itembg: [ cc.SpriteFrame ],
        node_addItem: cc.Node
      },
      initItemSeed: function initItemSeed(data, currentLevel) {
        this.data = data;
        console.log(data);
        if (data.limitedlevel <= currentLevel) {
          this.changeItemBg(0);
          this.updateUnlockDetail(data);
        } else {
          this.changeItemBg(1);
          this.updateLockDetail(data);
        }
      },
      updateItemViewByType: function updateItemViewByType(data) {
        this.itemView.spriteFrame = this.itemView_viewList[data.type];
        this.item_name.string = new String(data.name);
        this.item_time_cost.string = new String(data.timeCost);
        this.item_time_cost.getComponent(cc.Widget).left = 40;
      },
      updateLabelStr: function updateLabelStr(label, str) {
        label.string = new String(str);
      },
      tipsBuySuccess: function tipsBuySuccess() {
        console.log("fuck!!!");
        var node = cc.instantiate(this.node_addItem);
        var action = cc.sequence(cc.fadeIn(.1), cc.moveTo(.5, cc.v2(node.position.x, node.position.y + 50)), cc.fadeOut(.1), cc.callFunc(function() {
          node.removeFromParent();
        }));
        node.active = true;
        node.parent = this.node;
        node.runAction(action);
      },
      buySeed: function buySeed() {
        if (this.isEnoughBuy()) {
          var event = new cc.Event.EventCustom("buySeed", true);
          event.detail = this.data;
          this.node.dispatchEvent(event);
          this.changeSeedNumber();
          this.tipsBuySuccess();
        } else cc.systemEvent.emit("SHOW_WORD_NOTICE", {
          code: 1001
        });
      },
      changeSeedNumber: function changeSeedNumber() {
        this.data.number += 1;
        this.updateLabelStr(this.item_amount_number, this.data.number);
      },
      changeItemBg: function changeItemBg(type) {
        this.item_bg.spriteFrame = this.list_itembg[type];
      },
      isEnoughBuy: function isEnoughBuy() {
        var coins = cc.game.FarmUtils.getLocalData("localFarmInfo").coin;
        coins || (coins = 0);
        return coins >= this.data.price;
      },
      updateLockDetail: function updateLockDetail(data) {
        this.node_display_unlock.active = false;
        this.node_display_lock.active = true;
        this.label_lock_name.string = new String(data.name);
        this.label_lock_level.string = new String("level " + data.limitedlevel + " unlock");
        this.sprite_lock_view.spriteFrame = this.list_lock_view[data.type];
      },
      updateUnlockDetail: function updateUnlockDetail(data) {
        this.node_display_unlock.active = true;
        this.node_display_lock.active = false;
        this.itme_level.string = "lv." + data.level;
        this.updateItemViewByType(data);
        this.updateLabelStr(this.item_sell_price, data.price);
        this.updateLabelStr(this.item_amount_number, data.number);
        this.updateLabelStr(this.item_get_number, data.produce);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../FarmData": "FarmData"
  } ],
  item_farm_warehouse: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ab2a/DaMhG0a+aOd2AarAu", "item_farm_warehouse");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        view: cc.Node,
        list_view: [ cc.SpriteFrame ],
        label_number: cc.Label
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
      },
      initItemDetail: function initItemDetail(data) {
        this.data = data;
        this.updateNumber(data.number);
        this.updateView(data.type);
      },
      updateNumber: function updateNumber(num) {
        "number" == typeof num ? this.label_number.string = "" + num : cc.log("The params is not number!");
      },
      updateView: function updateView(type) {
        "number" == typeof type && (this.view.getComponent(cc.Sprite).spriteFrame = this.list_view[type]);
      },
      onTouchEnd: function onTouchEnd() {
        var event = new cc.Event.EventCustom("click_item", true);
        event.detail = {
          index: this.data.index,
          number: this.data.number,
          type: this.data.type
        };
        this.node.dispatchEvent(event);
        cc.director.currentPlantIndex = this.data.type;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_friend: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58f92zIktxIrZVB3zHUAuDG", "item_friend");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        headView: cc.Sprite,
        farmLevel: cc.Label,
        helpInfo: cc.Label,
        countryList: cc.SpriteAtlas,
        label_name: cc.Label,
        label_helpCount: cc.Label,
        progress: cc.ProgressBar,
        sprite_bg: cc.Sprite,
        list_bg: [ cc.SpriteFrame ]
      },
      initItem_Friend: function initItem_Friend(data, isSelf) {
        this.data = data;
        this.updateHeadView(data.country);
        this.updateFarmLevel(data.fmlevel);
        var rest = 5 - data.helpcount >= 5 ? 5 : 5 - data.helpcount;
        this.updateHelpCount(rest);
        this.updateName(data.name);
        this.sprite_bg.spriteFrame = isSelf ? this.list_bg[1] : this.list_bg[0];
      },
      updateHeadView: function updateHeadView(index) {
        this.headView.spriteFrame = this.countryList.getSpriteFrame("country" + index);
      },
      updateHelpCount: function updateHelpCount(number) {
        var str = new String(number);
        this.label_helpCount.string = str + ":5";
        this.updateProgressBar(number);
      },
      updateProgressBar: function updateProgressBar(number) {
        var rate = number / cc.game.FarmData.WHTER_COUNT_MAX;
        this.progress.progress = rate;
      },
      updateFarmLevel: function updateFarmLevel(level) {
        this.farmLevel.string = new String(level);
      },
      updateHelpInfo: function updateHelpInfo(str) {
        this.helpInfo.string = str + "";
      },
      updateName: function updateName(str) {
        str = decodeURIComponent(str);
        this.label_name.string = new String(str);
      },
      helpFriend: function helpFriend() {
        console.log(this.data.index, "81");
        if (1 == this.data.self) console.log("you can not help yourself!"); else if (this.data.helpcount > 0) {
          var event = new cc.Event.EventCustom("helpFriendWater", true);
          event.detail = {
            index: this.data.index,
            count: 5 - this.data.helpcount,
            id: this.data.uid
          };
          this.node.dispatchEvent(event);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  item_hinderPreview: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d63baZp4qdE55ESmfhv9+Y/", "item_hinderPreview");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        itemBg: cc.Sprite,
        itemViewList: [ cc.SpriteFrame ],
        index: cc.Sprite,
        indexList: [ cc.SpriteFrame ],
        lockNameBg: cc.Node,
        unlockNameBg: cc.Node,
        itemName: cc.Sprite,
        nameList: [ cc.SpriteFrame ],
        unlockLevel: cc.Sprite,
        unlockLevelList: [ cc.SpriteFrame ],
        hinderView: cc.Node,
        hinderViewList: [ cc.SpriteFrame ],
        lockLine: cc.Node,
        lockHinderView: cc.SpriteFrame
      },
      initItemData: function initItemData(index, statusNum) {
        this.updateIndex(index);
        this.updateNameBg(statusNum);
        this.updateHinderName(index);
        this.updateUnlockLevel(index);
        this.updateHinderView(index, statusNum);
      },
      updateIndex: function updateIndex(index) {
        "number" == typeof index && (this.index.spriteFrame = this.indexList[index]);
      },
      updateNameBg: function updateNameBg(statusNum) {
        if (1 == statusNum) {
          this.unlockNameBg.active = true;
          this.unlockLevel.node.active = false;
          this.lockNameBg.active = false;
          this.lockLine.active = false;
          this.itemBg.spriteFrame = this.itemViewList[0];
          this.hinderView.y -= 80;
        } else {
          this.unlockNameBg.active = false;
          this.lockNameBg.active = true;
          this.lockLine.active = true;
          this.itemBg.spriteFrame = this.itemViewList[1];
        }
      },
      comingSoon: function comingSoon() {
        this.initItemData(11, 3);
        this.unlockLevel.spriteFrame = this.unlockLevelList[11];
        this.itemName.spriteFrame = this.nameList[12];
      },
      updateHinderName: function updateHinderName(index) {
        this.itemName.spriteFrame = this.nameList[index];
      },
      updateHinderView: function updateHinderView(index, statusNum) {
        if (1 == statusNum) this.hinderView.getComponent(cc.Sprite).spriteFrame = this.hinderViewList[index]; else if (2 == statusNum) {
          this.hinderView.getComponent(cc.Sprite).spriteFrame = this.hinderViewList[index];
          this.hinderView.color = new cc.Color(150, 150, 150);
        } else {
          this.hinderView.getComponent(cc.Sprite).spriteFrame = this.lockHinderView;
          this.itemName.spriteFrame = this.nameList[11];
        }
      },
      updateUnlockLevel: function updateUnlockLevel(index) {
        this.unlockLevel.spriteFrame = this.unlockLevelList[index];
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_rank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c935bT1Jd5FW7UJS3Zb2XCk", "item_rank");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: cc.Sprite,
        bgList: [ cc.SpriteFrame ],
        best: cc.Sprite,
        playerRank: cc.Label,
        headView: cc.Sprite,
        userName: cc.Label,
        starNumber: cc.Label,
        levelNumver: cc.Label,
        bestIconList: [ cc.SpriteFrame ],
        countryIconList: cc.SpriteAtlas
      },
      init: function init(index, data, tag) {
        this.updatePlayerRank(index + 1);
        this.updateHeadView(data.country);
        this.updateUserName(data.name);
        this.updateStarNumber(data.star);
        this.updateLevelNumber(data.level);
        this.changeItemTexture(tag);
      },
      changeItemTexture: function changeItemTexture(tag) {
        !tag || (this.bg.spriteFrame = this.bgList[1]);
      },
      updatePlayerRank: function updatePlayerRank(rank) {
        if ("number" == typeof rank) if (rank > 3) {
          this.playerRank.string = rank + "";
          this.best.node.active = false;
          this.playerRank.node.active = true;
        } else {
          this.playerRank.node.active = false;
          this.best.node.active = true;
          this.best.spriteFrame = this.bestIconList[rank - 1];
        } else cc.log(rank, "error in updatePLayerRank");
      },
      updateHeadView: function updateHeadView(index) {
        this.headView.spriteFrame = this.countryIconList.getSpriteFrame("country" + index);
      },
      updateUserName: function updateUserName(name) {
        if ("string" == typeof name) {
          console.log(name);
          this.userName.string = decodeURIComponent(name);
        } else cc.log(name, "error in updateUserName");
      },
      updateStarNumber: function updateStarNumber(starNumber) {
        "string" == typeof starNumber ? this.starNumber.string = starNumber : cc.log(starNumber, "error in updateStarNumber");
      },
      updateLevelNumber: function updateLevelNumber(levelNumver) {
        "string" == typeof levelNumver ? this.levelNumver.string = levelNumver : cc.log(levelNumver, "error in updateLevelNumber");
      },
      unuse: function unuse() {},
      reuse: function reuse() {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  item_shop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "678761lJCJBArjoAS9rLRST", "item_shop");
    "use strict";
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        item_view: cc.Sprite,
        item_name: cc.Sprite,
        item_function: cc.Sprite,
        viewList: [ cc.SpriteFrame ],
        nameList: [ cc.SpriteFrame ],
        functionList: [ cc.SpriteFrame ],
        price: cc.Label
      },
      initItemView: function initItemView(data) {
        this.item_view.spriteFrame = this.viewList[data.type];
        this.item_name.spriteFrame = this.nameList[data.type];
        this.item_function.spriteFrame = this.functionList[data.type];
        this.price.string = data.price + "";
        this.data = data;
      },
      buy: function buy() {
        cc.director.SoundManager.playSound("btnEffect");
        if (GameData.starCount >= this.data.price) {
          var event = new cc.Event.EventCustom("buyPlayerTool", true);
          var wp = this.item_view.node.parent.convertToWorldSpaceAR(this.item_view.node.position);
          event.detail = {
            data: this.data,
            pos: wp,
            type: this.data.type
          };
          this.node.dispatchEvent(event);
        } else cc.director.screenDialog.showCoinsPanel();
      },
      buySuccessAnimation: function buySuccessAnimation() {
        var type = this.data.type;
        cc.systemEvent.emit("SUCCESS_BUY_ANIMA", {
          type: type
        });
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData"
  } ],
  levelResource: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c9b9aCaaTdDTpYn1rIXsggD", "levelResource");
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var LevelResource = {
      lv0: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 1, 2, 3, 2, 0, 1, 3, -2 ], [ -2, 1, 1, 3, 0, 0, 3, 3, -2 ], [ -2, 1, 3, 4, 0, 5, 0, 0, -2 ], [ -2, 2, 3, 4, 0, 1, 1, 1, -2 ], [ -2, 0, 0, 4, 2, 0, 0, 1, -2 ], [ -2, 2, 2, 3, 2, 0, 1, 3, -2 ], [ -2, 2, 2, 3, 2, 0, 1, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 16,
        targetList: [ [ 0, 6 ], [ 1, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 500, 1e3, 1500 ]
      },
      lv1: {
        mapList: [ [ -2, 0, 2, 2, 2, 0, 1, 3, -2 ], [ -2, 0, 3, 3, 3, 0, 1, 3, -2 ], [ -2, 0, 3, 2, 2, 2, 1, 3, -2 ], [ -2, 1, 1, 1, 0, 1, 0, 1, -2 ], [ -2, 0, 4, 3, 0, 1, 0, 2, -2 ], [ -2, 0, 4, 4, 1, 1, 0, 2, -2 ], [ -2, 1, 4, 4, 2, 0, 1, 0, -2 ], [ -2, 1, 2, 3, 2, 0, 1, 0, -2 ], [ -2, 1, 1, 3, 2, 0, 1, 0, -2 ] ],
        step: 18,
        targetList: [ [ 0, 10 ], [ 1, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e3, 2e3, 3e3 ]
      },
      lv2: {
        mapList: [ [ -2, -2, -2, 2, 2, 0, -2, -2, -2 ], [ -2, -2, 1, 1, 1, 0, 1, -2, -2 ], [ -2, 2, 1, 1, 1, 0, 1, 3, -2 ], [ 1, 1, 0, 3, 3, 1, 1, 2, 2 ], [ 2, 2, 2, 2, 2, 2, 2, 3, 3 ], [ 1, 1, 3, 3, 3, 2, 1, 2, 2 ], [ -2, 2, 1, 1, 1, 0, 1, 3, -2 ], [ -2, -2, 2, 1, 2, 0, 1, -2, -2 ], [ -2, -2, -2, 2, 2, 0, -2, -2, -2 ] ],
        step: 22,
        targetList: [ [ 2, 10 ], [ 1, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1100, 2200, 3300 ]
      },
      lv3: {
        mapList: [ [ 1, 1, 0, -2, -2, -2, 1, 2, 2 ], [ 0, 2, 2, 1, 2, 0, 1, 3, 3 ], [ 0, 2, 2, 1, 2, 0, 1, 3, 3 ], [ -2, 1, 1, 2, 1, 0, 2, 2, -2 ], [ -2, 3, 3, 3, 3, 3, 3, 3, -2 ], [ -2, 1, 2, 3, 2, 0, 2, 2, -2 ], [ 2, 1, 1, 1, 2, 0, 3, 2, 3 ], [ 1, 1, 3, 2, 2, 0, 2, 3, 2 ], [ 1, 3, 3, -2, -2, -2, 3, 3, 2 ] ],
        step: 25,
        targetList: [ [ 2, 16 ], [ 1, 16 ], [ 3, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1200, 2400, 3600 ]
      },
      lv4: {
        mapList: [ [ -2, -2, 2, 3, 2, 1, 3, -2, -2 ], [ -2, -2, 3, 2, 2, 0, 2, -2, -2 ], [ 1, 1, 3, 3, 2, 0, 2, 3, 2 ], [ 2, 2, 2, 3, 0, 5, 1, 1, 1 ], [ 0, 0, 0, 0, 8, 8, 0, 0, 0 ], [ 0, 0, 2, 1, 1, 1, 1, 1, 2 ], [ 2, 2, 2, 1, 2, 2, 3, 2, 3 ], [ -2, -2, 1, 2, 2, 0, 2, -2, -2 ], [ -2, -2, 1, 1, 1, 2, 2, -2, -2 ] ],
        step: 25,
        targetList: [ [ 0, 18 ], [ 1, 18 ], [ 2, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1300, 2600, 3900 ]
      },
      lv5: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 4, 1, 3, 3, 3, 4, 4 ], [ 1, 0, 2, 2, 2, 2, 2, 2, 3 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 1, 1, 0, 3, 3, 2, 2, 3 ], [ 1, 2, 2, 0, 2, 1, 2, 3, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 25,
        targetList: [ [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1500, 3e3, 4500 ]
      },
      lv6: {
        mapList: [ [ 1, 1, 1, 3, 2, 2, 1, 1, 3 ], [ 1, 1, 1, 3, 2, 3, 2, 5, 5 ], [ 20, 20, 1, 2, 2, 0, 1, 5, 5 ], [ 2, 2, 1, 3, 2, 3, 0, 2, 5 ], [ 1, 3, 3, 0, 3, 1, 2, 2, 2 ], [ 2, 1, 1, 0, 4, 3, 0, 3, 2 ], [ 1, 3, 4, 0, 1, 4, -2, 3, 2 ], [ 1, 1, 4, 0, 2, 4, -2, 3, 2 ], [ -2, 2, -2, -2, 3, -2, -2, 20, -2 ] ],
        step: 25,
        targetList: [ [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1800, 3600, 5400 ]
      },
      lv7: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 1, 21, 0, 1, 1, 21, 1, 21 ], [ 21, 1, 21, 0, 2, 2, 21, 1, 21 ], [ 21, 2, 21, 0, 2, 1, 21, 2, 21 ], [ 21, 2, 21, 1, 1, 2, 21, 2, 21 ], [ 21, 21, 21, -2, -2, -2, 21, 21, 21 ], [ 21, 1, 21, -2, -2, -2, 21, 2, 21 ], [ 21, 1, 21, -2, -2, -2, 21, 2, 21 ], [ 2, 21, 1, -2, -2, -2, 1, 21, 1 ] ],
        step: 30,
        targetList: [ [ 21, 32 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1600, 3200, 4800 ]
      },
      lv8: {
        mapList: [ [ 1, 1, 3, 0, 0, 4, 3, 3, 3 ], [ 1, 3, 1, 0, 3, 1, 1, 3, 2 ], [ 0, 2, 2, 2, 2, 0, 1, 3, 2 ], [ 1, 1, 1, 0, 8, 10, 0, 2, 3 ], [ 2, 2, 1, 3, 3, 1, 2, 2, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 1, 1, 21, 21, 21, 2, 2, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ] ],
        step: 40,
        targetList: [ [ 21, 23 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1600, 3200, 4800 ]
      },
      lv9: {
        mapList: [ [ 2, 2, 3, 3, 2, 1, 2, 2, 3 ], [ 1, 3, 1, 2, 2, 1, 2, 3, 2 ], [ 1, 1, 1, 3, 3, 3, 0, 2, 3 ], [ 0, 2, -2, 2, -2, 3, -2, 3, 3 ], [ 1, 1, 1, 3, 20, 3, 0, 2, 3 ], [ 1, 3, 1, 2, 2, 1, 2, 3, 2 ], [ 1, 1, 4, -2, 3, -2, 2, 3, 3 ], [ 1, -2, 20, -2, -2, -2, 20, -2, 3 ], [ 20, -2, -2, -2, -2, -2, -2, -2, 20 ] ],
        step: 35,
        targetList: [ [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1800, 3600, 5400 ]
      },
      lv10: {
        mapList: [ [ 1, 2, 2, 2, 3, 3, 2, 4, 4 ], [ 1, 3, 1, 2, 2, 1, 2, 3, 2 ], [ 1, 1, 1, 3, 3, 3, 0, 2, 3 ], [ 0, 2, 2, 2, 10, 10, 1, 3, 3 ], [ 1, 1, 1, 3, 3, 3, 0, 2, 3 ], [ 1, 3, 1, 2, 20, 1, 2, 3, 2 ], [ 1, 1, 4, -2, 1, -2, 3, 3, 3 ], [ 1, -2, 20, -2, -2, -2, 20, -2, 3 ], [ 20, -2, -2, -2, -2, -2, -2, -2, 20 ] ],
        step: 35,
        targetList: [ [ 20, 5 ], [ 2, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e3, 4e3, 6e3 ]
      },
      lv11: {
        mapList: [ [ 21, 2, 21, 2, 3, 3, 21, 4, 21 ], [ 21, 3, 21, 2, 2, 1, 21, 4, 21 ], [ 21, 3, 21, 3, 3, 3, 21, 2, 21 ], [ 21, 3, 21, 2, 4, 2, 21, 2, 21 ], [ 21, 1, 21, 3, 3, 3, 21, 2, 21 ], [ 21, 1, 21, 2, 2, 1, 21, 3, 21 ], [ 21, 1, 20, -2, -2, -2, 20, 3, 21 ], [ 21, 20, -2, -2, -2, -2, -2, 20, 21 ], [ 20, -2, -2, -2, -2, -2, -2, -2, 20 ] ],
        step: 45,
        targetList: [ [ 20, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 5e3, 1e4, 15e3 ]
      },
      lv12: {
        mapList: [ [ 1, 2, 2, 2, 3, 21, 21, 2, 21 ], [ 1, 3, 1, 2, 3, 21, 21, 2, 21 ], [ 1, 1, 1, 3, 3, 21, 21, 2, 21 ], [ 0, 2, 2, 2, -2, 21, 21, 1, 21 ], [ 1, 1, 1, 3, -2, 21, 21, 1, 21 ], [ 1, 3, 1, 2, -2, 21, 21, 1, 21 ], [ 1, 1, 4, 2, -2, 21, 21, 3, 21 ], [ 1, 2, 2, 3, -2, 21, 21, 3, 21 ], [ 20, 20, 20, 20, -2, 21, 21, 21, 21 ] ],
        step: 45,
        targetList: [ [ 20, 4 ], [ 21, 28 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ]
      },
      lv13: {
        mapList: [ [ 1, 2, 21, 21, 3, 21, 21, 4, 4 ], [ 1, 3, 21, 21, 3, 21, 21, 3, 2 ], [ 1, 1, 21, 21, 3, 21, 21, 2, 3 ], [ 0, 2, 21, 21, 2, 21, 21, 3, 3 ], [ 1, 1, 21, 21, 2, 21, 21, 2, 3 ], [ 1, 3, 21, 21, 1, 21, 21, 3, 2 ], [ 1, 1, 21, 21, 1, 21, 21, 3, 2 ], [ -2, -2, 21, 21, 20, 20, 20, -2, -2 ], [ -2, -2, 20, 20, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 20, 5 ], [ 21, 28 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 7e3, 14e3, 21e3 ]
      },
      lv14: {
        mapList: [ [ 1, 2, 2, 2, 3, 3, 2, 4, 4 ], [ 1, 3, 1, 2, 2, 1, 2, 3, 2 ], [ 1, 1, 1, 3, 3, 3, 0, 2, 3 ], [ 0, 2, 2, 2, 5, 1, 1, 3, 3 ], [ 1, 1, 1, 3, 3, 3, 0, 2, 3 ], [ 1, 3, 1, 2, 2, 1, 2, 3, 2 ], [ 3, -2, 1, -2, 2, -2, 2, -2, 2 ], [ 3, -2, 1, -2, 2, -2, 2, -2, 2 ], [ 3, 20, 1, 20, 2, 20, 2, 20, 2 ] ],
        step: 40,
        targetList: [ [ 20, 4 ], [ 1, 15 ], [ 3, 15 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv15: {
        mapList: [ [ 1, 2, 2, 2, 1, 1, 2, 2, 2 ], [ 1, 3, 1, 2, 2, 4, 4, 1, 1 ], [ 1, 1, 1, 3, 3, 2, 2, 1, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 1, 1, -2, -2, 1, -2, -2, 2, 2 ], [ 2, 1, -2, -2, -2, -2, -2, 3, 2 ], [ 4, 4, -2, -2, -2, -2, -2, 3, 2 ], [ 3, 3, -2, -2, -2, -2, -2, 2, 2 ], [ 20, 20, -2, -2, -2, -2, -2, 20, 20 ] ],
        step: 35,
        targetList: [ [ 20, 4 ], [ 2, 15 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv16: {
        mapList: [ [ 1, 2, 2, 2, -2, 21, 21, 21, 21 ], [ 1, 2, 1, 2, -2, 21, 21, 21, 21 ], [ 1, 1, 1, 3, -2, 21, 21, 21, 21 ], [ 0, 2, 1, 2, -2, 21, 21, 21, 21 ], [ 1, 1, 1, 3, -2, 3, 1, 2, 2 ], [ 21, 21, 21, 21, -2, 1, 2, 3, 2 ], [ 21, 21, 21, 21, -2, 22, 22, 22, 22 ], [ 21, 21, 21, 21, -2, 1, 3, 1, 2 ], [ 21, 21, 21, 21, -2, 3, 3, 1, 2 ] ],
        step: 35,
        targetList: [ [ 21, 32 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv17: {
        mapList: [ [ 1, 1, 2, 2, -2, 1, 2, 1, 2 ], [ 1, 1, 1, 2, -2, 4, 4, 1, 1 ], [ 1, 1, 1, 2, -2, 2, 4, 1, 1 ], [ 0, 2, 2, 2, -2, 3, 4, 4, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 20, 1, 21, 20, -2, 20, 2, 21, 20 ], [ 21, 1, 21, 21, -2, 21, 2, 21, 21 ], [ 21, 2, 21, 21, -2, 21, 1, 21, 21 ], [ 20, 2, 21, 20, -2, 20, 1, 21, 20 ] ],
        step: 30,
        targetList: [ [ 20, 8 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv18: {
        mapList: [ [ 1, 1, 2, 2, 2, 1, 2, 1, 2 ], [ 1, 1, 1, 2, 3, 4, 4, 1, 1 ], [ 1, 1, 21, 21, 21, 21, 21, 3, 1 ], [ 0, 2, 21, -2, -2, -2, 21, 4, 1 ], [ 3, 2, 21, -2, -2, -2, 21, 1, 1 ], [ 5, 1, 21, -2, -2, -2, 21, 2, 1 ], [ 5, 1, 21, 21, 21, 21, 21, 3, 5 ], [ 1, 2, 2, 22, 22, 3, 1, 4, 5 ], [ 1, 2, 1, 1, 4, 2, 1, 4, 1 ] ],
        step: 40,
        targetList: [ [ 2, 15 ], [ 21, 16 ], [ 4, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv19: {
        mapList: [ [ 3, 21, 2, 2, 2, 1, 2, 1, 2 ], [ 21, -2, 21, 2, 3, 4, 4, 1, 1 ], [ 1, 21, -2, 21, 1, 3, 2, 3, 1 ], [ 0, 2, 21, -2, 21, 2, 3, 4, 1 ], [ 3, 2, 2, 21, -2, 21, 3, 1, 1 ], [ 5, 1, 2, 2, 21, -2, 21, 2, 1 ], [ 5, 1, 1, 2, 2, 21, -2, 21, 5 ], [ 1, 2, 2, 1, 4, 3, 21, -2, 21 ], [ 1, 2, 1, 1, 4, 2, 1, 21, 2 ] ],
        step: 40,
        targetList: [ [ 2, 15 ], [ 21, 16 ], [ 4, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv20: {
        mapList: [ [ 2, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 1, 1, 1, 3, 0, 0, 3, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 1, 3, 4, 0, 5, 0, 0, 3 ], [ 1, 1, 22, 22, 22, 22, 22, 1, 3 ], [ 1, 0, 0, 4, 2, 0, 0, 1, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 2, 21, 3, 2, 0, 1, 3, 1 ], [ 3, 21, 21, 21, 21, 0, 1, 3, 3 ] ],
        step: 40,
        targetList: [ [ 0, 10 ], [ 1, 10 ], [ 2, 20 ], [ 21, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv22: {
        mapList: [ [ 2, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 1, 2, 1, 0, 0, 1, 3, 3, 1 ], [ 3, 1, 3, 4, 0, 4, 0, 0, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 3, 0, 1, 2, 1, 1, 3 ], [ 1, 0, 1, 4, 1, 2, 0, 1, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 2, 2, 3, 2, 20, 1, 3, 1 ], [ 3, 2, 2, 20, 0, 20, 0, 3, 3 ] ],
        step: 35,
        targetList: [ [ 0, 15 ], [ 1, 15 ], [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv21: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 22, 3, 22, 0, 22, 3, 3 ], [ 1, 0, 0, 4, 2, 0, 0, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 1, 3, 1, 21, -2, 21, 1, 3, 1 ], [ 3, 2, 2, 21, -2, 21, 1, 3, 3 ] ],
        step: 35,
        targetList: [ [ 0, 10 ], [ 1, 10 ], [ 2, 15 ], [ 21, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv23: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ -2, -2, -2, 3, 2, 0, -2, -2, -2 ], [ -2, -2, -2, 4, 2, 0, -2, -2, -2 ], [ -2, -2, -2, 2, 1, 3, -2, -2, -2 ], [ 2, 2, 2, 3, 1, 0, 1, 3, 1 ], [ 1, 2, 2, 3, 1, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 3, 3 ] ],
        step: 30,
        targetList: [ [ 2, 10 ], [ 3, 10 ], [ 4, 10 ], [ 5, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv24: {
        mapList: [ [ 0, 1, 0, 0, 0, 2, 2, 0, 0 ], [ 1, 0, 3, 3, 2, 0, 0, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 3, 3, 2, 2, 4, 4, 3, 3, 3 ], [ 1, 1, 4, 4, 1, 1, 1, 1, 1 ], [ 0, 0, 3, 0, 0, 3, 0, 0, 0 ], [ 2, 2, 3, 4, 4, 3, 4, 1, 1 ], [ 1, 1, 3, 1, 1, 3, 1, 1, 1 ] ],
        step: 35,
        targetList: [ [ 0, 10 ], [ 1, 15 ], [ 4, 15 ], [ 25, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv25: {
        mapList: [ [ 2, 2, 2, 2, 25, 3, 3, 3, 3 ], [ 21, 21, 21, 21, 25, 21, 21, 21, 21 ], [ 4, 5, 6, 7, 25, 7, 6, 5, 4 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 0, 0, 0, 25, 1, 1, 1, 1 ], [ 22, 22, 22, 22, 25, 22, 22, 22, 22 ], [ 2, 2, 20, 20, 20, 20, 20, 2, 2 ], [ 2, 2, 20, -2, -2, -2, 20, 2, 2 ], [ 20, 20, 20, -2, -2, -2, 20, 20, 20 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 20, 13 ], [ 21, 8 ], [ 25, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv26: {
        mapList: [ [ 25, 25, 2, 2, 5, 5, 4, 1, 1 ], [ 4, 4, 25, 25, 3, 3, 7, 1, 4 ], [ 1, 1, 1, 1, 25, 25, 5, 5, 1 ], [ 22, 22, 22, 22, 22, 22, 25, 25, 1 ], [ 21, 21, 21, 21, 21, 6, 4, 4, 25 ], [ 0, 21, 21, 0, 3, 3, 25, 25, 21 ], [ 3, 3, 2, 2, 25, 25, 21, 21, 21 ], [ 1, 1, 25, 25, 3, 3, 21, 21, 21 ], [ 25, 25, 0, 0, 20, 20, 20, 20, 20 ] ],
        step: 45,
        targetList: [ [ 4, 10 ], [ 20, 5 ], [ 21, 14 ], [ 25, 17 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv27: {
        mapList: [ [ 0, 0, 0, 3, 2, 3, 0, 0, 0 ], [ 0, 0, 0, 3, 2, 3, 0, 0, 0 ], [ -2, -2, 25, 25, 25, 25, 25, -2, -2 ], [ 3, 3, 25, 22, 22, 22, 25, 2, 2 ], [ 4, 4, 25, 22, 22, 22, 25, 4, 4 ], [ 3, 3, 25, 22, 22, 22, 25, 2, 2 ], [ -2, -2, 25, 25, 25, 25, 25, -2, -2 ], [ 1, 1, 1, 4, 5, 4, 1, 1, 1 ], [ 1, 1, 1, 4, 5, 4, 1, 1, 1 ] ],
        step: 35,
        targetList: [ [ 25, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv28: {
        mapList: [ [ 1, 1, 1, 25, 1, 1, 1, 22, 22 ], [ 1, 1, 25, 21, 25, 1, 1, 22, 20 ], [ 1, 25, 21, 21, 21, 25, 1, 20, 22 ], [ 25, 21, 21, 21, 21, 21, 25, 22, 20 ], [ 2, 25, 21, 21, 21, 25, 2, 20, 22 ], [ 2, 2, 25, 21, 25, 2, 2, 22, 20 ], [ 2, 2, 1, 25, 1, 2, 2, 20, 22 ], [ 2, 2, 1, 25, 1, 2, 2, 22, 20 ], [ 25, 25, 25, 25, 25, 25, 25, 22, 22 ] ],
        step: 45,
        targetList: [ [ 2, 16 ], [ 20, 7 ], [ 21, 13 ], [ 25, 20 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv29: {
        mapList: [ [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 0, 1, 2, 3, 4, 3, 2, 1, 0 ], [ 22, 22, 22, 4, 4, 4, 22, 22, 22 ], [ 1, 1, 0, 0, 2, 0, 3, 0, 0 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 4, 4, 2, 0, 0, 0, 1, 2, 2 ], [ 1, 1, 0, 1, 2, 3, 4, 1, 1 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 20, 20, 4, 4, 4, 4, 4, 20, 20 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 4, 15 ], [ 20, 4 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv30: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 3, 2, 2, 3, 2, 0, 1, -2, 3 ], [ 1, 2, 2, 3, 2, 0, -2, 3, 1 ], [ 2, 22, 22, 3, 1, -2, 22, 22, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 3, 2, 2, -2, 2, 0, 3, 1, 3 ], [ 2, 2, -2, 3, 1, 3, 1, 3, 1 ], [ 1, -2, 2, 3, 1, 0, 1, 3, 1 ], [ 2, 2, 20, 20, 20, 20, 1, 3, 3 ] ],
        step: 35,
        targetList: [ [ 3, 20 ], [ 2, 20 ], [ 20, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv31: {
        mapList: [ [ 1, 3, 2, -2, -2, -2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 22, 22, 1, 22, 22, 1, 3, 1 ], [ 1, 3, 3, 3, 2, 2, 1, 1, 1 ], [ -2, -2, -2, 3, 2, 3, -2, -2, -2 ], [ -2, -2, -2, 1, 1, 1, -2, -2, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 4, 10 ], [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv32: {
        mapList: [ [ 1, 3, 2, -2, -2, -2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 5, 5, 1 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 3, 3, 21, 21, 21, 1, 1, 1 ], [ 1, 3, 1, -2, -2, -2, 2, 2, 1 ], [ 2, 22, 22, -2, -2, -2, 22, 22, 22 ], [ 2, 3, 3, -2, -2, -2, 3, 1, 2 ] ],
        step: 40,
        targetList: [ [ 4, 20 ], [ 5, 20 ], [ 6, 5 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv33: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 5, 5, 1 ], [ 2, 2, -2, -2, -2, -2, 1, 3, 1 ], [ 1, 2, -2, -2, -2, -2, 2, 3, 1 ], [ 1, 3, -2, -2, -2, -2, 1, 1, 1 ], [ 1, 3, 1, 1, 2, 3, 2, 2, 1 ], [ 2, 2, 20, 2, 20, 3, 20, 1, 2 ], [ 2, 3, 20, 1, 20, 1, 20, 1, 2 ] ],
        step: 50,
        targetList: [ [ 5, 10 ], [ 6, 5 ], [ 20, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv34: {
        mapList: [ [ 0, 0, 0, 2, -2, 2, 0, 0, 0 ], [ 1, 1, 1, 2, -2, 2, 1, 1, 1 ], [ 5, 5, 26, 2, -2, 2, 26, 5, 5 ], [ 3, 0, 0, 0, 3, 0, 0, 0, 3 ], [ 4, 5, 4, 4, 3, 4, 4, 5, 4 ], [ 3, 3, 0, 0, 3, 0, 0, 3, 3 ], [ 5, 5, 26, 0, 3, 0, 26, 5, 5 ], [ 1, 1, 1, 0, -2, 0, 2, 2, 2 ], [ 2, 2, 2, 0, -2, 0, 1, 1, 1 ] ],
        step: 35,
        targetList: [ [ 26, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv35: {
        mapList: [ [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ], [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ], [ 1, 1, 22, 22, 22, 22, 22, 1, 1 ], [ 1, 1, 22, 26, 26, 26, 22, 1, 1 ], [ -2, -2, 22, 26, 26, 26, 22, -2, -2 ], [ 1, 1, 22, 22, 22, 22, 22, 1, 1 ], [ 1, 1, 4, 4, 3, 4, 4, 1, 1 ], [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ], [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ] ],
        step: 50,
        targetList: [ [ 26, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv36: {
        mapList: [ [ 2, 2, 2, 3, 3, 3, 2, 2, 2 ], [ 0, 1, 1, 1, 24, 1, 1, 1, 0 ], [ 0, 1, 26, 1, 24, 1, 26, 1, 0 ], [ 0, 26, 24, 24, 24, 24, 24, 26, 0 ], [ 4, 3, 26, 1, 24, 2, 26, 3, 4 ], [ 4, 3, 3, 1, 24, 2, 3, 3, 4 ], [ 4, 2, 2, 2, 26, 1, 1, 1, 4 ], [ -2, -2, 3, 3, 3, 3, 3, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 25, 9 ], [ 26, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv37: {
        mapList: [ [ 4, 4, 22, 4, 4, 4, 4, 22, 7 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 3, 22, 3, 3, 3, 3, 22, 7 ], [ 22, 22, 26, 22, 22, 22, 22, 26, 22 ], [ 2, 2, 22, 2, 2, 2, 2, 22, 7 ], [ 22, 22, 26, 22, 22, 22, 22, 26, 22 ], [ 1, 1, 22, 1, 1, 1, 1, 22, 7 ], [ 22, 22, 26, 22, 22, 22, 22, 26, 22 ], [ 0, 0, 22, 0, 0, 0, 0, 22, 7 ] ],
        step: 50,
        targetList: [ [ 0, 10 ], [ 1, 10 ], [ 2, 10 ], [ 26, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv38: {
        mapList: [ [ 2, 2, 2, 3, 3, 3, 1, 1, 1 ], [ 4, 4, 4, 1, 1, 1, 4, 4, 4 ], [ 1, 1, 1, 23, 23, 23, 1, 1, 1 ], [ 0, 2, 3, 23, 26, 23, 3, 2, 0 ], [ 0, 2, 3, 23, 26, 23, 3, 2, 0 ], [ 0, 2, 3, 23, 23, 23, 3, 2, 0 ], [ 1, 1, 1, 4, 4, 4, 1, 1, 1 ], [ 4, 4, 4, 2, 2, 2, 4, 4, 4 ], [ 1, 1, 1, 3, 3, 3, 2, 2, 2 ] ],
        step: 45,
        targetList: [ [ 25, 10 ], [ 26, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv39: {
        mapList: [ [ -2, 0, 0, 2, 2, 2, 0, 0, -2 ], [ -2, 0, 4, 4, 3, 4, 4, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 1, 2, 2, 3, 1, 0, 0 ], [ 0, 27, 2, 1, 27, 3, 2, 27, 0 ], [ 0, 0, 1, 1, 0, 0, 1, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 1, 1, 0, 1, 1, 3, -2 ], [ -2, 3, 3, 4, 4, 4, 3, 3, -2 ] ],
        step: 25,
        targetList: [ [ 27, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ]
      },
      lv40: {
        mapList: [ [ 4, -2, 1, 1, 1, 1, 1, -2, 4 ], [ 2, 25, 25, 25, 25, 25, 25, 25, 2 ], [ 2, 25, 27, 22, 22, 22, 27, 25, 2 ], [ 2, 25, 1, 22, 26, 22, 1, 25, 2 ], [ 3, 25, 1, 22, 26, 22, 1, 25, 3 ], [ 3, 25, 27, 22, 22, 22, 27, 25, 3 ], [ 3, 25, 25, 25, 25, 25, 25, 25, 3 ], [ 4, 4, 4, 21, 21, 21, 4, 4, 4 ], [ 0, -2, 0, 0, 0, 0, 0, -2, 0 ] ],
        step: 40,
        targetList: [ [ 21, 3 ], [ 25, 22 ], [ 26, 2 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv41: {
        mapList: [ [ -2, 2, 2, 2, -2, 2, 2, 2, -2 ], [ 3, 0, 0, 0, 2, 0, 0, 0, 3 ], [ 3, 22, 22, 22, 2, 22, 22, 22, 3 ], [ 3, 22, 27, 22, 2, 22, 27, 22, 3 ], [ 3, 22, 22, 22, 2, 22, 22, 22, 3 ], [ 4, 1, 1, 1, 2, 1, 1, 1, 4 ], [ 4, 4, 5, 5, 4, 5, 5, 4, 4 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ] ],
        step: 40,
        targetList: [ [ 20, 6 ], [ 25, 9 ], [ 27, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv42: {
        mapList: [ [ 0, 0, 0, 3, 3, 3, 0, 0, 0 ], [ 1, 2, 27, 21, 27, 21, 27, 2, 1 ], [ 1, 2, 21, 21, 21, 21, 21, 2, 1 ], [ 1, 2, 27, 21, 27, 21, 27, 2, 1 ], [ -2, 4, 21, 21, 21, 21, 21, 4, -2 ], [ 2, 3, 27, 21, 27, 21, 27, 3, 2 ], [ 2, 3, 21, 21, 21, 21, 21, 3, 2 ], [ 2, 3, 27, 21, 27, 21, 27, 3, 2 ], [ 1, 1, 1, 4, 4, 4, 1, 1, 1 ] ],
        step: 35,
        targetList: [ [ 21, 23 ], [ 27, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv43: {
        mapList: [ [ -2, 0, 0, 4, 4, 4, 0, 0, -2 ], [ -2, 1, 26, 26, 26, 26, 26, 3, -2 ], [ -2, 1, 26, 27, 2, 27, 26, 3, -2 ], [ -2, 1, 26, 2, 2, 2, 26, 3, -2 ], [ -2, 1, 26, 27, 2, 27, 26, 3, -2 ], [ -2, 1, 26, 26, 26, 26, 26, 3, -2 ], [ -2, 3, 3, 2, 2, 2, 1, 1, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 50,
        targetList: [ [ 26, 16 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv44: {
        mapList: [ [ 1, 2, 2, 21, -2, 21, 1, 2, 1 ], [ 3, 1, 1, 21, -2, 21, 3, 3, 2 ], [ 3, 3, 3, 21, -2, 21, 2, 2, 1 ], [ 2, 2, 2, 21, -2, 21, 1, 3, 1 ], [ 1, 22, 3, 21, -2, -2, 21, 21, 22 ], [ 1, 3, 3, 21, 21, -2, -2, 21, 1 ], [ 22, 4, 4, 1, 2, 21, -2, -2, 21 ], [ 1, 4, 2, 2, 1, 1, 21, -2, -2 ], [ 2, 2, 1, 1, 2, 2, 2, 21, -2 ] ],
        step: 40,
        targetList: [ [ 1, 30 ], [ 2, 25 ], [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 11e3, 22e3, 33e3 ]
      },
      lv45: {
        mapList: [ [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 1, 1, 3, 0, 2, 3, 4, 0 ], [ 1, 1, 1, 4, 1, 1, 1, 5, 1 ], [ 2, 1, 1, 2, 2, 5, 2, 1, 2 ], [ 2, 5, 3, 1, 2, 1, 3, 3, 2 ], [ 1, 2, 2, 2, 1, 1, 2, 2, 1 ], [ 0, 1, 3, 2, 0, 4, 1, 3, 0 ], [ 1, 2, 1, 0, 2, 1, 0, 3, 2 ], [ 0, 0, 0, 3, 3, 3, 1, 1, 1 ] ],
        step: 45,
        targetList: [ [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ],
        grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 3, 2 ] ], [ [ 3, 3 ], [ 4, 6 ] ], [ [ 4, 1 ], [ 5, 4 ] ] ]
      },
      lv46: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 4, 4, 4, 3, 3, -2 ], [ -2, 0, 1, 0, 0, 0, 2, 0, -2 ], [ -2, 1, 26, 1, 0, 2, 26, 2, -2 ], [ -2, 0, 1, 0, 0, 0, 2, 0, -2 ], [ -2, 3, 27, 3, 1, 3, 27, 3, -2 ], [ -2, 4, 1, 4, 1, 4, 1, 4, -2 ], [ -2, 3, 4, 3, 1, 3, 4, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 26, 2 ], [ 27, 2 ], [ 28, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 1, 1 ], [ 4, 7 ], 1 ], [ [ 5, 1 ], [ 7, 7 ], 2 ] ],
        stoneList: [ [ [ 2, 2 ], [ 3, 5 ] ], [ [ 1, 1 ], [ 2, 1 ] ] ]
      },
      lv47: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 1, 3 ], [ 1, 2, 1, 3, 2, 0, 1, 3, 1 ], [ 3, 22, 22, 3, 2, 22, 22, 3, 3 ], [ 1, 0, 2, 4, 2, 0, 3, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 1, 3, 1, 21, -2, 21, 1, 3, 1 ], [ 3, 2, 2, 21, -2, 21, 1, 3, 3 ] ],
        step: 40,
        targetList: [ [ 21, 12 ], [ 28, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 4e3, 8e3, 12e3 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 0, 0 ], [ 3, 1 ] ], [ [ 6, 6 ], [ 7, 8 ] ] ]
      },
      lv48: {
        mapList: [ [ 1, 2, 2, 2, -2, 21, 2, 1, 21 ], [ 1, 3, 1, 2, -2, 21, 2, 1, 21 ], [ 1, 1, 1, 3, -2, 21, 21, 2, 21 ], [ 0, 2, 2, 2, -2, 21, 21, 2, 21 ], [ 1, 1, 1, 3, -2, 3, 1, 2, 2 ], [ 21, 21, 21, 21, -2, 1, 2, 3, 2 ], [ 21, 21, 21, 21, -2, 2, 2, 3, 2 ], [ 21, 21, 21, 21, -2, 1, 3, 1, 3 ], [ 21, 21, 21, 21, -2, 3, 22, 22, 2 ] ],
        step: 45,
        targetList: [ [ 21, 26 ], [ 28, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 4, 8 ], 2 ], [ [ 5, 0 ], [ 7, 8 ], 1 ] ],
        stoneList: [ [ [ 0, 1 ], [ 3, 2 ] ], [ [ 4, 5 ], [ 5, 8 ] ] ]
      },
      lv49: {
        mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 3, 0, 2, 3, 1 ], [ 3, 3, 1, 3, 2, 5, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 22, 22, 22, 22, 0, 22, 3, 1 ], [ 1, 3, -2, 3, 2, 2, -2, 1, 1 ], [ 2, 1, -2, 3, 2, 3, -2, 3, 1 ], [ 2, 2, -2, 1, 1, 1, -2, 3, 1 ], [ 1, 1, -2, 3, 1, 2, -2, 3, 1 ] ],
        step: 35,
        targetList: [ [ 2, 25 ], [ 3, 25 ], [ 4, 10 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 4, 8 ], 2 ], [ [ 5, 0 ], [ 7, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 5, 4 ], [ 8, 5 ] ], [ [ 7, 7 ], [ 8, 7 ] ] ]
      },
      lv50: {
        mapList: [ [ 1, 1, 1, 25, 0, 25, 1, 1, 1 ], [ 2, 2, 2, 25, 0, 25, 2, 2, 2 ], [ 4, 4, 4, 25, 25, 25, 4, 4, 4 ], [ 24, 24, 24, 21, 21, 21, 24, 24, 24 ], [ 0, 0, 24, 21, 3, 21, 24, 0, 0 ], [ 24, 24, 24, 21, 3, 21, 24, 24, 24 ], [ 1, 0, 2, 22, 22, 22, 2, 0, 1 ], [ 1, 0, 2, 22, 20, 22, 2, 0, 1 ], [ 1, 0, 2, 22, 20, 22, 2, 0, 1 ] ],
        step: 35,
        targetList: [ [ 20, 2 ], [ 21, 7 ], [ 25, 21 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv51: {
        mapList: [ [ 0, 2, 1, 3, 5, 24, -2, 0, 0 ], [ 0, 2, 1, 3, 5, 24, -2, 6, 6 ], [ 24, 24, 24, 24, 24, 24, -2, 1, 1 ], [ 0, 0, 1, 2, 3, 24, -2, 4, 4 ], [ -2, -2, -2, -2, -2, -2, -2, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, 24, 24 ], [ 24, 24, 24, 24, 24, 24, -2, 0, 0 ], [ 0, 1, 2, 3, 4, 24, -2, 21, 21 ], [ 0, 1, 2, 3, 4, 24, -2, 21, 21 ] ],
        step: 35,
        targetList: [ [ 21, 4 ], [ 25, 19 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv52: {
        mapList: [ [ 0, 0, -2, 0, -2, 0, -2, 0, 0 ], [ 1, 1, 3, 0, 3, 1, 3, 0, 1 ], [ 3, 3, 3, 0, 4, 4, 4, 0, 4 ], [ 24, 0, 24, 0, 24, 0, 24, 0, 24 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 1, 1, 0, 0, 0, 2, 2, 2 ], [ 3, 3, 3, 2, 2, 2, 0, 0, 0 ] ],
        step: 40,
        targetList: [ [ 0, 20 ], [ 21, 18 ], [ 25, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv53: {
        mapList: [ [ 1, 1, 1, 1, 4, 4, 3, 3, 4 ], [ 0, 0, 0, 0, 2, 2, 2, 2, 5 ], [ 23, 23, 23, 23, 23, 23, 23, 23, 23 ], [ 1, 1, 1, 1, 3, 3, 3, 3, 7 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 1, 2, 2, 2, 0, 3, 3 ], [ 3, 3, 3, 0, 0, 5, 5, 5, 4 ], [ 0, 0, 0, 4, 4, 0, 0, 0, 0 ] ],
        step: 35,
        targetList: [ [ 25, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv54: {
        mapList: [ [ 3, 3, 3, 2, 2, 2, 4, 4, 4 ], [ 4, 0, 1, 1, 0, 1, 1, 0, 3 ], [ 4, 1, 21, 21, 23, 21, 21, 1, 3 ], [ 4, 1, 21, 21, 23, 21, 21, 1, 3 ], [ 2, 0, 23, 23, 23, 23, 23, 0, 2 ], [ 2, 1, 21, 21, 23, 21, 21, 1, 2 ], [ 2, 1, 21, 21, 23, 21, 21, 1, 2 ], [ 3, 0, 1, 1, 0, 1, 1, 0, 3 ], [ 1, 1, -2, -2, -2, -2, -2, 1, 1 ] ],
        step: 45,
        targetList: [ [ 5, 10 ], [ 21, 16 ], [ 25, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv55: {
        mapList: [ [ 1, 1, 23, 0, 1, 2, 23, 1, 1 ], [ 2, 2, 23, 0, 1, 2, 23, 2, 2 ], [ 3, 3, 23, 0, 1, 2, 23, 3, 3 ], [ 4, 4, 23, 23, 23, 23, 23, 4, 4 ], [ 5, 5, 23, 0, 0, 0, 23, 5, 5 ], [ 6, 6, 23, 3, 3, 3, 23, 6, 6 ], [ 0, 0, 23, 1, 1, 1, 23, 0, 0 ], [ 1, 1, 23, 2, 2, 2, 23, 1, 1 ], [ 2, 2, 23, 4, 4, 4, 23, 2, 2 ] ],
        step: 50,
        targetList: [ [ 4, 15 ], [ 5, 15 ], [ 25, 21 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv56: {
        mapList: [ [ 1, 2, 3, -2, -2, -2, 2, 1, 2 ], [ 1, 2, 3, -2, -2, -2, 2, 1, 2 ], [ 23, 23, 23, 3, 3, 3, 23, 23, 23 ], [ 1, 3, 4, 23, 20, 23, 3, 1, 2 ], [ 1, 3, 4, 20, 23, 20, 3, 1, 2 ], [ 1, 3, 4, 23, 20, 23, 3, 1, 2 ], [ 0, 0, 0, 3, 1, 0, 23, 23, 23 ], [ 2, 2, 2, 3, 2, 2, 23, 2, 1 ], [ 0, 0, 0, 3, 0, 1, 23, 2, 1 ] ],
        step: 50,
        targetList: [ [ 20, 4 ], [ 25, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv57: {
        mapList: [ [ 0, 0, 4, 4, 4, 4, 4, 0, 0 ], [ 1, 1, 3, 3, 3, 3, 3, 1, 1 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 5, 5, 23, 21, 21, 21, 23, 5, 5 ], [ 4, 4, 23, 21, 21, 21, 23, 4, 4 ], [ 3, 3, 23, 21, 21, 21, 23, 3, 3 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 1, 1, 3, 3, 3, 3, 3, 1, 1 ], [ 0, 0, 4, 4, 4, 4, 4, 0, 0 ] ],
        step: 40,
        targetList: [ [ 21, 9 ], [ 25, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv58: {
        mapList: [ [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 0, 0, 1, 4, 1, 0, 0, 25 ], [ 25, 21, 21, 21, 21, 21, 21, 21, 25 ], [ 25, 2, 2, 3, 4, 3, 2, 2, 25 ], [ 25, 21, 21, 21, 21, 21, 21, 21, 25 ], [ 25, 0, 1, 5, 4, 5, 1, 0, 25 ], [ 25, 21, 21, 21, 21, 21, 21, 21, 25 ], [ 25, 2, 2, 2, 4, 3, 3, 3, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 3, 15 ], [ 21, 21 ], [ 25, 32 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv59: {
        mapList: [ [ 0, 0, 0, 2, 3, 4, 0, 0, 0 ], [ 2, 25, 25, 25, 25, 25, 25, 25, 2 ], [ 2, 25, 26, 21, 21, 21, 26, 25, 2 ], [ 2, 25, 21, 21, 21, 21, 21, 25, 2 ], [ 5, 25, 21, 21, 21, 21, 21, 25, 5 ], [ 0, 25, 21, 21, 21, 21, 21, 25, 0 ], [ 0, 25, 26, 21, 21, 21, 26, 25, 0 ], [ 0, 25, 25, 25, 25, 25, 25, 25, 0 ], [ 1, 1, 1, 0, 1, 2, 1, 1, 1 ] ],
        step: 45,
        targetList: [ [ 0, 20 ], [ 21, 21 ], [ 25, 24 ], [ 26, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv60: {
        mapList: [ [ 1, 3, 2, 1, 2, 2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 1, 5, 1 ], [ 2, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, 3, 3, -2, -2, -2, 1, 1, 1 ], [ 1, 3, 1, -2, -2, -2, 2, 2, 1 ], [ 2, 2, 2, 2, 1, 3, 1, 1, 2 ], [ 2, 3, 3, 20, 20, 20, 3, 1, 2 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 4, 15 ], [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv61: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 2, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 2, 3, 3, 1, 2, 1, 3, 1, 2 ] ],
        step: 30,
        targetList: [ [ 0, 10 ], [ 1, 20 ], [ 3, 15 ], [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv62: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 5, 5, 1 ], [ 2, -2, -2, 21, 1, 21, -2, -2, 1 ], [ 1, -2, -2, 21, 2, 21, -2, -2, 1 ], [ 1, -2, -2, 21, 2, 21, -2, -2, 1 ], [ 1, -2, -2, 21, 3, 21, -2, -2, 1 ], [ 2, -2, -2, 21, 1, 21, -2, -2, 2 ], [ 2, 20, 20, 1, 2, 1, 20, 20, 2 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 4, 15 ], [ 20, 4 ], [ 21, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv63: {
        mapList: [ [ 3, 22, 2, 2, 3, 2, 2, 22, 3 ], [ 3, 26, 2, 2, 3, 2, 2, 26, 3 ], [ 3, 22, 1, 1, 1, 1, 1, 22, 3 ], [ 2, 22, 0, 0, 0, 0, 0, 22, 2 ], [ 2, 22, 1, 1, 1, 1, 1, 22, 2 ], [ 2, 26, 2, 2, 2, 2, 2, 26, 2 ], [ 3, 22, 3, 3, 3, 3, 3, 22, 3 ], [ 3, 22, 4, 4, 4, 4, 4, 22, 3 ], [ 3, 22, 3, 3, 3, 3, 3, 22, 3 ] ],
        step: 40,
        targetList: [ [ 3, 25 ], [ 26, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv64: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, -2, -2, -2, -2, -2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 2, 0, 1, 3, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 1, 3, 1, 1, 2, 3, 2, 2, 1 ], [ 2, 2, -2, -2, -2, -2, -2, 1, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 2 ] ],
        step: 50,
        targetList: [ [ 0, 10 ], [ 1, 20 ], [ 3, 20 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv65: {
        mapList: [ [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 1, 22, 25, 25, 25, 25, 25, 22, 1 ], [ 1, 22, 25, 21, 21, 21, 25, 22, 1 ], [ 0, 22, 25, 21, 26, 21, 25, 22, 0 ], [ 1, 22, 25, 21, 21, 21, 25, 22, 1 ], [ 1, 22, 25, 25, 25, 25, 25, 22, 1 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ] ],
        step: 40,
        targetList: [ [ 21, 8 ], [ 25, 16 ], [ 26, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv66: {
        mapList: [ [ 3, 3, 3, 0, 0, 0, 3, 3, 3 ], [ 1, 1, 1, 0, 26, 0, 1, 1, 1 ], [ 2, 2, 24, 24, 24, 24, 24, 2, 2 ], [ 0, 0, 24, 21, 21, 21, 24, 0, 0 ], [ 0, 26, 24, 21, 20, 21, 24, 26, 0 ], [ 0, 0, 24, 21, 21, 21, 24, 0, 0 ], [ 2, 2, 24, 24, 24, 24, 24, 2, 2 ], [ 1, 1, 1, 0, 26, 0, 1, 1, 1 ], [ 3, 3, 3, 0, 0, 0, 3, 3, 3 ] ],
        step: 40,
        targetList: [ [ 20, 1 ], [ 21, 8 ], [ 25, 16 ], [ 26, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv67: {
        mapList: [ [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 3, 3, 3, 4, 3, 3, 3, 21 ], [ 21, 0, 22, 22, 22, 22, 22, 0, 21 ], [ 21, 0, 22, 26, 26, 26, 22, 0, 21 ], [ 21, 0, 22, 26, -2, 26, 22, 0, 21 ], [ 21, 1, 22, 26, -2, 26, 22, 1, 21 ], [ 21, 1, 22, 26, 26, 26, 22, 1, 21 ], [ 21, 1, 22, 22, 22, 22, 22, 1, 21 ], [ 21, 1, 0, 0, 0, 0, 0, 1, 21 ] ],
        step: 50,
        targetList: [ [ 21, 25 ], [ 26, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv68: {
        mapList: [ [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 1, 1, 1, 3, 3, 3, 1, 1, 1 ], [ 2, 0, 23, 23, 23, 23, 23, 0, 2 ], [ 2, 0, 23, 1, 26, 1, 23, 0, 2 ], [ 2, 0, 23, 26, 26, 26, 23, 0, 2 ], [ 2, 0, 23, 1, 26, 1, 23, 0, 2 ], [ 3, 0, 23, 23, 23, 23, 23, 0, 3 ], [ 3, 1, 2, 2, 2, 2, 2, 1, 3 ], [ 3, 1, 5, 5, 4, 4, 4, 1, 3 ] ],
        step: 50,
        targetList: [ [ 25, 16 ], [ 26, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv69: {
        mapList: [ [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 1, 1, 1, 3, 3, 3, 1, 1, 1 ], [ 2, 0, 23, 23, 23, 23, 23, 0, 2 ], [ 2, 0, 23, 1, 26, 1, 23, 0, 2 ], [ 2, 0, 23, 26, 26, 26, 23, 0, 2 ], [ 2, 0, 23, 1, 26, 1, 23, 0, 2 ], [ 3, 0, 23, 23, 23, 23, 23, 0, 3 ], [ 3, 1, 2, 2, 2, 2, 2, 1, 3 ], [ 3, 1, 5, 5, 4, 4, 4, 1, 3 ] ],
        step: 50,
        targetList: [ [ 25, 16 ], [ 26, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv70: {
        mapList: [ [ 2, 2, 2, 2, 0, 1, 1, 1, 1 ], [ 4, 4, 4, 4, 0, 3, 3, 3, 3 ], [ 0, 1, 2, 3, 4, 5, 6, 0, 0 ], [ 0, 1, 2, 3, 4, 5, 6, 0, 0 ], [ 22, 22, 26, 22, 22, 22, 26, 22, 22 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 1, 21, 21, 21, 21, 21, 0, 0 ], [ 1, 1, 21, 21, 21, 21, 21, 0, 0 ] ],
        step: 35,
        targetList: [ [ 21, 19 ], [ 26, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv71: {
        mapList: [ [ 3, 3, 3, -2, -2, -2, 3, 3, 3 ], [ 2, 0, 0, 0, -2, 0, 0, 0, 2 ], [ 2, 26, 21, 21, 22, 21, 21, 26, 2 ], [ 2, 21, 21, 21, 22, 21, 21, 21, 2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ 1, 21, 21, 21, 22, 21, 21, 21, 1 ], [ 1, 26, 21, 21, 22, 21, 21, 26, 1 ], [ 1, 0, 0, 0, -2, 0, 0, 0, 1 ], [ 3, 3, 3, -2, -2, -2, 3, 3, 3 ] ],
        step: 35,
        targetList: [ [ 21, 20 ], [ 26, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv72: {
        mapList: [ [ 1, 1, 1, -2, -2, -2, 1, 1, 1 ], [ 5, 5, 2, 0, 0, 0, 2, 5, 5 ], [ 5, 5, 2, 23, 23, 23, 2, 5, 5 ], [ 0, 0, 2, 1, 1, 1, 2, 0, 0 ], [ 3, 3, 3, 7, 7, 7, 3, 3, 3 ], [ 3, 23, 23, 23, 4, 23, 23, 23, 3 ], [ 3, 23, 26, 23, 4, 23, 26, 23, 3 ], [ 3, 23, 23, 23, 4, 23, 23, 23, 3 ], [ -2, 1, 1, 1, 4, 1, 1, 1, -2 ] ],
        step: 35,
        targetList: [ [ 25, 19 ], [ 26, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv73: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 1, 2, 3, 2, 1, 2, 1, 3 ], [ 3, 1, 1, 26, 26, 26, 1, 1, 3 ], [ 3, 1, 2, 26, 3, 26, 1, 1, 3 ], [ 2, 2, 2, 26, 26, 26, 2, 2, 2 ], [ 2, 2, 2, 1, 1, 1, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ] ],
        step: 50,
        targetList: [ [ 26, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 7e3, 14e3, 21e3 ]
      },
      lv74: {
        mapList: [ [ 1, 3, 2, 3, -2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, -2, 0, 2, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 3, -2, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 1, 3, 2, 3, -2, 2, 1, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ] ],
        step: 45,
        targetList: [ [ 2, 25 ], [ 3, 25 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv75: {
        mapList: [ [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ], [ -2, -2, -2, 2, 2, 2, -2, -2, -2 ], [ 5, 5, 4, 1, 1, 1, 4, 5, 5 ], [ 0, 1, 3, 23, 23, 23, 3, 1, 0 ], [ 0, 1, 3, 23, 27, 23, 3, 1, 0 ], [ 0, 1, 3, 23, 23, 23, 3, 1, 0 ], [ 5, 5, 4, 1, 1, 1, 4, 5, 5 ], [ -2, -2, -2, 2, 2, 2, -2, -2, -2 ], [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ] ],
        step: 30,
        targetList: [ [ 25, 8 ], [ 27, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ]
      },
      lv76: {
        mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 3, 0, 2, 3, 1 ], [ 3, 3, 1, 3, 2, 5, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 22, 22, 22, 22, 0, 22, 3, 1 ], [ 1, 3, -2, 3, 2, 2, -2, 1, 1 ], [ 2, 1, -2, 3, 2, 3, -2, 3, 1 ], [ 2, 2, -2, 1, 1, 1, -2, 3, 1 ], [ 1, 1, -2, 3, 1, 2, -2, 3, 1 ] ],
        step: 35,
        targetList: [ [ 2, 25 ], [ 3, 25 ], [ 4, 10 ], [ 5, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv77: {
        mapList: [ [ 1, 3, 2, 1, 0, -2, 1, 4, 3 ], [ 1, 1, 2, 1, 2, -2, 2, 3, 1 ], [ 3, 3, 1, 0, 1, -2, 5, 5, 1 ], [ 2, 2, 2, 3, 1, -2, 1, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 3, 3, 2, -2, 21, 21, 21 ], [ 1, 3, 1, 1, 2, -2, 21, 21, 21 ], [ 2, 2, 2, 2, 1, -2, 21, 21, 21 ], [ 2, 3, 3, 1, 2, -2, 21, 21, 21 ] ],
        step: 35,
        targetList: [ [ 3, 20 ], [ 5, 10 ], [ 21, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv78: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 3, 2, 2, 3, 2, 0, 1, 1, 3 ], [ 1, 2, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 4, 4, 3, 1, 3, 1, 3, 1 ], [ 22, 22, 22, 22, -2, 22, 22, 22, 22 ], [ 3, 2, 2, -2, -2, -2, 1, 3, 3 ], [ 2, 2, -2, -2, -2, -2, -2, 3, 1 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 2, 25 ], [ 3, 20 ], [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv79: {
        mapList: [ [ 1, -2, 2, 3, 21, 0, 1, -2, 3 ], [ 3, -2, 2, 3, 21, 1, 1, -2, 3 ], [ 1, -2, 2, 3, 21, 0, 2, -2, 1 ], [ 2, -2, 2, 5, 21, 3, 1, -2, 1 ], [ 1, -2, 2, 3, 21, 0, 1, -2, 1 ], [ 3, -2, 2, 4, 21, 3, 1, -2, 3 ], [ 2, -2, 3, 2, 21, 2, 0, -2, 1 ], [ 1, -2, 2, 1, 21, 1, 1, -2, 1 ], [ 1, -2, 3, 21, 21, 21, 1, -2, 1 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 4, 10 ], [ 5, 10 ], [ 21, 11 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv80: {
        mapList: [ [ 0, 0, 1, 1, 1, 0, 0, 2, 2 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 3, 3, 4, 2, 2, 2, 0, 1, 2 ], [ 5, 5, 3, 4, 4, 5, 5, 3, 3 ], [ 3, 3, 2, 2, 2, 2, 5, 7, 3 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 5, 5, 4, 4, 6, 4, 4, 5, 5 ], [ 2, 2, 3, 3, 3, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 2, 2, 2, 2, 3 ] ],
        step: 35,
        targetList: [ [ 25, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv81: {
        mapList: [ [ -2, -2, 3, 3, 3, 3, 3, -2, -2 ], [ 0, 0, 4, 0, 4, 0, 4, 0, 0 ], [ 1, 1, 27, 1, 4, 1, 27, 1, 1 ], [ 2, 2, 4, 2, 4, 0, 4, 0, 0 ], [ 3, 3, 3, 3, 27, 3, 3, 3, 3 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 0 ], [ 1, 21, 27, 21, 21, 21, 27, 21, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, 2, 2, 2, 0, 0, 0, 0, -2 ] ],
        step: 35,
        targetList: [ [ 21, 12 ], [ 27, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv82: {
        mapList: [ [ 0, 4, 1, 1, 1, 1, 1, 4, 0 ], [ 0, 4, 27, 2, 2, 2, 27, 4, 0 ], [ 2, 1, 3, 5, 5, 5, 3, 1, 2 ], [ 4, 4, 26, 0, 0, 0, 26, 4, 4 ], [ 4, 1, 27, 1, 3, 1, 27, 1, 4 ], [ 2, 2, 1, 4, 4, 4, 1, 2, 2 ], [ 2, 22, 22, 22, 22, 22, 22, 22, 2 ], [ 1, 1, 27, 1, 1, 1, 27, 1, 1 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ] ],
        step: 45,
        targetList: [ [ 20, 6 ], [ 26, 2 ], [ 27, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv83: {
        mapList: [ [ 0, 4, 1, 1, 1, 1, 1, 4, 0 ], [ 0, 4, 27, 2, 2, 2, 27, 4, 0 ], [ 2, 1, 3, 5, 5, 5, 3, 1, 2 ], [ 4, 4, 26, 0, 0, 0, 26, 4, 4 ], [ 4, 1, 27, 1, 3, 1, 27, 1, 4 ], [ 2, 2, 1, 4, 4, 4, 1, 2, 2 ], [ 2, 22, 22, 22, 22, 22, 22, 22, 2 ], [ 1, 1, 27, 1, 1, 1, 27, 1, 1 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ] ],
        step: 40,
        targetList: [ [ 20, 6 ], [ 26, 2 ], [ 27, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv84: {
        mapList: [ [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 0, 21, 21, 21, 0, 21, 21, 21, 0 ], [ 1, 21, 27, 21, 1, 21, 27, 21, 1 ], [ 2, 21, 21, 21, 2, 21, 21, 21, 2 ], [ 2, 21, 21, 21, 2, 21, 21, 21, 2 ], [ 1, 21, 27, 21, 1, 21, 27, 21, 1 ], [ 0, 21, 21, 21, 0, 21, 21, 21, 0 ], [ 1, 2, 1, 0, 2, 1, 0, 3, 2 ], [ 0, 0, 0, 3, 3, 3, 1, 1, 1 ] ],
        step: 45,
        targetList: [ [ 21, 32 ], [ 25, 9 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv85: {
        mapList: [ [ 3, 3, 1, 0, 2, 0, 1, 3, 3 ], [ 3, 27, 1, 0, 2, 0, 1, 27, 3 ], [ 0, 0, 4, 4, 4, 4, 4, 0, 0 ], [ 1, 1, 2, 0, 2, 0, 2, 1, 1 ], [ 2, 2, 1, 0, 2, 0, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 1, 1, 2, -2, 2, 1, 1, 0 ], [ 0, 27, 2, 2, -2, 2, 2, 27, 0 ], [ 20, 20, 20, 20, -2, 20, 20, 20, 20 ] ],
        step: 45,
        targetList: [ [ 20, 8 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv86: {
        mapList: [ [ 1, 4, 4, 4, 1, 22, 22, -2, -2 ], [ 5, 23, 23, 23, 3, 22, 22, -2, -2 ], [ 5, 23, 27, 23, 3, 22, 22, -2, -2 ], [ 5, 23, 23, 23, 3, 22, 22, -2, -2 ], [ 1, 2, 2, 2, 1, 4, 4, 4, 1 ], [ 2, 3, 0, 4, 3, 23, 23, 23, 5 ], [ 2, 3, 0, 4, 3, 23, 20, 23, 5 ], [ 3, 3, 0, 0, 3, 23, 23, 23, 5 ], [ 1, 1, 1, 0, 1, 0, 0, 0, 1 ] ],
        step: 40,
        targetList: [ [ 20, 1 ], [ 25, 16 ], [ 27, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv87: {
        mapList: [ [ 1, 3, 3, 3, 1, 3, 3, 3, 1 ], [ 4, 23, 23, 23, 5, 23, 23, 23, 4 ], [ 4, 23, 27, 23, 5, 23, 27, 23, 4 ], [ 4, 23, 23, 23, 5, 23, 23, 23, 4 ], [ 1, 5, 5, 5, 1, 3, 3, 3, 1 ], [ 2, 23, 23, 23, 4, 22, 22, 22, -2 ], [ 2, 23, 26, 23, 4, 22, -2, -2, -2 ], [ 2, 23, 23, 23, 4, 22, -2, -2, -2 ], [ 1, 3, 3, 3, 1, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 25, 24 ], [ 26, 1 ], [ 27, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv88: {
        mapList: [ [ -2, 0, 0, 0, 0, 0, 0, 0, -2 ], [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ], [ 0, 22, 27, 0, 0, 0, 27, 22, 0 ], [ 0, 22, 1, 23, 23, 23, 1, 22, 0 ], [ 0, 22, 1, 23, 26, 23, 1, 22, 0 ], [ 0, 22, 1, 23, 23, 23, 1, 22, 0 ], [ 0, 22, 27, 0, 0, 0, 27, 22, 0 ], [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ], [ -2, 0, 0, 0, 0, 0, 0, 0, -2 ] ],
        step: 35,
        targetList: [ [ 25, 8 ], [ 26, 1 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv89: {
        mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 22, 22, 3, 22, 0, 22, 22, 1 ], [ 1, -2, 2, -2, 1, -2, 1, -2, 1 ], [ 3, -2, 2, -2, 0, -2, 1, -2, 3 ], [ 2, -2, 3, -2, 2, -2, 0, -2, 1 ], [ 20, -2, 20, -2, 20, -2, 20, -2, 20 ] ],
        step: 35,
        targetList: [ [ 2, 30 ], [ 3, 30 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv90: {
        mapList: [ [ 25, 25, 0, 0, 0, 0, 0, 25, 25 ], [ 25, 25, 22, 22, 22, 22, 22, 25, 25 ], [ 1, 22, 0, 0, 0, 0, 0, 22, 1 ], [ 1, 22, 1, 2, 2, 2, 1, 22, 1 ], [ 1, 22, 1, 2, 4, 2, 1, 22, 1 ], [ 1, 22, 1, 2, 2, 2, 1, 22, 1 ], [ 1, 22, 0, 0, 0, 0, 0, 22, 1 ], [ 25, 25, 22, 22, 22, 22, 22, 25, 25 ], [ 25, 25, 2, 2, 2, 2, 2, 25, 25 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 4, 15 ], [ 25, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv91: {
        mapList: [ [ 25, 25, -2, -2, -2, -2, -2, 25, 25 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ -2, 1, 25, 0, 0, 0, 25, 1, -2 ], [ 22, 1, 0, 25, 21, 25, 0, 1, 22 ], [ 22, 1, 0, 21, 25, 21, 0, 1, 22 ], [ 22, 1, 0, 25, 21, 25, 0, 1, 22 ], [ -2, 1, 25, 0, 0, 0, 25, 1, -2 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ 25, 20, 20, -2, -2, -2, 20, 20, 25 ] ],
        step: 50,
        targetList: [ [ 2, 15 ], [ 20, 4 ], [ 21, 4 ], [ 25, 23 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv92: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, -2, -2, 1, 2, 0, -2, -2, 1 ], [ 3, -2, -2, 0, 1, 2, -2, -2, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 2, 0, 1, 3, 1 ], [ 1, 3, 3, 22, 22, 22, 22, 1, 1 ], [ 1, -2, -2, 1, 2, 3, -2, -2, 3 ], [ 2, -2, -2, 2, 1, 2, -2, -2, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 2 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 2, 20 ], [ 4, 10 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv93: {
        mapList: [ [ 0, 0, 0, 24, 2, 24, 1, 1, 1 ], [ 0, 0, 0, 24, 2, 24, 1, 1, 1 ], [ 0, 0, 0, 24, 2, 24, 1, 1, 1 ], [ 24, 24, 24, 4, 4, 4, 24, 24, 24 ], [ 1, 1, 1, 5, 5, 5, 3, 3, 3 ], [ 24, 24, 24, 4, 4, 4, 24, 24, 24 ], [ 2, 2, 2, 24, 2, 24, 3, 3, 3 ], [ 2, 2, 2, 24, 2, 24, 3, 3, 3 ], [ 2, 2, 2, 24, 2, 24, 3, 3, 3 ] ],
        step: 35,
        targetList: [ [ 25, 24 ], [ 4, 20 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv94: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 1, 22, 22, 22, 4, 22, 22, 22, 1 ], [ 1, 22, 0, 22, 4, 22, 0, 22, 1 ], [ 1, 22, 22, 22, 4, 22, 22, 22, 1 ], [ 1, 22, 0, 22, 4, 22, 0, 22, 1 ], [ 1, 22, 22, 22, 4, 22, 22, 22, 1 ], [ 25, 25, 25, 1, 1, 1, 25, 25, 25 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 15 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 1, 1 ], [ 7, 7 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 5, 5 ], [ 8, 6 ] ], [ [ 4, 1 ], [ 7, 2 ] ] ]
      },
      lv95: {
        mapList: [ [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ 0, 22, 26, 22, 0, 22, 27, 22, 0 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ -2, 1, 1, 1, 7, 1, 1, 1, -2 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ 0, 22, 27, 22, 0, 22, 26, 22, 0 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ] ],
        step: 40,
        targetList: [ [ 26, 2 ], [ 27, 2 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 1, 5 ], [ 4, 6 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 5 ], [ 8, 6 ] ] ]
      },
      lv96: {
        mapList: [ [ 3, 0, 1, 0, 5, 0, 1, 0, 3 ], [ 3, 1, 26, 1, 5, 1, 26, 1, 3 ], [ 3, 0, 1, 0, 5, 0, 1, 0, 3 ], [ 1, 22, 22, 22, 1, 25, 25, 25, 1 ], [ 1, 22, 27, 22, 1, 25, 27, 25, 1 ], [ 1, 22, 22, 22, 1, 25, 25, 25, 1 ], [ 0, 0, 0, 0, -2, 0, 0, 0, 0 ], [ 0, 20, 20, 20, -2, 20, 20, 20, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 50,
        targetList: [ [ 20, 6 ], [ 26, 2 ], [ 27, 2 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ] ],
        stoneList: [ [ [ 0, 0 ], [ 3, 1 ] ], [ [ 0, 4 ], [ 1, 4 ] ], [ [ 4, 2 ], [ 7, 3 ] ], [ [ 4, 5 ], [ 7, 6 ] ] ]
      },
      lv97: {
        mapList: [ [ 1, 1, 1, 2, 2, 2, 1, 1, 1 ], [ 4, 4, 4, 3, 3, 3, 24, 24, 24 ], [ 5, 5, 5, 4, 2, 2, 0, 0, 0 ], [ 3, 3, 3, 4, 24, 24, 24, 21, 21 ], [ 24, 24, 24, 4, 0, 0, 0, 21, 21 ], [ 0, 0, 0, 21, 21, 21, 21, 21, 21 ], [ 1, 21, 24, 24, 24, 1, 1, 1, 2 ], [ 1, 21, 0, 0, 0, 1, 24, 24, 24 ], [ 21, 21, 21, 21, 21, 21, 0, 0, 0 ] ],
        step: 45,
        targetList: [ [ 21, 18 ], [ 25, 15 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ] ],
        stoneList: [ [ [ 1, 0 ], [ 4, 1 ] ], [ [ 1, 4 ], [ 4, 5 ] ], [ [ 5, 2 ], [ 8, 3 ] ], [ [ 5, 5 ], [ 8, 6 ] ] ]
      },
      lv98: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 0, 0, 23, 0, 0, 0, 0 ], [ 0, 21, 21, 21, 23, 21, 21, 21, 0 ], [ 0, 1, 1, 21, 23, 1, 1, 21, 0 ], [ 23, 21, 21, 21, 23, 21, 21, 21, 23 ], [ 0, 21, 1, 1, 23, 21, 1, 1, 0 ], [ 0, 21, 21, 21, 23, 21, 21, 21, 0 ], [ 0, 0, 0, 0, 23, 0, 0, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 21, 22 ], [ 25, 9 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 1, 1 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 1, 4 ], [ 4, 5 ] ], [ [ 4, 1 ], [ 7, 2 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
      },
      lv99: {
        mapList: [ [ 0, 27, 0, 1, 1, 1, 4, 27, 4 ], [ 0, 0, 0, 1, 1, 1, 4, 4, 4 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 0, 0, 0, 0, 1, 1, 1, 1, 21 ], [ 22, 22, 21, 21, 21, 21, 21, 21, 21 ], [ -2, 22, 22, 22, 1, 1, 1, 1, 21 ], [ -2, 2, 2, 22, 21, 21, 21, 21, 21 ], [ -2, 2, 2, 22, 22, 22, 22, 3, 21 ], [ -2, -2, -2, -2, -2, -2, 22, 3, 22 ] ],
        step: 40,
        targetList: [ [ 21, 24 ], [ 27, 2 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 4, 4 ], [ 5, 4 ] ] ]
      },
      lv100: {
        mapList: [ [ -2, -2, -2, 1, 0, 3, 1, 4, 3 ], [ -2, -2, -2, 1, 2, 4, 2, 3, 1 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ], [ 2, 2, 21, 3, 1, 1, 1, 3, 1 ], [ 1, 2, 21, 4, 3, 2, 1, 2, 2 ], [ 1, 3, 21, 3, 2, 3, 1, 1, 1 ], [ 1, 3, 21, 1, 2, 2, -2, -2, -2 ], [ 2, 2, 21, 2, 1, 1, -2, -2, -2 ], [ 2, 3, 21, 20, 20, 20, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 1, 20 ], [ 2, 20 ], [ 20, 3 ], [ 21, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv101: {
        mapList: [ [ 0, 0, 0, -2, 3, -2, -2, -2, 3 ], [ 2, 1, 2, -2, 3, 22, 22, 22, 3 ], [ 1, 27, 1, 0, 3, 2, 27, 2, 3 ], [ 2, 1, 2, 0, 2, 2, 4, 2, 2 ], [ 3, 3, 3, 4, 1, 1, 4, 1, 1 ], [ 0, 0, 0, 4, 1, 0, 0, 0, 1 ], [ 4, 27, 4, 0, 2, 23, 23, 23, 2 ], [ 1, 1, 1, 0, 2, 20, 20, 20, 2 ], [ 2, 2, 2, -2, 2, -2, -2, -2, 2 ] ],
        step: 40,
        targetList: [ [ 20, 3 ], [ 25, 3 ], [ 27, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv102: {
        mapList: [ [ 1, 2, 2, 1, 0, 3, -2, -2, -2 ], [ 3, 1, 1, 1, 2, 4, -2, -2, -2 ], [ 3, 3, 3, 0, 1, 2, -2, -2, -2 ], [ 2, 2, 2, 3, 1, 1, 1, 3, 1 ], [ 1, 2, 3, 4, 3, 2, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, -2, -2, 1, 2, 2, 3, 1, 3 ], [ -2, -2, -2, 2, 1, 1, 3, 3, 2 ], [ -2, -2, -2, 20, 20, 20, 20, 20, 20 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 4, 15 ], [ 20, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv103: {
        mapList: [ [ -2, 1, 1, -2, -2, -2, 2, 2, -2 ], [ -2, 1, 1, -2, -2, -2, 2, 2, -2 ], [ 1, 27, 1, 0, 0, 0, 2, 27, 2 ], [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ], [ 0, 0, 4, 1, 1, 5, 5, 2, 2 ], [ 0, 21, 4, 21, 1, 21, 5, 21, 2 ], [ 25, 4, 25, 3, 25, 2, 25, 1, 25 ], [ 0, 22, 1, 22, 2, 22, 3, 22, 4 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 21, 4 ], [ 25, 5 ], [ 27, 2 ], [ 28, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 7, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 3, 6 ], [ 6, 7 ] ] ]
      },
      lv104: {
        mapList: [ [ 1, 2, 4, -2, 0, 1, -2, 2, 1 ], [ 3, 1, 2, -2, 2, 2, -2, 3, 2 ], [ 3, 3, 3, -2, 1, 2, -2, 2, 1 ], [ 2, 2, 2, -2, 1, 4, -2, 3, 1 ], [ 22, 22, 22, -2, 22, 22, -2, 22, 22 ], [ 1, 3, 1, -2, 2, 2, -2, 1, 1 ], [ 2, 3, 3, -2, 2, 4, -2, 1, 3 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 2, 2, 1, 20, 20, 20, 2, 2, 1 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 4, 10 ], [ 20, 3 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv105: {
        mapList: [ [ 1, 21, -2, 21, 0, 3, 1, 2, 1 ], [ 3, 21, -2, 21, 2, 4, 3, 3, 2 ], [ 3, 21, -2, 21, 1, 2, 2, 2, 1 ], [ 2, 21, -2, 21, 1, 1, 1, 3, 1 ], [ 1, 21, -2, 21, 3, 2, 1, 2, 2 ], [ 1, 21, -2, 21, 21, 21, 21, 21, 21 ], [ 2, 21, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 2, 2, 1, 1, 2, 2, 2, 2, 1 ] ],
        step: 35,
        targetList: [ [ 0, 10 ], [ 4, 10 ], [ 5, 10 ], [ 21, 26 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv106: {
        mapList: [ [ 1, 1, -2, 1, 1, 1, -2, 1, 1 ], [ 1, 22, 22, 22, 26, 22, 22, 22, 1 ], [ 0, 22, 1, 1, 0, 1, 1, 22, 0 ], [ 0, 26, 0, 27, 0, 27, 0, 26, 0 ], [ 25, 22, 1, 1, 0, 1, 1, 22, 25 ], [ 25, 22, 22, 22, 26, 22, 22, 22, 25 ], [ 0, 25, 3, 3, 25, 0, 3, 25, 0 ], [ 0, 25, 3, 3, 25, 0, 3, 25, 0 ], [ 0, 25, 1, 1, 25, 0, 3, 25, 0 ] ],
        step: 45,
        targetList: [ [ 25, 13 ], [ 26, 4 ], [ 27, 2 ], [ 28, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ],
        grassList: [ [ [ 0, 0 ], [ 8, 4 ], 1 ], [ [ 0, 5 ], [ 8, 8 ], 2 ] ],
        stoneList: [ [ [ 4, 0 ], [ 7, 1 ] ], [ [ 4, 5 ], [ 7, 6 ] ] ]
      },
      lv107: {
        mapList: [ [ 2, 5, 5, 2, -2, 3, 1, 2, 1 ], [ 2, 2, 2, 2, -2, 4, 3, 3, 2 ], [ 2, 5, 5, 2, -2, 2, 2, 2, 1 ], [ 22, 22, 22, 22, -2, 22, 22, 22, 22 ], [ 1, 2, 3, 4, -2, 2, 1, 2, 2 ], [ 1, 3, 3, 3, -2, 3, 1, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 20, 20, 20, 20, 20, 20, 20, 20, 20 ] ],
        step: 40,
        targetList: [ [ 4, 20 ], [ 5, 10 ], [ 20, 9 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv108: {
        mapList: [ [ 1, 2, 2, 1, 0, 3, 1, 2, 1 ], [ 3, 1, 1, 1, 2, 4, 3, 3, 2 ], [ -2, -2, -2, -2, 1, 2, 2, 2, 1 ], [ 21, 21, 21, -2, 1, 1, 1, 3, 1 ], [ 1, 2, 21, -2, 3, 2, 1, 2, 2 ], [ 1, 3, 21, -2, -2, -2, -2, 1, 1 ], [ 2, 3, 21, 21, 21, 21, -2, 1, 3 ], [ 3, 2, 2, 2, 1, 21, -2, 3, 2 ], [ 2, 20, 1, 20, 20, 20, -2, 20, 1 ] ],
        step: 45,
        targetList: [ [ 4, 20 ], [ 5, 20 ], [ 20, 5 ], [ 21, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv109: {
        mapList: [ [ 1, 2, 2, 1, -2, 3, 1, 2, 1 ], [ 3, 1, 1, 1, -2, 4, 3, 3, 2 ], [ 3, 3, 3, 0, -2, 2, 2, 2, 1 ], [ 22, 22, 22, 22, -2, 22, 22, 22, 22 ], [ 1, 2, 3, 4, -2, 2, 1, 2, 2 ], [ 1, 3, -2, -2, -2, -2, -2, 1, 1 ], [ 2, -2, -2, 1, 2, 2, -2, -2, 3 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, 2, 1, 1, 2, 2, 2, 2, -2 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 4, 20 ], [ 5, 20 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv110: {
        mapList: [ [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ], [ 2, 2, 2, 3, 3, 3, 2, 2, 2 ], [ 4, 4, 4, 5, 5, 5, 4, 4, 4 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 3, 3, 23, 3, 3, 3, 23, 3 ], [ 1, 27, 1, 27, 1, 27, 1, 27, 1 ], [ 1, 2, 1, 2, 1, 2, 1, 2, 1 ], [ 0, 26, 0, 26, 0, 26, 0, 26, 0 ], [ 0, 1, 0, 1, 0, 1, 0, 1, 0 ] ],
        step: 35,
        targetList: [ [ 25, 2 ], [ 26, 4 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv111: {
        mapList: [ [ 3, 3, 3, 3, 3, 3, 1, 4, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 2, 3, 2, 0, 2, 3, -2 ], [ 2, 2, 2, -2, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 3, 1, 2, 3, 0, -2, 1, 1, 3 ], [ 2, 3, 3, 2, 2, 2, 0, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 20, 20, 20, 20, 20, 20, 20, 20, 20 ] ],
        step: 35,
        targetList: [ [ 3, 25 ], [ 4, 20 ], [ 20, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv112: {
        mapList: [ [ 3, 3, -2, 2, 2, 2, -2, 3, 3 ], [ 4, 4, -2, 4, 4, 4, -2, 4, 4 ], [ 2, 0, 0, 0, 0, 0, 0, 0, 2 ], [ 2, 2, 2, 2, 0, 2, 2, 2, 2 ], [ 24, 0, 0, 0, 2, 0, 0, 0, 24 ], [ 3, 23, 23, 23, 23, 23, 23, 23, 4 ], [ 3, 23, 20, 21, 23, 20, 21, 23, 4 ], [ 3, 23, 26, 27, 23, 27, 26, 23, 4 ], [ 3, 3, 3, 7, 7, 7, 4, 4, 4 ] ],
        step: 40,
        targetList: [ [ 20, 2 ], [ 21, 2 ], [ 26, 2 ], [ 27, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv113: {
        mapList: [ [ 1, 2, 2, 1, 4, 3, 1, 2, 1 ], [ 3, 1, 1, 1, 1, 4, 3, 3, 2 ], [ 3, 3, 3, 0, 3, 2, 2, 2, 1 ], [ 2, 2, 2, 3, 3, 1, 1, 3, 1 ], [ 1, 2, 21, 21, 21, 21, 21, 1, 2 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 21, -2, -2, 21, 21, 21, -2, -2, 21 ], [ -2, -2, 21, 2, 1, 1, 21, -2, -2 ], [ -2, 21, 20, 20, 20, 20, 20, 21, -2 ] ],
        step: 40,
        targetList: [ [ 2, 30 ], [ 3, 20 ], [ 20, 5 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv114: {
        mapList: [ [ -2, -2, -2, 1, 3, 3, -2, -2, -2 ], [ -2, -2, 1, 1, 4, 4, 3, -2, -2 ], [ -2, 3, 3, 0, 4, 2, 2, 2, -2 ], [ 2, 2, 2, 3, 2, 1, 1, 3, 1 ], [ 1, 2, 3, 4, 1, 2, 1, 2, 2 ], [ 1, 3, 3, 4, 20, 2, 2, 1, 1 ], [ 2, 2, 2, 20, -2, 20, 3, 1, 3 ], [ 1, 1, 20, -2, -2, -2, 20, 1, 2 ], [ 20, 20, -2, -2, -2, -2, -2, 20, 20 ] ],
        step: 50,
        targetList: [ [ 3, 30 ], [ 4, 15 ], [ 20, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv115: {
        mapList: [ [ 5, 5, 7, 5, 5, -2, 5, 5, 7 ], [ 5, 5, 7, 5, 5, -2, 5, 5, 7 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 0, 1, 1, 4, 2, 2, 0, 0 ], [ 1, 3, 0, 0, 4, 1, 1, 3, 1 ], [ -2, 22, 22, 22, -2, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 27 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 4, 1 ], [ 7, 2 ] ] ]
      },
      lv116: {
        mapList: [ [ 2, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 1, 1, 1, 3, 0, 0, 3, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 1, 3, 4, 0, 5, 0, 0, 3 ], [ 1, 1, 3, 4, 0, 1, 1, 1, 3 ], [ 1, 0, 0, 4, 2, 0, 0, 1, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 4, 10 ], [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv117: {
        mapList: [ [ 2, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 1, 1, 1, 3, 0, 0, 3, 3, 1 ], [ 3, 1, 3, 22, 0, 22, 0, 0, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 2, 2, 3, 2, 20, 1, 3, 1 ], [ 3, 2, 2, 20, 2, 0, 20, 3, 3 ] ],
        step: 35,
        targetList: [ [ 0, 15 ], [ 1, 15 ], [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv118: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 1, 3 ], [ 1, 2, 1, 3, 2, 0, 1, 3, 1 ], [ 3, 22, 22, 3, 2, 22, 22, 3, 3 ], [ 1, 0, 2, 4, 2, 0, 3, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 1, 3, 1, 21, -2, 21, 1, 3, 1 ], [ 3, 2, 2, 21, -2, 21, 1, 3, 3 ] ],
        step: 35,
        targetList: [ [ 2, 10 ], [ 3, 10 ], [ 4, 15 ], [ 21, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv119: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 1, 0, 0, 25, 0, 0, 1, 0 ], [ 1, 1, 1, 25, 25, 25, 1, 1, 1 ], [ 2, 27, 25, 1, 1, 1, 25, 27, 2 ], [ 2, 25, 2, 2, 7, 2, 2, 25, 2 ], [ 2, 25, 2, 2, 7, 2, 2, 25, 2 ], [ 2, 25, 1, 1, 25, 1, 1, 25, 2 ], [ 2, 27, 25, 25, -2, 25, 25, 27, 2 ], [ 0, -2, 0, 0, -2, 0, 0, -2, 0 ] ],
        step: 30,
        targetList: [ [ 25, 17 ], [ 27, 4 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 3, 1 ], [ 6, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
      },
      lv120: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ -2, -2, -2, 2, 1, 3, -2, -2, -2 ], [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ], [ -2, -2, -2, 2, 1, 3, -2, -2, -2 ], [ 2, 2, 2, 3, 1, 0, 1, 3, 1 ], [ 1, 2, 2, 3, 1, 0, 1, 3, 1 ], [ 3, 2, 2, 20, 20, 20, 1, 3, 3 ] ],
        step: 30,
        targetList: [ [ 3, 10 ], [ 4, 10 ], [ 5, 10 ], [ 20, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv121: {
        mapList: [ [ 0, 0, 0, -2, 0, 0, 0, -2, -2 ], [ 2, 2, 2, -2, 2, 2, 2, -2, -2 ], [ 0, 0, 0, 3, 3, 3, 3, 1, 1 ], [ 4, 4, 4, 4, 3, 4, 4, 4, 4 ], [ 1, 1, 1, 0, 0, 0, 2, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 26, 25, 25, 26, 25, 25, 26, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 7, 7, 4, 4, 4, 4, 4, 7, 7 ] ],
        step: 40,
        targetList: [ [ 25, 24 ], [ 26, 3 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 1 ], [ [ 1, 0 ], [ 2, 8 ], 2 ], [ [ 3, 0 ], [ 4, 8 ], 1 ], [ [ 5, 0 ], [ 6, 8 ], 2 ], [ [ 7, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 2, 4 ], [ 3, 4 ] ], [ [ 5, 4 ], [ 6, 7 ] ] ]
      },
      lv122: {
        mapList: [ [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 21, 2, 2, 21, -2, 21, 3, 3, 21 ], [ 21, 2, 2, 21, 21, 21, 3, 3, 21 ], [ 21, 4, 7, 20, 22, 20, 7, 4, 21 ], [ 21, 4, 5, 22, 22, 22, 5, 4, 21 ], [ 21, 4, 5, 20, 22, 20, 5, 4, 21 ], [ 21, 0, 0, 21, 21, 21, 1, 1, 21 ], [ 21, 0, 0, 21, -2, 21, 1, 1, 21 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ] ],
        step: 40,
        targetList: [ [ 4, 20 ], [ 5, 10 ], [ 20, 4 ], [ 21, 40 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv123: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, -2 ], [ 3, 2, 2, 3, 2, 0, 1, -2, 3 ], [ 1, 2, 2, 3, 2, 0, -2, 3, 1 ], [ 2, 4, 4, 3, 1, -2, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 3, 2, 2, -2, 2, 0, 3, 1, 3 ], [ 22, 22, -2, 22, 22, 22, 22, 22, 22 ], [ 1, -2, 2, 3, 1, 0, 1, 3, 1 ], [ -2, 2, 20, 20, 20, 20, 1, 3, 3 ] ],
        step: 35,
        targetList: [ [ 3, 20 ], [ 2, 20 ], [ 20, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv124: {
        mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 3, 2, 2, 3, 2, 0, 1, 1, 3 ], [ 1, 2, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 4, 4, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 2, 2 ], [ 3, 2, 2, -2, -2, -2, 1, 3, 3 ], [ 2, 2, -2, -2, -2, -2, -2, 3, 1 ], [ 1, -2, 21, 21, 21, 21, 21, -2, 1 ], [ -2, -2, 21, 20, 20, 20, 21, -2, -2 ] ],
        step: 35,
        targetList: [ [ 2, 25 ], [ 3, 20 ], [ 20, 3 ], [ 21, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv125: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 7, 1, 1, 1, 1, 1, 1, 1, 7 ], [ 2, 2, 2, 2, 1, 2, 2, 2, 2 ], [ 0, 0, 0, 26, 26, 26, 0, 0, 0 ], [ 23, 23, 23, 23, 23, 23, 23, 23, 23 ], [ 23, 23, 23, 23, 23, 23, 23, 23, 23 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 7, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 7, 7, 2, 2, 2, 2, 2, 2, 2 ] ],
        step: 40,
        targetList: [ [ 25, 18 ], [ 26, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv126: {
        mapList: [ [ 1, -2, 2, 3, 21, 0, 1, -2, 3 ], [ 3, -2, 2, 3, 21, 1, 1, -2, 3 ], [ 1, -2, 2, 3, 21, 0, 2, -2, 1 ], [ 2, -2, 2, 5, 21, 3, 1, -2, 1 ], [ 1, -2, 22, 22, 21, 22, 22, -2, 1 ], [ 3, -2, 2, 4, 21, 3, 1, -2, 3 ], [ 2, -2, 3, 2, 21, 2, 0, -2, 1 ], [ 1, -2, 2, 1, 21, 1, 1, -2, 1 ], [ 1, -2, 3, 21, 21, 21, 1, -2, 1 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 4, 10 ], [ 5, 10 ], [ 21, 11 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv127: {
        mapList: [ [ 3, 3, 3, 3, 3, 3, 3, 4, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 1, 2, 3, 0, 0, 1, 1, 3 ], [ 2, 3, 3, 2, 2, 2, 0, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 20, 20, 20, 20, 20, 21, 21 ] ],
        step: 45,
        targetList: [ [ 3, 25 ], [ 4, 20 ], [ 20, 5 ], [ 21, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv128: {
        mapList: [ [ -2, 25, 0, 0, 0, 0, 0, 25, -2 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ 0, 1, 27, 2, 2, 2, 27, 1, 0 ], [ 0, 1, 2, 23, 23, 23, 2, 1, 0 ], [ 0, 1, 2, 23, 26, 23, 2, 1, 0 ], [ 0, 1, 2, 23, 23, 23, 2, 1, 0 ], [ 0, 1, 27, 2, 2, 2, 27, 1, 0 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ -2, 25, 0, 0, 0, 0, 0, 25, -2 ] ],
        step: 40,
        targetList: [ [ 25, 20 ], [ 26, 1 ], [ 27, 4 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 2 ], [ 1, 3 ] ], [ [ 2, 3 ], [ 5, 4 ] ], [ [ 6, 1 ], [ 7, 1 ] ], [ [ 5, 7 ], [ 8, 8 ] ] ]
      },
      lv129: {
        mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, -2, 2, -2, 1, -2, 1, -2, 1 ], [ 3, -2, 2, -2, 0, -2, 1, -2, 3 ], [ 2, -2, 3, -2, 2, -2, 0, -2, 1 ], [ 20, -2, 20, -2, 20, -2, 20, -2, 20 ] ],
        step: 35,
        targetList: [ [ 2, 30 ], [ 3, 30 ], [ 20, 5 ], [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv130: {
        mapList: [ [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ], [ 0, 1, 1, 1, 25, 1, 1, 1, 0 ], [ 0, 1, 2, 2, 25, 2, 2, 1, 0 ], [ 0, 1, 2, 26, 25, 26, 2, 1, 0 ], [ 25, 25, 25, 25, 23, 25, 25, 25, 25 ], [ 0, 1, 2, 26, 25, 26, 2, 1, 0 ], [ 0, 1, 2, 2, 25, 2, 2, 1, 0 ], [ 0, 1, 1, 1, 25, 1, 1, 1, 0 ], [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ] ],
        step: 45,
        targetList: [ [ 25, 17 ], [ 26, 4 ], [ 28, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 1, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 5 ], [ 8, 6 ] ], [ [ 7, 7 ], [ 8, 7 ] ] ]
      },
      lv131: {
        mapList: [ [ 1, 3, 2, 3, -2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, -2, 0, 2, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 3, -2, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 1, 3, 2, 3, -2, 2, 1, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 4, 5, 2, 4, -2, 2, 4, 5, 1 ], [ 5, 3, 1, 5, -2, 3, 5, 4, 2 ] ],
        step: 45,
        targetList: [ [ 2, 25 ], [ 3, 25 ], [ 4, 16 ], [ 5, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv132: {
        mapList: [ [ -2, 2, 2, 2, 2, 2, 2, 2, -2 ], [ -2, 2, 1, 1, 1, 1, 1, 2, -2 ], [ 1, 2, 1, 0, 0, 0, 1, 2, 1 ], [ 1, 23, 23, 23, 27, 23, 23, 23, 1 ], [ 1, 23, 20, 23, 23, 23, 20, 23, 1 ], [ 1, 23, 23, 23, 27, 23, 23, 23, 1 ], [ 1, 2, 1, 0, 0, 0, 1, 2, 1 ], [ 1, 2, 1, 1, 1, 1, 1, 2, 1 ], [ -2, 2, 2, 2, 2, 2, 2, 2, -2 ] ],
        step: 40,
        targetList: [ [ 20, 2 ], [ 25, 17 ], [ 27, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv133: {
        mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 3, 0, 2, 3, 1 ], [ 3, 3, 1, 3, 2, 5, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 2, 0, 1, 3, 1 ], [ 1, 3, -2, 3, 2, 2, -2, 1, 1 ], [ 2, 1, -2, 3, 2, 3, -2, 3, 1 ], [ 2, 2, -2, 1, 1, 1, -2, 3, 1 ], [ 1, 1, -2, 3, 1, 2, -2, 3, 1 ] ],
        step: 40,
        targetList: [ [ 2, 25 ], [ 4, 25 ], [ 5, 10 ], [ 6, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv134: {
        mapList: [ [ -2, -2, -2, 7, 7, 7, -2, -2, -2 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ 0, 27, 0, 1, 27, 1, 2, 27, 2 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ 2, 2, 2, 23, 23, 23, 1, 1, 1 ], [ 2, 27, 2, 23, 27, 23, 1, 27, 1 ], [ 2, 2, 2, 23, 23, 23, 1, 1, 1 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ 0, 27, 0, 1, 27, 1, 2, 27, 2 ] ],
        step: 35,
        targetList: [ [ 25, 8 ], [ 27, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv135: {
        mapList: [ [ 1, 3, 2, -2, -2, -2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 5, 5, 1 ], [ 21, 21, 21, 3, 1, 3, 21, 21, 21 ], [ 21, 21, 21, 1, 2, 0, 21, 21, 21 ], [ 21, 21, 21, 3, 2, 2, 21, 21, 21 ], [ -2, -2, -2, 3, 2, 3, -2, -2, -2 ], [ -2, -2, -2, 1, 1, 1, -2, -2, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ] ],
        step: 30,
        targetList: [ [ 3, 20 ], [ 4, 10 ], [ 20, 3 ], [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv136: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 1, 22, 0, 26, 0, 26, 0, 22, 1 ], [ 1, 22, 26, 26, 26, 26, 26, 22, 1 ], [ 1, 22, 0, 26, 0, 26, 0, 22, 1 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 26, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv137: {
        mapList: [ [ 1, 3, 2, -2, -2, -2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 5, 5, 1 ], [ 22, 22, 22, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 3, 3, 21, 21, 21, 22, 22, 22 ], [ 1, 3, 1, -2, -2, -2, 2, 2, 1 ], [ 2, 2, 2, -2, -2, -2, 1, 1, 2 ], [ 2, 3, 3, -2, -2, -2, 3, 1, 2 ] ],
        step: 40,
        targetList: [ [ 4, 15 ], [ 5, 15 ], [ 6, 5 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv138: {
        mapList: [ [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ], [ 0, 0, 0, 4, 4, 4, 0, 0, 0 ], [ 22, 23, 1, 23, 0, 23, 2, 23, 22 ], [ 3, 23, 1, 23, 0, 23, 2, 23, 3 ], [ 3, 23, 1, 23, 26, 23, 2, 23, 3 ], [ 3, 23, 1, 23, 0, 23, 2, 23, 3 ], [ 22, 23, 1, 23, 0, 23, 2, 23, 22 ], [ 0, 0, 0, 4, 4, 4, 0, 0, 0 ], [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ] ],
        step: 45,
        targetList: [ [ 25, 20 ], [ 26, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv139: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 21, 21, 21, 21, 21, 21, 21, 1 ], [ 2, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 2, 2, 20, 2, 20, 3, 20, 1, 2 ], [ 2, 3, 20, 1, 20, 1, 20, 1, 2 ] ],
        step: 50,
        targetList: [ [ 5, 15 ], [ 6, 8 ], [ 20, 6 ], [ 21, 20 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv140: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, -2, -2, 1, 2, 0, -2, -2, 1 ], [ 3, -2, -2, 0, 1, 2, -2, -2, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 22, 22, 22, 22, 22, 21, 21 ], [ 1, -2, -2, 1, 2, 3, -2, -2, 3 ], [ 2, -2, -2, 2, 1, 2, -2, -2, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 2 ] ],
        step: 50,
        targetList: [ [ 3, 15 ], [ 4, 10 ], [ 20, 5 ], [ 21, 13 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv141: {
        mapList: [ [ -2, 3, 3, 0, 0, 0, 3, 3, -2 ], [ -2, 3, 3, 0, 0, 0, 3, 3, -2 ], [ 2, 24, 24, 24, 24, 24, 24, 24, 2 ], [ 1, 4, 0, 0, 4, 0, 0, 4, 1 ], [ 0, 27, 0, 1, 27, 0, 2, 27, 0 ], [ 2, 24, 24, 24, 24, 24, 24, 24, 2 ], [ 2, 0, 0, 3, 3, 0, 0, 0, 2 ], [ 2, 0, 0, 3, 3, 0, 0, 0, 2 ], [ -2, 20, 20, -2, -2, -2, 20, 20, -2 ] ],
        step: 45,
        targetList: [ [ 20, 4 ], [ 25, 14 ], [ 27, 3 ], [ 28, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 2, 3 ], [ 7, 5 ] ] ]
      },
      lv142: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 5, 5, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 2, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 2, 20, 3, 20, 20, 20, 3, 20, 2 ] ],
        step: 40,
        targetList: [ [ 1, 20 ], [ 3, 15 ], [ 21, 18 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv143: {
        mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 3, 1, 2, 3, 2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 5, 5, 1 ], [ 2, -2, -2, 6, 1, 4, -2, -2, 1 ], [ 1, -2, -2, 6, 2, 4, -2, -2, 1 ], [ 1, -2, -2, 6, 2, 4, -2, -2, 1 ], [ 1, -2, -2, 5, 3, 5, -2, -2, 1 ], [ 2, -2, -2, 5, 1, 5, -2, -2, 2 ], [ 2, 4, 4, 1, 2, 1, 3, 3, 2 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 4, 10 ], [ 6, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv144: {
        mapList: [ [ 1, 3, 2, 1, 2, 2, 1, 4, 3 ], [ 1, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 3, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 2, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 1, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 2, 2, 2, 2, 1, 3, 1, 1, 2 ], [ 2, 3, 3, 20, 20, 20, 3, 1, 2 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 4, 15 ], [ 20, 3 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv145: {
        mapList: [ [ 22, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 22, -2, -2, -2, -2, -2, 3, 1 ], [ 3, 3, 22, 0, 1, 2, 5, 5, 1 ], [ 2, 2, 2, 22, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 22, 0, 1, 3, 1 ], [ 3, 3, 4, 5, 1, 22, 3, 4, 1 ], [ 1, 3, 1, 1, 2, 3, 22, 2, 1 ], [ 2, 2, -2, -2, -2, -2, -2, 22, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 22 ] ],
        step: 50,
        targetList: [ [ 0, 10 ], [ 1, 20 ], [ 3, 20 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv146: {
        mapList: [ [ 3, 3, 24, 3, 3, 3, 24, 3, 3 ], [ 0, 0, 24, 0, 0, 0, 24, 0, 0 ], [ 1, 1, 24, 1, 1, 1, 24, 1, 1 ], [ 24, 24, 24, 2, 2, 2, 24, 24, 24 ], [ 0, 0, 1, 27, 26, 27, 1, 0, 0 ], [ 0, 0, 1, 1, 26, 1, 1, 0, 0 ], [ 24, 24, 24, 27, 26, 27, 24, 24, 24 ], [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 1, 1, 1, -2, -2, -2, 1, 1, 1 ] ],
        step: 30,
        targetList: [ [ 25, 18 ], [ 26, 3 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv147: {
        mapList: [ [ -2, 4, 4, 4, 6, 4, 4, 4, -2 ], [ 5, 23, 23, 23, 6, 23, 23, 23, 5 ], [ 5, 23, 26, 23, 5, 23, 26, 23, 5 ], [ 5, 23, 23, 23, 5, 23, 23, 23, 5 ], [ 7, 4, 4, 4, 5, 4, 4, 4, 7 ], [ 5, 23, 23, 23, 5, 23, 23, 23, 5 ], [ 5, 23, 27, 23, 5, 23, 27, 23, 5 ], [ 5, 23, 23, 23, 6, 23, 23, 23, 5 ], [ -2, 4, 4, 4, 6, 4, 4, 4, -2 ] ],
        step: 45,
        targetList: [ [ 25, 32 ], [ 26, 2 ], [ 27, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv148: {
        mapList: [ [ 2, 3, 2, 1, 0, -2, 1, 4, 3 ], [ 1, 1, 2, 2, 2, -2, 2, 3, 1 ], [ 3, 3, 2, 0, 1, -2, 5, 5, 1 ], [ 2, 2, 2, 3, 1, -2, 1, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 3, 3, 2, -2, 21, 21, 21 ], [ 1, 3, 1, 1, 2, -2, 21, 21, 21 ], [ 22, 22, 22, 22, 1, -2, 21, 21, 21 ], [ 20, 20, 20, 20, 20, -2, 21, 21, 21 ] ],
        step: 45,
        targetList: [ [ 3, 20 ], [ 5, 10 ], [ 21, 12 ], [ 20, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv149: {
        mapList: [ [ -2, -2, -2, 1, 0, 3, 1, 4, 3 ], [ -2, -2, -2, 1, 2, 4, 2, 3, 1 ], [ -2, -2, -2, 5, 5, 4, 1, 3, 1 ], [ 2, 2, 4, 3, 1, 1, 21, 21, 21 ], [ 1, 2, 2, 4, 3, 2, 21, 21, 21 ], [ 1, 3, 3, 3, 2, 3, 21, 21, 21 ], [ 1, 3, 1, 1, 2, 2, -2, -2, -2 ], [ 2, 2, 2, 2, 1, 1, -2, -2, -2 ], [ 20, 20, 20, 20, 20, 20, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 1, 20 ], [ 3, 20 ], [ 20, 6 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv150: {
        mapList: [ [ -2, -2, 0, 3, 3, 3, 0, -2, -2 ], [ 0, 22, 0, 22, 1, 22, 0, 22, 0 ], [ 0, 0, 27, 1, 1, 1, 27, 0, 0 ], [ 2, 22, 2, 22, 0, 22, 2, 22, 2 ], [ 2, 2, 26, 0, 27, 0, 26, 2, 2 ], [ 1, 22, 2, 22, 0, 22, 2, 22, 1 ], [ 1, 20, 27, 1, 1, 1, 27, 20, 1 ], [ 1, 22, 20, 22, 1, 22, 20, 22, 1 ], [ -2, -2, 20, -2, -2, -2, 20, -2, -2 ] ],
        step: 40,
        targetList: [ [ 20, 6 ], [ 26, 2 ], [ 27, 2 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv151: {
        mapList: [ [ 1, 2, 2, 1, 0, 3, -2, -2, -2 ], [ 3, 1, 1, 1, 2, 4, -2, -2, -2 ], [ 3, 3, 3, 0, 1, 2, -2, -2, -2 ], [ 2, 2, 2, 3, 1, 1, 1, 3, 1 ], [ 1, 2, 3, 4, 3, 2, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 4, 15 ], [ 21, 18 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv152: {
        mapList: [ [ -2, -2, 5, 5, 5, 5, 5, -2, -2 ], [ 1, 1, 23, 23, 23, 23, 23, 1, 1 ], [ 1, 4, 4, 4, 23, 4, 4, 4, 1 ], [ -2, 0, 26, 27, 23, 27, 26, 0, -2 ], [ -2, 0, 0, 0, 23, 0, 0, 0, -2 ], [ -2, 1, 1, 27, 23, 27, 1, 1, -2 ], [ -2, 2, 23, 23, 23, 23, 23, 2, -2 ], [ 1, 2, 2, 3, 3, 3, 2, 2, 1 ], [ 1, 1, 5, 5, 5, 5, 5, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 14 ], [ 26, 2 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv153: {
        mapList: [ [ 1, 2, 4, -2, 0, 1, -2, 2, 1 ], [ 3, 1, 2, -2, 2, 2, -2, 3, 2 ], [ 3, 3, 3, -2, 1, 2, -2, 2, 1 ], [ 2, 2, 2, -2, 1, 4, -2, 3, 1 ], [ 3, 4, 5, -2, 6, 7, -2, 7, 7 ], [ 1, 3, 1, -2, 2, 2, -2, 1, 1 ], [ 2, 3, 3, -2, 2, 4, -2, 1, 3 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 20, 20, 20, 21, 21, 1 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 4, 10 ], [ 20, 3 ], [ 21, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv154: {
        mapList: [ [ 1, 3, -2, 4, 0, 3, 1, 2, 1 ], [ 3, 4, -2, 4, 2, 4, 3, 3, 2 ], [ 3, 4, -2, 5, 5, 2, 2, 2, 1 ], [ 2, 3, -2, 3, 1, 5, 5, 3, 1 ], [ 1, 4, -2, 2, 3, 2, 1, 2, 2 ], [ 1, 3, -2, 1, 4, 3, 1, 2, 2 ], [ 2, 3, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 3, 4, 4, 5, 4, 4, 1, 4 ], [ 2, 2, 1, 1, 2, 2, 2, 2, 1 ] ],
        step: 45,
        targetList: [ [ 0, 10 ], [ 4, 10 ], [ 5, 10 ], [ 6, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv155: {
        mapList: [ [ 0, 0, 2, 2, 26, 2, 2, 0, 0 ], [ 0, 0, 2, 2, 26, 2, 2, 0, 0 ], [ 25, 25, 4, 4, 5, 4, 4, 25, 25 ], [ 3, 25, 4, 4, 5, 4, 4, 25, 3 ], [ 3, 25, 25, 1, 1, 1, 25, 25, 3 ], [ 1, 27, 25, 1, 1, 1, 25, 27, 1 ], [ 1, 1, 25, 25, 26, 25, 25, 1, 1 ], [ 0, 0, 0, 25, 26, 25, 0, 0, 0 ], [ 0, 0, 0, 25, 25, 25, 0, 0, 0 ] ],
        step: 40,
        targetList: [ [ 25, 20 ], [ 26, 4 ], [ 27, 2 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 4 ], [ 3, 7 ] ], [ [ 5, 1 ], [ 8, 2 ] ] ]
      },
      lv156: {
        mapList: [ [ 1, 2, 2, 1, -2, 3, 1, 2, 1 ], [ 3, 1, 1, 1, -2, 4, 3, 3, 2 ], [ 3, 3, 3, 0, -2, 2, 2, 2, 1 ], [ 22, 22, 22, 22, -2, 22, 22, 22, 22 ], [ 1, 2, 3, 4, -2, 2, 1, 2, 2 ], [ 1, 3, 3, 3, -2, 3, 1, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 20, 20, 20, 20, -2, 20, 20, 20, 20 ] ],
        step: 40,
        targetList: [ [ 4, 20 ], [ 5, 10 ], [ 20, 8 ], [ 21, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv157: {
        mapList: [ [ 1, 2, 2, 1, 0, 3, 1, 2, 1 ], [ 3, 1, 1, 1, 2, 4, 3, 3, 2 ], [ -2, -2, -2, -2, 1, 2, 2, 2, 1 ], [ 21, 21, 21, -2, 1, 1, 1, 3, 1 ], [ 22, 22, 21, -2, 22, 22, 22, 22, 22 ], [ 1, 3, 21, -2, -2, -2, -2, 1, 1 ], [ 2, 3, 21, 21, 21, 21, -2, 1, 3 ], [ 3, 2, 2, 2, 1, 21, -2, 3, 2 ], [ 2, 20, 1, 20, 20, 20, -2, 20, 1 ] ],
        step: 45,
        targetList: [ [ 5, 10 ], [ 6, 8 ], [ 20, 5 ], [ 21, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv158: {
        mapList: [ [ 3, 3, 3, 3, 7, 3, 3, 3, 3 ], [ 3, 23, 23, 23, 23, 23, 23, 23, 3 ], [ 1, 1, 27, 6, 6, 6, 27, 1, 1 ], [ 2, 24, 24, 24, 24, 24, 24, 24, 2 ], [ 2, 0, 27, 26, 26, 26, 27, 0, 2 ], [ 2, 0, 0, 26, 26, 26, 0, 0, 2 ], [ 2, 25, 25, 25, 25, 25, 25, 25, 2 ], [ 0, 0, 1, 1, 7, 1, 1, 0, 0 ], [ 0, 0, 1, 1, 7, 1, 1, 0, 0 ] ],
        step: 40,
        targetList: [ [ 25, 21 ], [ 26, 6 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv159: {
        mapList: [ [ 1, 2, 2, 1, -2, 3, 1, 2, 1 ], [ 3, 1, 1, 1, -2, 4, 3, 3, 2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 1, 2, 3, 4, -2, 2, 1, 2, 2 ], [ 1, 3, -2, -2, -2, -2, -2, 1, 1 ], [ 2, -2, -2, 1, 2, 2, -2, -2, 3 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, 2, 1, 1, 2, 2, 2, 2, -2 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 20, 5 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv160: {
        mapList: [ [ 1, 2, 2, 21, -2, 21, 1, 2, 1 ], [ 3, 1, 1, 21, -2, 21, 3, 3, 2 ], [ 3, 3, 3, 21, -2, 21, 2, 2, 1 ], [ 2, 2, 2, 21, -2, 21, 1, 3, 1 ], [ 1, 2, 3, 21, -2, -2, 21, 21, 2 ], [ -2, -2, -2, -2, -2, -2, -2, 21, 1 ], [ 20, 20, 20, 20, 2, 21, -2, -2, 21 ], [ 1, 4, 2, 2, 1, 1, 21, -2, -2 ], [ 2, 2, 1, 1, 2, 2, 2, 21, -2 ] ],
        step: 40,
        targetList: [ [ 1, 20 ], [ 2, 25 ], [ 21, 16 ], [ 20, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv161: {
        mapList: [ [ -2, 4, 4, 2, 2, 2, 4, 4, -2 ], [ -2, 4, 27, 2, 2, 2, 27, 4, -2 ], [ 3, 3, 25, 23, 23, 23, 25, 3, 3 ], [ 1, 1, 25, 4, 5, 4, 25, 1, 1 ], [ 1, 1, 25, 4, 5, 4, 25, 1, 1 ], [ 3, 3, 25, 23, 23, 23, 25, 3, 3 ], [ 0, 0, 27, 3, 3, 3, 27, 0, 0 ], [ 0, 0, 1, 3, 3, 3, 1, 0, 0 ], [ -2, -2, 1, 1, 1, 1, 1, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 14 ], [ 27, 4 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 8, 8 ], 2 ] ],
        stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
      },
      lv162: {
        mapList: [ [ 1, 2, 2, 1, 4, 3, 1, 2, 1 ], [ 3, 1, 1, 1, 1, 4, 3, 3, 2 ], [ 3, 3, 3, 0, 3, 2, 2, 2, 1 ], [ 2, 2, 2, 3, 3, 1, 1, 3, 1 ], [ 1, 2, 21, 21, 21, 21, 21, 1, 2 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 21, -2, -2, 21, 21, 21, -2, -2, 21 ], [ 21, -2, 21, 2, 1, 1, 21, -2, 21 ], [ 21, 21, 20, 20, 20, 20, 20, 21, 21 ] ],
        step: 40,
        targetList: [ [ 2, 30 ], [ 3, 20 ], [ 20, 5 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv163: {
        mapList: [ [ 3, 3, 4, 21, 21, 21, 1, 3, 1 ], [ 1, 3, 4, 21, 21, 21, 3, 1, 2 ], [ 2, 3, 3, 21, 21, 21, 2, 2, 1 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 3, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 3, 4, 20, 2, 2, 1, 1 ], [ 2, 2, 2, 20, -2, 20, 3, 1, 3 ], [ 1, 1, 20, -2, -2, -2, 20, 1, 2 ], [ 20, 20, -2, -2, -2, -2, -2, 20, 20 ] ],
        step: 50,
        targetList: [ [ 3, 30 ], [ 4, 15 ], [ 20, 9 ], [ 21, 15 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv164: {
        mapList: [ [ -2, -2, 0, 0, 0, 0, 0, -2, -2 ], [ -2, -2, 0, 22, 22, 22, 0, -2, -2 ], [ 2, 2, 1, 1, 1, 1, 1, 2, 2 ], [ 2, 2, 22, 22, 27, 22, 22, 2, 2 ], [ 23, 23, 0, 0, 3, 0, 0, 23, 23 ], [ 5, 5, 0, 0, 3, 0, 0, 5, 5 ], [ 5, 23, 23, 23, 27, 23, 23, 23, 5 ], [ 2, 2, 2, 1, 1, 1, 2, 2, 2 ], [ 2, 2, 2, -2, -2, -2, 2, 2, 2 ] ],
        step: 40,
        targetList: [ [ 25, 10 ], [ 27, 2 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 1 ], [ 3, 1 ] ], [ [ 2, 2 ], [ 5, 3 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
      },
      lv165: {
        mapList: [ [ 3, 3, 4, 2, 5, 2, 1, 3, 1 ], [ 1, 3, 4, 1, 5, 3, 3, 1, 2 ], [ 2, 3, 3, 21, 21, 21, 2, 2, 1 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 3, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 3, 4, 2, 2, 2, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 20, -2, -2, -2, 20, 1, 1 ], [ 20, 20, 20, -2, -2, -2, 20, 20, 20 ] ],
        step: 50,
        targetList: [ [ 3, 30 ], [ 4, 15 ], [ 20, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 2e4, 4e4, 6e4 ]
      },
      lv166: {
        mapList: [ [ 3, 3, -2, 2, 5, 2, -2, 3, 1 ], [ 1, 3, -2, 1, 5, 3, -2, 1, 2 ], [ -2, -2, -2, 21, 21, 21, -2, -2, -2 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ -2, -2, 2, 2, 1, 3, -2, -2, -2 ], [ 1, 2, 3, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 3, 4, 2, 2, 2, 1, 1 ], [ 1, 1, 3, -2, -2, -2, 2, 1, 1 ], [ 4, 3, 2, -2, -2, -2, 1, 2, 2 ] ],
        step: 50,
        targetList: [ [ 3, 20 ], [ 4, 15 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv167: {
        mapList: [ [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 2, 2, 27, 23, 23, 23, 27, 2, 2 ], [ 2, 2, 23, 3, 3, 3, 23, 2, 2 ], [ 3, 3, 27, 3, 26, 3, 27, 3, 3 ], [ 2, 2, 23, 3, 3, 3, 23, 2, 2 ], [ 2, 2, 27, 23, 23, 23, 27, 2, 2 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ] ],
        step: 35,
        targetList: [ [ 25, 10 ], [ 26, 1 ], [ 27, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv168: {
        mapList: [ [ 3, -2, -2, 2, 5, 2, -2, -2, 1 ], [ 1, -2, -2, 1, 5, 3, -2, -2, 2 ], [ 1, 2, 3, 4, 5, 4, 3, 2, 1 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 3, 4, 5, 4, 3, 2, 1 ], [ 1, 2, 3, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 3, 4, 2, 2, 2, 1, 1 ], [ 1, 1, 3, -2, -2, -2, 2, 1, 1 ], [ 4, 3, 2, -2, -2, -2, 1, 2, 2 ] ],
        step: 40,
        targetList: [ [ 3, 30 ], [ 4, 30 ], [ 5, 10 ], [ 21, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv169: {
        mapList: [ [ 3, -2, -2, 2, 5, 2, 1, 2, 1 ], [ 1, -2, -2, 1, 5, 3, 3, 4, 2 ], [ 1, -2, -2, -2, -2, -2, 3, 2, 1 ], [ 2, -2, -2, -2, -2, -2, 1, 3, 1 ], [ 1, 2, 3, 4, -2, -2, 3, 2, 1 ], [ 22, 22, 22, 22, -2, -2, 1, 2, 2 ], [ 1, 3, 3, 4, -2, -2, 21, 21, 21 ], [ 1, 1, 3, 4, -2, -2, 21, 21, 21 ], [ 4, 3, 2, 3, -2, -2, 21, 21, 21 ] ],
        step: 50,
        targetList: [ [ 4, 20 ], [ 5, 20 ], [ 6, 5 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv170: {
        mapList: [ [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 2, 2, 26, 22, 22, 22, 26, 2, 2 ], [ 2, 2, 22, 3, 3, 3, 22, 2, 2 ], [ 3, 3, 26, 3, 26, 3, 26, 3, 3 ], [ 2, 2, 22, 3, 3, 3, 22, 2, 2 ], [ 2, 2, 26, 22, 22, 22, 26, 2, 2 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ] ],
        step: 40,
        targetList: [ [ 26, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv171: {
        mapList: [ [ 3, -2, -2, 2, 5, 2, -2, -2, 1 ], [ 1, -2, -2, 1, 5, 3, -2, -2, 2 ], [ 1, -2, -2, -2, -2, -2, -2, 2, 1 ], [ 2, -2, -2, -2, -2, -2, -2, 3, 1 ], [ 1, 2, 3, 4, -2, -2, 3, 2, 1 ], [ 21, 21, 21, 21, -2, -2, 1, 2, 2 ], [ 1, 3, 3, 4, -2, -2, 21, 21, 21 ], [ 1, 1, 3, 4, -2, -2, 21, 21, 21 ], [ 4, 3, 2, 3, -2, -2, 21, 21, 21 ] ],
        step: 40,
        targetList: [ [ 3, 10 ], [ 4, 20 ], [ 5, 5 ], [ 21, 13 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv172: {
        mapList: [ [ 3, 2, 1, 2, 5, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 5, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 2, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 3, 2, 2, 3, 1 ], [ 1, 2, 3, 4, 3, 2, 3, 2, 1 ], [ 5, 4, 1, 4, 2, 1, 1, 2, 2 ], [ 1, 3, 3, 2, 3, 3, 2, 2, 2 ], [ 1, 1, 3, 4, 2, 2, 2, 2, 2 ], [ 4, 3, 2, 3, 1, 1, 2, 2, 2 ] ],
        step: 50,
        targetList: [ [ 5, 20 ], [ 6, 15 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv173: {
        mapList: [ [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ 2, 25, 26, 25, 25, 25, 26, 25, 2 ], [ 2, 25, 25, 3, 3, 3, 25, 25, 2 ], [ 3, 3, 26, 3, 26, 3, 26, 3, 3 ], [ 2, 25, 25, 3, 3, 3, 25, 25, 2 ], [ 2, 25, 26, 25, 25, 25, 26, 25, 2 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 26 ], [ 26, 7 ], [ 28, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 1, 4 ], [ 2, 4 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 4 ], [ 8, 5 ] ], [ [ 5, 7 ], [ 8, 8 ] ] ]
      },
      lv174: {
        mapList: [ [ -2, -2, -2, 2, 21, 3, -2, -2, -2 ], [ -2, -2, 1, 21, 5, 21, 2, -2, -2 ], [ -2, 2, 21, 3, 2, 2, 21, 2, -2 ], [ 2, 21, 1, 3, 3, 2, 2, 21, 1 ], [ 21, 21, 21, 4, 3, 2, 21, 21, 21 ], [ 5, 4, 21, 4, 2, 1, 21, 2, 2 ], [ 1, 3, 21, 2, 3, 3, 21, 2, 2 ], [ 1, 1, 21, 4, 2, 2, 21, 2, 2 ], [ 4, 3, 21, 21, 21, 21, 21, 2, 2 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 5, 20 ], [ 21, 24 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv175: {
        mapList: [ [ 3, 2, 1, 7, 5, 6, 2, 2, 1 ], [ 1, 1, 3, 1, -2, 3, 2, 3, 2 ], [ 1, 2, 1, -2, -2, -2, 1, 2, 1 ], [ 2, 2, -2, -2, 20, -2, -2, 3, 1 ], [ 1, -2, -2, 20, 20, 20, -2, -2, 1 ], [ 5, 4, -2, -2, 20, -2, -2, 2, 2 ], [ 1, 3, 3, -2, -2, -2, 2, 2, 2 ], [ 1, 1, 3, 4, -2, 2, 2, 2, 2 ], [ 4, 3, 2, 3, 1, 1, 2, 2, 2 ] ],
        step: 40,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 5, 20 ], [ 20, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv176: {
        mapList: [ [ 1, 1, 1, 1, 23, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 23, 2, 2, 2, 2 ], [ 5, 5, 23, 23, 23, 23, 23, 5, 5 ], [ 6, 6, 23, 3, 3, 3, 23, 6, 6 ], [ 23, 23, 23, 6, 6, 3, 23, 23, 23 ], [ 6, 6, 23, 6, 6, 3, 23, 6, 6 ], [ 5, 5, 23, 23, 23, 23, 23, 5, 5 ], [ 2, 2, 2, 2, 23, 2, 2, 2, 2 ], [ 1, 1, 1, 1, 23, 1, 1, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 24 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv177: {
        mapList: [ [ 3, 2, 1, 2, 21, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 21, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 21, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 21, 2, 2, 3, 1 ], [ 22, 22, 22, 22, 21, 22, 22, 22, 22 ], [ 5, 4, 1, 4, 21, 1, 1, 2, 2 ], [ 1, 3, 3, 2, 21, 3, 2, 2, 2 ], [ 1, 1, 3, 4, 21, 2, 2, 2, 2 ], [ 20, 20, 20, 20, 21, 20, 20, 20, 20 ] ],
        step: 45,
        targetList: [ [ 3, 20 ], [ 4, 20 ], [ 20, 8 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv178: {
        mapList: [ [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 1, 3, 21, 21, 21, 21, 21, 2, 1 ], [ 2, 2, 1, 21, 21, 21, 2, 3, 1 ], [ 1, 2, 3, 4, 21, 2, 3, 2, 1 ], [ 5, 4, 1, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 21, 21, 21, 21, 21, 2, 2 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ] ],
        step: 50,
        targetList: [ [ 3, 20 ], [ 4, 20 ], [ 21, 49 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv179: {
        mapList: [ [ 3, 2, 1, 2, 5, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 5, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 2, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 3, 2, 2, 3, 1 ], [ 1, 2, 3, 4, 20, 2, 3, 2, 1 ], [ 5, 4, 1, 20, 21, 20, 1, 2, 2 ], [ 1, 3, 20, 21, 21, 21, 20, 3, 2 ], [ 1, 1, 20, 21, 21, 21, 20, 2, 2 ], [ 4, 3, 2, 20, 20, 20, 2, 2, 2 ] ],
        step: 45,
        targetList: [ [ 1, 30 ], [ 3, 30 ], [ 20, 10 ], [ 21, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv180: {
        mapList: [ [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ], [ 0, 2, 2, 2, 25, 2, 2, 2, 0 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 3, 3, 25, 26, 26, 26, 25, 3, 3 ], [ 25, 25, 25, 26, 27, 26, 25, 25, 25 ], [ 3, 3, 25, 26, 26, 26, 25, 3, 3 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 1, 2, 2, 2, 25, 2, 2, 2, 1 ], [ 1, 1, 1, 1, 25, 1, 1, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 24 ], [ 26, 8 ], [ 27, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv181: {
        mapList: [ [ 3, 2, 1, 2, 5, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 5, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 2, 2, 1, 2, 1 ], [ 2, 2, 1, 21, 21, 21, 2, 3, 1 ], [ 1, 2, 3, 21, 20, 21, 3, 2, 1 ], [ 22, 22, 22, 21, 20, 21, 22, 22, 22 ], [ 1, 3, 3, 21, 20, 21, 2, 2, 2 ], [ 1, 1, 3, 21, 20, 21, 2, 2, 2 ], [ 4, 3, 2, 22, 22, 22, 2, 2, 2 ] ],
        step: 50,
        targetList: [ [ 4, 30 ], [ 6, 10 ], [ 20, 4 ], [ 21, 11 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv182: {
        mapList: [ [ 21, 2, 2, 2, 5, 2, 2, 2, 21 ], [ 21, 21, 2, 1, 5, 2, 2, 21, 21 ], [ 21, 21, 21, 2, 5, 2, 21, 21, 21 ], [ 21, 21, 21, 21, 2, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 2, 21, 21, 21, 21 ], [ 21, 21, 21, 3, 3, 3, 21, 21, 21 ], [ 21, 21, 3, 3, 4, 3, 3, 21, 21 ], [ 21, 2, 2, 2, 2, 4, 2, 2, 21 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 15 ], [ 21, 49 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv183: {
        mapList: [ [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ], [ 0, 2, 2, 2, 25, 2, 2, 2, 0 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 3, 3, 25, 27, 25, 27, 25, 3, 3 ], [ 25, 25, 25, 25, 27, 25, 25, 25, 25 ], [ 3, 3, 25, 27, 25, 27, 25, 3, 3 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 1, 2, 2, 2, 25, 2, 2, 2, 1 ], [ 1, 1, 1, 1, 25, 1, 1, 1, 1 ] ],
        step: 45,
        targetList: [ [ 25, 28 ], [ 27, 5 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 0, 8 ], 1 ], [ [ 1, 0 ], [ 7, 8 ], 2 ], [ [ 8, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 5 ], [ 8, 6 ] ] ]
      },
      lv184: {
        mapList: [ [ 3, 2, 1, 2, 21, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 21, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 21, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 21, 2, 2, 3, 1 ], [ 1, 2, 3, 4, 21, 2, 3, 2, 1 ], [ 5, 4, 20, 22, 21, 22, 20, 2, 2 ], [ 1, 3, 22, 20, 21, 20, 22, 3, 2 ], [ 1, 1, 20, 21, 21, 21, 20, 2, 2 ], [ 4, 3, 20, 20, 21, 20, 20, 2, 2 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 15 ], [ 20, 10 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv185: {
        mapList: [ [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 2, 1, 21, 5, 21, 2, 2, 2 ], [ 1, 2, 1, 21, 2, 21, 1, 2, 1 ], [ 2, 2, 1, 21, 3, 21, 2, 3, 1 ], [ 1, 2, 3, 21, 3, 21, 3, 2, 1 ], [ 20, 21, 21, 21, 21, 21, 21, 21, 20 ], [ 1, 20, 21, 21, 21, 21, 21, 20, 2 ], [ 1, 1, 20, 21, 21, 21, 20, 2, 2 ], [ 4, 3, 2, 20, 21, 20, 2, 2, 2 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 15 ], [ 20, 8 ], [ 21, 33 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv186: {
        mapList: [ [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ], [ 3, 27, 1, 1, 23, 1, 1, 27, 3 ], [ 3, 25, 1, 25, 25, 25, 1, 25, 3 ], [ 2, 25, 1, 25, 26, 25, 1, 25, 2 ], [ 2, 25, 23, 25, 26, 25, 23, 25, 2 ], [ 2, 25, 1, 25, 26, 25, 1, 25, 2 ], [ 2, 25, 1, 25, 25, 25, 1, 25, 2 ], [ 3, 27, 1, 1, 23, 1, 1, 27, 3 ], [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ] ],
        step: 45,
        targetList: [ [ 25, 26 ], [ 26, 3 ], [ 27, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv187: {
        mapList: [ [ 0, 0, 0, 0, 5, 2, 1, 3, 4 ], [ -2, -2, -2, 1, 5, 3, -2, -2, -2 ], [ 1, 0, -2, 3, 2, 2, -2, 3, 1 ], [ 2, 0, -2, 3, 3, 2, -2, 1, 1 ], [ 1, 0, -2, 4, 3, 2, -2, 3, 1 ], [ 5, 4, -2, 4, 2, 1, -2, 3, 2 ], [ 1, 3, -2, -2, -2, -2, -2, 2, 2 ], [ 1, 1, 3, 20, 20, 20, 2, 2, 2 ], [ 4, 3, 2, 20, 20, 20, 2, 2, 2 ] ],
        step: 50,
        targetList: [ [ 0, 20 ], [ 1, 20 ], [ 5, 10 ], [ 20, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv188: {
        mapList: [ [ 21, 21, 21, 21, 5, 5, 21, 21, 21 ], [ 21, 2, 1, 21, 5, 3, 21, 2, 21 ], [ 21, 2, 1, 21, 2, 2, 21, 2, 21 ], [ 21, 2, 1, 21, 3, 2, 21, 3, 21 ], [ 21, 2, 3, 21, 3, 2, 21, 2, 21 ], [ 21, 4, 1, 21, 2, 1, 21, 2, 21 ], [ 21, 3, 3, 21, 21, 21, 21, 2, 21 ], [ 21, 1, 3, 4, 2, 2, 2, 2, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 4, 20 ], [ 21, 43 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv189: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 2, 3, 2, 0, 0, -2 ], [ -2, 0, 27, 2, 3, 2, 27, 0, -2 ], [ -2, 3, 3, 23, 23, 23, 3, 3, -2 ], [ -2, 2, 2, 23, 23, 23, 2, 2, -2 ], [ -2, 2, 27, 2, 2, 2, 27, 2, -2 ], [ -2, 1, 1, 25, 25, 25, 1, 1, -2 ], [ -2, 1, 1, 25, 25, 25, 1, 1, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 12 ], [ 27, 4 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 1 ], [ [ 2, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 7, 8 ], 2 ], [ [ 8, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 1 ], [ 3, 1 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 4 ], [ 6, 7 ] ] ]
      },
      lv190: {
        mapList: [ [ -2, 2, 2, 2, 5, 2, 2, 2, -2 ], [ -2, -2, -2, 1, 5, 3, -2, -2, -2 ], [ -2, -2, -2, 3, 2, 2, -2, -2, -2 ], [ 2, 2, 1, 3, 3, 2, 2, 3, 1 ], [ 20, 2, 3, 4, 3, 2, 3, 2, 20 ], [ 5, 20, 2, 4, 2, 1, 3, 20, 2 ], [ -2, 3, 20, 2, 2, 3, 20, 2, -2 ], [ -2, -2, 3, 20, 2, 20, 2, -2, -2 ], [ -2, -2, -2, 3, 20, 1, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 5, 20 ], [ 20, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv191: {
        mapList: [ [ 21, 21, 21, 2, 5, 2, 21, 21, 21 ], [ 5, 2, 21, 3, 5, 3, 1, 2, 21 ], [ 3, 2, 21, 1, 2, 2, 4, 2, 21 ], [ 21, 21, 21, 3, 3, 2, 21, 21, 21 ], [ 21, 20, 21, 4, 3, 2, 21, 20, 21 ], [ 21, 20, 21, 2, 2, 1, 21, 20, 21 ], [ 21, 20, 21, 2, 3, 3, 21, 20, 21 ], [ 21, 20, 21, 4, 2, 2, 21, 20, 21 ], [ 21, 21, 21, 3, 1, 1, 21, 21, 21 ] ],
        step: 50,
        targetList: [ [ 2, 20 ], [ 3, 20 ], [ 20, 8 ], [ 21, 38 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv192: {
        mapList: [ [ 1, 1, 1, 2, 2, 2, 1, 1, 1 ], [ 2, 2, 3, 26, 26, 26, 3, 2, 2 ], [ 25, 25, 25, 25, 2, 25, 25, 25, 25 ], [ -2, -2, -2, 25, 2, 25, -2, -2, -2 ], [ 25, 25, -2, 25, 25, 25, -2, 25, 25 ], [ 1, 25, -2, -2, -2, -2, -2, 25, 1 ], [ 1, 25, 25, 25, 25, 25, 25, 25, 1 ], [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ], [ 2, 2, 2, 20, 20, 20, 2, 2, 2 ] ],
        step: 40,
        targetList: [ [ 20, 3 ], [ 25, 26 ], [ 26, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv193: {
        mapList: [ [ 3, 2, 1, 2, 5, 2, 2, 2, 1 ], [ 1, -2, -2, -2, 5, -2, -2, -2, 2 ], [ 1, -2, -2, 3, 2, 2, -2, -2, 1 ], [ 2, -2, 1, 3, 3, 2, 2, -2, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 1, -2, 1, 2, 3, 1, 3, -2, 1 ], [ 1, -2, -2, 2, 3, 2, -2, -2, 2 ], [ 1, -2, -2, -2, 2, -2, -2, -2, 2 ], [ 20, 20, 20, 20, 20, 20, 20, 20, 20 ] ],
        step: 50,
        targetList: [ [ 1, 20 ], [ 2, 20 ], [ 3, 20 ], [ 20, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv194: {
        mapList: [ [ 0, 0, 0, 0, 2, 0, 0, 0, 0 ], [ 4, 4, 4, 4, 2, 4, 4, 4, 4 ], [ 1, 1, 1, 5, 2, 5, 1, 1, 1 ], [ 21, 21, 4, 7, 1, 7, 4, 21, 21 ], [ 1, 21, 4, 5, 2, 5, 4, 21, 1 ], [ 0, 21, 4, 5, 5, 5, 4, 21, 0 ], [ 2, 21, 21, 21, 6, 21, 21, 21, 2 ], [ 20, 20, 20, 20, 7, 20, 20, 20, 20 ], [ 0, 0, 0, 2, 0, 2, 0, 0, 0 ] ],
        step: 50,
        targetList: [ [ 0, 20 ], [ 1, 20 ], [ 20, 8 ], [ 21, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv195: {
        mapList: [ [ 0, 0, 1, 1, 4, 1, 1, 0, 0 ], [ 0, 0, 1, 1, 4, 1, 1, 0, 0 ], [ 1, 1, 24, 21, 24, 21, 24, 1, 1 ], [ 1, 1, 21, 21, 21, 21, 21, 1, 1 ], [ 2, 2, 23, 21, 23, 21, 23, 2, 2 ], [ 2, 2, 21, 21, 21, 21, 21, 2, 2 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ -2, -2, 3, 3, 4, 3, 3, -2, -2 ] ],
        step: 40,
        targetList: [ [ 21, 14 ], [ 25, 6 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 2, 4 ], [ 5, 5 ] ], [ [ 3, 1 ], [ 7, 2 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
      },
      lv196: {
        mapList: [ [ 6, 2, 6, 5, 5, 5, 6, 2, 6 ], [ 4, 4, 4, 1, 4, 1, 3, 3, 3 ], [ 1, 2, 6, 3, 3, 3, 6, 2, 6 ], [ 1, 0, 2, 7, 4, 7, 2, 2, 2 ], [ 1, 1, 2, 1, 1, 1, 20, 20, 20 ], [ 0, 0, 0, 20, 20, 20, 21, 21, 21 ], [ 20, 20, 20, 21, 21, 21, 22, 22, 22 ], [ 21, 21, 21, 22, 22, 22, 2, 2, 2 ], [ 22, 22, 22, 1, 1, 1, 0, 0, 0 ] ],
        step: 45,
        targetList: [ [ 6, 12 ], [ 20, 9 ], [ 21, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 13e3, 26e3, 39e3 ]
      },
      lv197: {
        mapList: [ [ -2, 0, -2, -2, 1, -2, -2, 2, -2 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ -2, 0, 21, 21, 1, 21, 21, 2, -2 ], [ -2, 3, 21, 21, 0, 21, 21, 1, -2 ], [ 3, 3, 3, 22, 22, 22, 1, 1, 1 ], [ -2, 3, 21, 21, 0, 21, 21, 1, -2 ], [ -2, 2, 21, 21, 1, 21, 21, 0, -2 ], [ 2, 2, 2, 1, 1, 1, 0, 0, 0 ], [ -2, 2, 20, 20, 1, 20, 20, 0, -2 ] ],
        step: 35,
        targetList: [ [ 0, 20 ], [ 1, 20 ], [ 20, 4 ], [ 21, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv198: {
        mapList: [ [ -2, -2, 21, 0, 0, 0, 21, -2, -2 ], [ -2, -2, 21, 2, 2, 2, 21, -2, -2 ], [ -2, 21, 21, 1, 1, 1, 21, 21, -2 ], [ -2, 21, 2, 2, 3, 2, 2, 21, -2 ], [ -2, 21, 2, 2, 3, 2, 2, 21, -2 ], [ 21, 21, 22, 22, 22, 22, 22, 21, 21 ], [ 21, 1, 1, 2, 0, 2, 4, 4, 21 ], [ 21, 0, 0, 3, 3, 3, 0, 0, 21 ], [ 21, 20, 20, 20, 20, 20, 20, 20, 21 ] ],
        step: 35,
        targetList: [ [ 2, 25 ], [ 20, 7 ], [ 21, 22 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv199: {
        mapList: [ [ 3, 3, 0, 0, 2, 2, 2, 3, 3 ], [ 3, 3, 1, 1, 1, 3, 23, 3, 3 ], [ 0, 0, 22, 22, 22, 0, 23, 0, 0 ], [ 2, 2, 22, 26, 22, 2, 27, 2, 2 ], [ 2, 2, 22, 26, 22, 2, 27, 2, 2 ], [ 1, 1, 22, 22, 22, 1, 23, 1, 1 ], [ 0, 0, 1, 1, 1, 4, 23, 2, 2 ], [ 0, 0, 2, 2, 2, 4, 4, 2, 2 ], [ 2, 2, 3, 3, 3, 2, 2, 3, 3 ] ],
        step: 40,
        targetList: [ [ 25, 4 ], [ 26, 2 ], [ 27, 2 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 3 ], [ 5, 4 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
      },
      lv200: {
        mapList: [ [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 21, 2, 2, 21, -2, 21, 3, 3, 21 ], [ 21, 2, 2, 21, 21, 21, 3, 3, 21 ], [ 21, 4, 7, 20, 22, 20, 7, 4, 21 ], [ 21, 4, 5, 22, 22, 22, 5, 4, 21 ], [ 21, 4, 5, 20, 22, 20, 5, 4, 21 ], [ 21, 0, 0, 21, 21, 21, 1, 1, 21 ], [ 21, 0, 0, 21, -2, 21, 1, 1, 21 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ] ],
        step: 40,
        targetList: [ [ 4, 20 ], [ 5, 10 ], [ 20, 4 ], [ 21, 40 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv201: {
        mapList: [ [ -2, 0, 0, 0, -2, 0, 0, 0, -2 ], [ -2, 29, 29, 29, -2, 29, 29, 29, -2 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ -2, 30, 30, 30, -2, 30, 30, 30, -2 ], [ -2, 2, 2, 2, -2, 2, 2, 2, -2 ], [ -2, 31, 31, 31, -2, 31, 31, 31, -2 ], [ -2, 3, 3, 3, -2, 3, 3, 3, -2 ], [ -2, 32, 32, 32, -2, 32, 32, 32, -2 ], [ -2, 4, 4, 4, -2, 4, 4, 4, -2 ] ],
        step: 15,
        targetList: [ [ 29, 24 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e3, 2e3, 3e3 ]
      },
      lv202: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 3, 3, 3, 3, 4, -2 ], [ -2, 3, 30, 30, 30, 30, 30, 4, -2 ], [ -2, 4, 30, 29, 29, 29, 30, 4, -2 ], [ -2, 4, 30, 29, 26, 29, 30, 4, -2 ], [ -2, 4, 30, 29, 29, 29, 30, 4, -2 ], [ -2, 4, 30, 30, 30, 30, 30, 3, -2 ], [ -2, 4, 4, 3, 3, 3, 3, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 26, 1 ], [ 29, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv203: {
        mapList: [ [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ], [ 32, 32, 32, 32, 32, 32, 32, 32, 32 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 1, 27, 1, 0, 27, 0, 1, 27, 1 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 2, 26, 2, -2, 0, -2, 2, 26, 2 ], [ 2, 2, 2, -2, 0, -2, 2, 2, 2 ], [ 29, 1, 30, 2, 31, 3, 32, 4, 33 ], [ 0, 0, 1, 1, 2, 2, 3, 3, 4 ] ],
        step: 45,
        targetList: [ [ 26, 2 ], [ 27, 3 ], [ 29, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv204: {
        mapList: [ [ -2, 4, 4, 4, 3, 4, 4, 4, -2 ], [ -2, 1, 3, 3, 3, 3, 3, 1, -2 ], [ -2, 1, 29, 30, 31, 32, 33, 1, -2 ], [ -2, 1, 0, 0, 26, 0, 0, 1, -2 ], [ -2, 1, 0, 0, 26, 0, 0, 1, -2 ], [ -2, 3, 34, 35, 36, 35, 34, 3, -2 ], [ -2, 3, 4, 4, 0, 4, 4, 3, -2 ], [ -2, 3, 5, 5, 0, 5, 5, 3, -2 ], [ -2, 2, 2, 7, 0, 7, 2, 2, -2 ] ],
        step: 35,
        targetList: [ [ 26, 2 ], [ 29, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv205: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 4, 4, 4, 2, 2, 2 ], [ 2, 25, 25, 25, 25, 25, 25, 25, 2 ], [ 3, 25, 0, 0, 29, 0, 0, 25, 3 ], [ 3, 25, 29, 29, 27, 29, 29, 25, 3 ], [ 3, 25, 29, 29, 26, 29, 29, 25, 3 ], [ 3, 25, 0, 0, 29, 0, 0, 25, 3 ], [ 1, 25, 25, 25, 25, 25, 25, 25, 1 ], [ 1, 1, 1, 4, 4, 4, 1, 1, 1 ] ],
        step: 35,
        targetList: [ [ 25, 22 ], [ 26, 1 ], [ 27, 1 ], [ 29, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv206: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 4, 4, 4, 2, 2, 2 ], [ 2, 23, 23, 23, 23, 23, 23, 23, 2 ], [ 3, 23, 1, 1, 30, 1, 1, 23, 3 ], [ 3, 23, 30, 30, 26, 30, 30, 23, 3 ], [ 3, 23, 30, 30, 26, 30, 30, 23, 3 ], [ 3, 23, 1, 1, 30, 1, 1, 23, 3 ], [ 3, 23, 23, 23, 23, 23, 23, 23, 1 ], [ 3, 3, 4, 4, 4, 4, 1, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 22 ], [ 26, 2 ], [ 29, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv207: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 3, 3, 3, 2, -2 ], [ -2, 1, 29, 32, 32, 32, 32, 2, -2 ], [ -2, 1, 29, 21, 21, 21, 31, 0, -2 ], [ -2, 1, 29, 21, 27, 21, 31, 0, -2 ], [ -2, 1, 29, 21, 21, 21, 31, 0, -2 ], [ -2, 0, 30, 30, 30, 30, 31, 0, -2 ], [ -2, 0, 1, 1, 1, 1, 1, 1, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 21, 8 ], [ 27, 1 ], [ 29, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ]
      },
      lv208: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 2, 3, 3, 3, 1, 3, 2 ], [ 0, 27, 5, 25, 25, 25, 0, 27, 3 ], [ 3, 3, 3, 25, 26, 25, 4, 4, 4 ], [ 3, 1, 3, 25, 26, 25, 4, 2, 4 ], [ 0, 1, 2, 25, 26, 25, 1, 2, 3 ], [ 0, 27, 2, 25, 25, 25, 1, 27, 3 ], [ 36, 36, 36, 1, 1, 1, 35, 35, 35 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 25, 12 ], [ 26, 3 ], [ 27, 4 ], [ 29, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv209: {
        mapList: [ [ 0, 0, 5, 4, 3, 3, 3, 25, 0 ], [ 1, 1, 5, 4, 2, 2, 25, 36, 0 ], [ 1, 1, 5, 4, 2, 25, 35, 7, 0 ], [ 2, 2, 1, 1, 25, 34, 6, 20, -2 ], [ 2, 2, 1, 25, 33, 5, 20, -2, -2 ], [ 0, 0, 25, 32, 4, 20, -2, -2, -2 ], [ 0, 25, 31, 3, 20, -2, -2, -2, -2 ], [ 25, 30, 1, 2, -2, -2, -2, -2, -2 ], [ 29, 0, 0, 20, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 20, 5 ], [ 25, 8 ], [ 29, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv210: {
        mapList: [ [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 3, 3, 3, 21, 21, 21, 21, 21, 25 ], [ 2, 2, 2, 31, 31, 31, 4, 4, 25 ], [ 2, 2, 21, 21, 21, 21, 3, 4, 25 ], [ 1, 1, 30, 30, 30, 30, 3, 4, 25 ], [ 1, 21, 21, 21, 21, 2, 3, 4, 25 ], [ 0, 29, 29, 29, 29, 2, 3, 4, 25 ], [ 0, 21, 21, 21, 21, 2, 3, 2, 25 ], [ 0, 0, 1, 1, 1, 1, 3, 2, 25 ] ],
        step: 40,
        targetList: [ [ 21, 17 ], [ 25, 17 ], [ 29, 11 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv211: {
        mapList: [ [ 2, 2, 5, 2, 2, 2, 5, 1, 1 ], [ 2, 2, 5, 5, 2, 5, 5, 1, 1 ], [ 5, 5, 36, 36, 36, 36, 36, 5, 5 ], [ 2, 5, 36, 23, 23, 23, 36, 5, 2 ], [ 2, 2, 36, 23, 20, 23, 36, 2, 2 ], [ 2, 5, 36, 23, 23, 23, 36, 5, 2 ], [ 5, 5, 36, 36, 36, 36, 36, 5, 5 ], [ 0, 0, 5, 5, 2, 5, 5, 3, 3 ], [ 0, 0, 5, 2, 2, 2, 5, 3, 3 ] ],
        step: 40,
        targetList: [ [ 20, 1 ], [ 25, 8 ], [ 29, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv212: {
        mapList: [ [ 2, 2, 1, 1, 3, 3, 3, 2, 2 ], [ 2, 2, 1, 1, 3, 3, 3, 2, 2 ], [ 3, 3, 29, 29, 29, 29, 29, 1, 1 ], [ 3, 3, 29, 27, 26, 27, 29, 1, 1 ], [ 3, 3, 29, 27, 26, 27, 29, 3, 3 ], [ 1, 1, 29, 27, 26, 27, 29, 3, 3 ], [ 1, 1, 29, 29, 29, 29, 29, 3, 3 ], [ 2, 2, 3, 3, 3, 1, 1, 2, 2 ], [ 2, 2, 3, 3, 3, 1, 1, 2, 2 ] ],
        step: 40,
        targetList: [ [ 26, 3 ], [ 27, 6 ], [ 29, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv213: {
        mapList: [ [ 1, 1, -2, -2, -2, -2, -2, 0, 0 ], [ 0, 0, 0, 0, 4, 4, 1, 1, 1 ], [ 0, 6, 6, 0, 4, 2, 2, 36, 36 ], [ 32, 32, 5, 5, 3, 3, 35, 35, 7 ], [ 3, 31, 31, 4, 4, 34, 34, 6, 23 ], [ 23, 2, 30, 30, 33, 33, 5, 23, 0 ], [ 0, 23, 1, 29, 29, 4, 23, 0, 0 ], [ 0, 0, 23, 0, 0, 3, 3, 1, 1 ], [ 2, 2, 2, 1, 1, 1, 0, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 6 ], [ 29, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv214: {
        mapList: [ [ 4, 4, 3, 3, 3, 2, 2, 0, 0 ], [ 4, 31, 31, 31, 3, 2, 2, 0, 0 ], [ 0, 0, 1, 1, 1, 0, 0, 3, 3 ], [ 3, 3, 1, 1, 1, 30, 30, 30, 5 ], [ 6, 2, 2, 4, 2, 2, 6, 5, 5 ], [ 6, 2, 29, 29, 29, 2, 6, 6, 6 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 2, 2, 2, 1, 1, -2 ], [ -2, 0, 0, 2, 2, 2, 1, 1, -2 ] ],
        step: 40,
        targetList: [ [ 28, 3 ], [ 29, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 3 ], [ 5, 4 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
      },
      lv215: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 1, 4, 2, 2, -2 ], [ -2, 2, 37, 0, 1, 0, 37, 2, -2 ], [ -2, 3, 0, 0, 1, 0, 0, 4, -2 ], [ -2, 1, 1, 1, 37, 1, 1, 1, -2 ], [ -2, 3, 0, 0, 1, 2, 2, 4, -2 ], [ -2, 2, 37, 0, 1, 2, 37, 0, -2 ], [ -2, 2, 2, 3, 1, 4, 0, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 20,
        targetList: [ [ 1, 15 ], [ 2, 15 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv216: {
        mapList: [ [ -2, 3, 3, -2, -2, -2, 3, 3, -2 ], [ 2, 30, 30, 0, 37, 2, 29, 29, 0 ], [ 2, 30, 30, 0, 4, 2, 29, 29, 0 ], [ 0, 1, 1, 4, 4, 4, 1, 1, 2 ], [ 0, 2, 2, 0, 37, 0, 3, 3, 2 ], [ 37, 1, 1, 4, 4, 4, 0, 0, 37 ], [ 0, 29, 29, 0, 4, 1, 30, 30, 1 ], [ 0, 29, 29, 0, 37, 1, 30, 30, 1 ], [ -2, 3, 3, -2, -2, -2, 3, 3, -2 ] ],
        step: 35,
        targetList: [ [ 0, 20 ], [ 29, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ]
      },
      lv217: {
        mapList: [ [ -2, 2, 2, 2, 0, 2, 2, 2, -2 ], [ 1, 23, 23, 0, 0, 0, 23, 23, 0 ], [ 1, 23, 23, 1, 0, 1, 23, 23, 0 ], [ 1, 2, 1, 37, 3, 37, 2, 1, 0 ], [ 2, 2, 2, 3, 3, 3, 1, 1, 1 ], [ 1, 2, 1, 37, 3, 37, 2, 1, 0 ], [ 1, 23, 23, 1, 0, 1, 23, 23, 0 ], [ 1, 23, 23, 0, 0, 0, 23, 23, 0 ], [ -2, 2, 2, 2, 0, 2, 2, 2, -2 ] ],
        step: 40,
        targetList: [ [ 0, 15 ], [ 1, 20 ], [ 25, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv218: {
        mapList: [ [ 1, 1, 3, 3, -2, 3, 3, 1, 1 ], [ 0, 37, 2, 2, -2, 2, 2, 37, 0 ], [ 0, 4, 23, 23, 23, 23, 23, 4, 0 ], [ 4, 4, 23, 2, 2, 1, 23, 4, 4 ], [ -2, -2, 23, 0, 37, 1, 23, -2, -2 ], [ 4, 4, 23, 0, 3, 3, 23, 4, 4 ], [ 0, 4, 23, 23, 23, 23, 23, 4, 0 ], [ 0, 37, 2, 2, -2, 2, 2, 37, 0 ], [ 1, 1, 3, 3, -2, 3, 3, 1, 1 ] ],
        step: 40,
        targetList: [ [ 25, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv219: {
        mapList: [ [ 1, 1, 3, 3, 33, 3, 3, 1, 1 ], [ 0, 37, 2, 2, 33, 2, 2, 37, 0 ], [ 0, 4, 31, 31, 31, 31, 31, 4, 0 ], [ 4, 4, 29, 2, 2, 1, 30, 4, 4 ], [ 35, 35, 29, 0, 37, 1, 30, 34, 34 ], [ 4, 4, 29, 0, 3, 3, 30, 4, 4 ], [ 0, 4, 32, 32, 32, 32, 32, 4, 0 ], [ 0, 37, 2, 2, 36, 2, 2, 37, 0 ], [ 1, 1, 3, 3, 36, 3, 3, 1, 1 ] ],
        step: 40,
        targetList: [ [ 29, 24 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv220: {
        mapList: [ [ 3, 3, 3, 2, 2, 1, 1, 0, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 4, 21, 21, 21, -2, 21, 21, 21, 4 ], [ 3, -2, 1, 21, -2, 21, 1, -2, 3 ], [ 37, 0, 1, 21, -2, 21, 1, 0, 37 ], [ 1, 0, 37, 21, -2, 21, 37, 0, 1 ], [ 0, 21, 21, 21, 21, 21, 21, 21, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 0, 1, 1, 2, 2, 3, 3, 3 ] ],
        step: 35,
        targetList: [ [ 21, 19 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv221: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 3, 37, 1, 1, 1, -2 ], [ -2, 23, 0, 23, 0, 23, 0, 23, -2 ], [ -2, 1, 1, 1, 37, 2, 2, 2, -2 ], [ -2, 37, 26, 37, 26, 37, 26, 37, -2 ], [ -2, 0, 0, 0, 37, 3, 3, 3, -2 ], [ -2, 23, 1, 23, 0, 23, 0, 23, -2 ], [ -2, 4, 4, 4, 37, 5, 5, 5, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 8 ], [ 26, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv222: {
        mapList: [ [ 0, 0, 0, 0, 4, 1, 1, 1, 1 ], [ 0, 29, 29, 29, 4, 30, 30, 30, 1 ], [ 0, 29, 26, 29, 37, 30, 26, 30, 1 ], [ 0, 29, 29, 29, 2, 30, 30, 30, 1 ], [ 4, 4, 37, 2, 2, 2, 37, 4, 4 ], [ 2, 31, 31, 31, 2, 32, 32, 32, 3 ], [ 2, 31, 26, 31, 37, 32, 26, 32, 3 ], [ 2, 31, 31, 31, 4, 32, 32, 32, 3 ], [ 2, 2, 2, 2, 4, 3, 3, 3, 3 ] ],
        step: 40,
        targetList: [ [ 26, 4 ], [ 29, 32 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv223: {
        mapList: [ [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 27, 22, 22, 27, 22, 22, 27, 22 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 37, 1, 1, 37, 1, 1, 37, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 27, 22, 22, 27, 22, 22, 27, 22 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 0, 1, 1, 3, 1, 1, 0, 0 ], [ 3, 3, 3, -2, -2, -2, 3, 3, 3 ] ],
        step: 40,
        targetList: [ [ 27, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv224: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 1, 22, 22, 22, 1, 0, 0 ], [ 22, 26, 1, 37, 22, 37, 1, 26, 22 ], [ 22, 22, 4, 4, 22, 3, 3, 22, 22 ], [ 22, 37, 22, 26, 6, 26, 22, 37, 22 ], [ 22, 22, 4, 4, 6, 3, 3, 22, 22 ], [ 22, 26, 2, 37, 22, 37, 1, 26, 22 ], [ 1, 1, 2, 22, 22, 22, 1, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 26, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv225: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 37, 22, 22, 22, 22, 22, 37, -2 ], [ -2, 22, 2, 2, 2, 2, 3, 22, -2 ], [ -2, 22, 1, 23, 23, 23, 3, 22, -2 ], [ -2, 22, 1, 23, 27, 23, 3, 22, -2 ], [ -2, 22, 1, 23, 23, 23, 3, 22, -2 ], [ -2, 22, 1, 0, 0, 0, 0, 22, -2 ], [ -2, 37, 22, 22, 22, 22, 22, 37, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 50,
        targetList: [ [ 25, 8 ], [ 27, 1 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 4, 1 ], [ 7, 2 ] ], [ [ 4, 4 ], [ 7, 5 ] ] ]
      },
      lv226: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 29, 29, 0, 0, 3, 32, 32, -2 ], [ -2, 29, 0, 0, 37, 3, 3, 32, -2 ], [ -2, 0, 0, 23, 23, 23, 3, 3, -2 ], [ -2, 1, 37, 23, 27, 23, 37, 3, -2 ], [ -2, 1, 1, 23, 23, 23, 2, 2, -2 ], [ -2, 30, 1, 1, 37, 2, 2, 31, -2 ], [ -2, 30, 30, 1, 2, 2, 31, 31, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 8 ], [ 27, 1 ], [ 28, 3 ], [ 29, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 4, 8 ], 1 ], [ [ 5, 0 ], [ 7, 8 ], 2 ] ],
        stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 6, 1 ], [ 7, 4 ] ], [ [ 6, 2 ], [ 7, 5 ] ] ]
      },
      lv227: {
        mapList: [ [ 0, 0, 23, -2, -2, -2, 23, 0, 0 ], [ 0, 37, 1, 23, 23, 23, 1, 37, 0 ], [ 23, 1, 1, 4, 4, 4, 1, 1, 23 ], [ -2, 3, 23, 4, 4, 4, 23, 3, -2 ], [ -2, 3, 23, 23, 37, 23, 23, 3, -2 ], [ -2, 3, 23, 4, 4, 4, 23, 3, -2 ], [ 23, 1, 1, 4, 4, 4, 1, 1, 23 ], [ 0, 37, 1, 23, 23, 23, 1, 37, 0 ], [ 0, 0, 23, -2, -2, -2, 23, 0, 0 ] ],
        step: 40,
        targetList: [ [ 25, 22 ], [ 28, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 4, 8 ], 2 ], [ [ 5, 0 ], [ 7, 8 ], 1 ] ],
        stoneList: [ [ [ 3, 2 ], [ 6, 3 ] ], [ [ 6, 1 ], [ 6, 2 ] ], [ [ 6, 2 ], [ 7, 5 ] ], [ [ 7, 2 ], [ 7, 3 ] ] ]
      },
      lv228: {
        mapList: [ [ 1, 1, 1, -2, -2, -2, 2, 2, 2 ], [ 1, 22, 37, 22, 37, 22, 37, 22, 2 ], [ 1, 37, 22, 0, 22, 2, 22, 37, 2 ], [ -2, 22, 0, 29, 30, 31, 2, 22, -2 ], [ -2, 37, 22, 36, 27, 32, 22, 37, -2 ], [ -2, 22, 6, 35, 34, 33, 4, 22, -2 ], [ 0, 37, 22, 6, 22, 4, 22, 37, 3 ], [ 0, 22, 37, 22, 37, 22, 37, 22, 3 ], [ 0, 0, 0, -2, -2, -2, 3, 3, 3 ] ],
        step: 40,
        targetList: [ [ 27, 1 ], [ 28, 2 ], [ 29, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 3 ], [ 4, 4 ] ], [ [ 5, 2 ], [ 8, 3 ] ] ]
      },
      lv229: {
        mapList: [ [ 0, 0, 25, 25, 37, 25, 25, 0, 0 ], [ 25, 36, 36, 36, 25, 36, 36, 36, 25 ], [ -2, 23, 27, 2, 1, 2, 27, 23, -2 ], [ -2, 23, 2, 2, 1, 2, 2, 23, -2 ], [ -2, 23, 1, 1, 37, 1, 1, 23, -2 ], [ -2, 23, 2, 2, 1, 2, 2, 23, -2 ], [ -2, 23, 27, 2, 1, 2, 27, 23, -2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 0, 25, 25, 37, 25, 25, 0, 0 ] ],
        step: 45,
        targetList: [ [ 25, 30 ], [ 27, 4 ], [ 28, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 3 ], [ 4, 8 ] ], [ [ 5, 4 ], [ 6, 7 ] ], [ [ 7, 6 ], [ 7, 7 ] ] ]
      },
      lv230: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 1, 0, 0, 3, 0, 0, 1, 0 ], [ 1, 1, 4, 4, 3, 4, 4, 1, 1 ], [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 3, 3, 3, 2, 1, 2, 3, 3, 3 ], [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 1, 1, 4, 4, 3, 4, 4, 1, 1 ], [ 0, 1, 0, 0, 3, 0, 0, 1, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 25,
        targetList: [ [ 38, 36 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 3, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv231: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 1, 1, 1, 0, 0, -2 ], [ -2, 0, 21, 21, 21, 21, 21, 0, -2 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ -2, 0, 21, 21, 21, 21, 21, 0, -2 ], [ -2, 0, 0, 1, 1, 1, 0, 0, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 30,
        targetList: [ [ 21, 20 ], [ 38, 28 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 0 ], [ 5, 8 ], 1 ] ]
      },
      lv232: {
        mapList: [ [ -2, -2, 0, 22, 22, 22, 0, -2, -2 ], [ -2, 0, 0, 22, 22, 22, 0, 0, -2 ], [ 22, 22, 1, 1, 1, 1, 1, 22, 22 ], [ 22, 22, 3, 4, 26, 4, 3, 22, 22 ], [ 22, 22, 3, 26, 26, 26, 3, 22, 22 ], [ 22, 22, 3, 4, 26, 4, 3, 22, 22 ], [ 22, 22, 1, 1, 1, 1, 1, 22, 22 ], [ -2, 0, 0, 22, 22, 22, 0, 0, -2 ], [ -2, -2, 0, 22, 22, 22, 0, -2, -2 ] ],
        step: 40,
        targetList: [ [ 26, 5 ], [ 38, 25 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv233: {
        mapList: [ [ -2, -2, -2, -2, -2, 25, 25, 25, 25 ], [ -2, 25, 25, 25, 25, 25, 1, 1, 25 ], [ -2, 25, 4, 4, 2, 0, 0, 1, 25 ], [ -2, 25, 4, 27, 3, 27, 0, 25, 25 ], [ -2, 25, 2, 3, 3, 3, 2, 25, -2 ], [ 25, 25, 1, 27, 3, 27, 4, 25, -2 ], [ 25, 0, 1, 1, 2, 4, 4, 25, -2 ], [ 25, 0, 0, 25, 25, 25, 25, 25, -2 ], [ 25, 25, 25, 25, -2, -2, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 25, 32 ], [ 27, 4 ], [ 38, 25 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv234: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 25, 25, 4, 4, 4, 25, 25, -2 ], [ -2, 25, 25, 1, 1, 1, 25, 25, -2 ], [ -2, 4, 0, 26, 1, 26, 3, 4, -2 ], [ -2, 4, 0, 0, 26, 3, 3, 4, -2 ], [ -2, 4, 0, 26, 2, 26, 3, 4, -2 ], [ -2, 25, 25, 2, 2, 2, 25, 25, -2 ], [ -2, 25, 25, 4, 4, 4, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 16 ], [ 26, 5 ], [ 38, 25 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv235: {
        mapList: [ [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ], [ 0, 37, 1, 1, 37, 1, 1, 37, 0 ], [ 0, 22, 2, 2, 22, 2, 2, 22, 0 ], [ 22, 37, 3, 3, 37, 3, 3, 37, 22 ], [ 1, 1, 1, 26, 26, 26, 1, 1, 1 ], [ 22, 37, 3, 3, 37, 3, 3, 37, 22 ], [ 0, 22, 2, 2, 22, 2, 2, 22, 0 ], [ 0, 37, 1, 1, 37, 1, 1, 37, 0 ], [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ] ],
        step: 40,
        targetList: [ [ 26, 3 ], [ 38, 54 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 1, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv236: {
        mapList: [ [ 21, 3, 3, 21, 4, 4, 21, 5, 21 ], [ 21, 32, 32, 21, 33, 33, 21, 34, 21 ], [ 21, 32, 32, 21, 33, 33, 21, 34, 21 ], [ 21, 3, 3, 21, 4, 4, 21, 5, 21 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 21, 0, 0, 21, 1, 1, 21, 2, 21 ], [ 21, 29, 29, 21, 30, 30, 21, 31, 21 ], [ 21, 29, 29, 21, 30, 30, 21, 31, 21 ], [ 21, 0, 0, 21, 1, 1, 21, 2, 21 ] ],
        step: 45,
        targetList: [ [ 21, 32 ], [ 29, 20 ], [ 38, 36 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 3, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv237: {
        mapList: [ [ -2, 5, 5, 23, 23, 23, 5, 5, -2 ], [ 5, 5, 37, 23, 23, 23, 37, 5, 5 ], [ -2, 23, 23, 4, 4, 4, 23, 23, -2 ], [ 2, 23, 23, 7, 4, 7, 23, 23, 2 ], [ 2, 2, 37, 7, 37, 7, 37, 2, 2 ], [ 2, 23, 23, 4, 4, 4, 23, 23, 2 ], [ -2, 23, 23, 4, 4, 4, 23, 23, -2 ], [ 5, 5, 37, 23, 23, 23, 37, 5, 5 ], [ -2, 5, 5, 23, 23, 23, 5, 5, -2 ] ],
        step: 45,
        targetList: [ [ 25, 28 ], [ 38, 34 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        bubbleList: [ [ [ 3, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv238: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 5, 5, 5, 5, 1, 1, 4, 4, 4 ], [ 6, 36, 36, 1, 37, 1, 35, 35, 5 ], [ 6, 36, 36, 23, 23, 23, 35, 35, 5 ], [ 1, 1, 37, 23, 27, 23, 37, 1, 1 ], [ 6, 35, 35, 23, 23, 23, 36, 36, 6 ], [ 6, 35, 35, 1, 37, 1, 36, 36, 6 ], [ 4, 4, 4, 1, 1, 5, 5, 5, 5 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 27, 1 ], [ 29, 16 ], [ 38, 28 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        bubbleList: [ [ [ 0, 3 ], [ 8, 6 ], 1 ] ]
      },
      lv239: {
        mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ 22, 0, 0, 2, 2, 2, 0, 0, 22 ], [ 22, 4, 26, 3, 27, 3, 26, 4, 22 ], [ 22, 4, 1, 3, 3, 3, 1, 4, 22 ], [ 22, 1, 26, 1, 27, 1, 26, 1, 22 ], [ 22, 4, 1, 3, 3, 3, 1, 4, 22 ], [ 22, 4, 26, 3, 27, 3, 26, 4, 22 ], [ 22, 0, 0, 2, 2, 2, 0, 0, 22 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ] ],
        step: 40,
        targetList: [ [ 26, 6 ], [ 27, 3 ], [ 38, 25 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv240: {
        mapList: [ [ -2, 1, 1, -2, 1, 1, 1, 1, -2 ], [ 3, 21, 21, -2, 21, 21, 21, 21, 3 ], [ 3, 21, 23, -2, 23, 23, 23, 21, 3 ], [ 3, 21, 1, -2, 1, 1, 2, 21, 3 ], [ 1, 21, 21, -2, 21, 21, 2, 21, 1 ], [ 4, 21, 21, -2, 21, 21, 2, 21, 4 ], [ 4, 21, 21, -2, 21, 21, 21, 21, 4 ], [ 4, 5, 5, -2, 1, 5, 5, 5, 4 ], [ -2, 1, 1, -2, 1, 1, 1, 1, -2 ] ],
        step: 45,
        targetList: [ [ 21, 26 ], [ 25, 4 ], [ 38, 30 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 1, 1 ], [ 6, 6 ], 1 ] ]
      },
      lv241: {
        mapList: [ [ 21, 21, 21, 21, 22, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 22, 21, 21, 21, 21 ], [ 1, 1, 1, 1, 22, 0, 0, 0, 0 ], [ 25, 25, 25, 25, 22, 25, 25, 25, 25 ], [ 22, 22, 26, 22, 22, 22, 26, 22, 22 ], [ 25, 25, 25, 25, 22, 25, 25, 25, 25 ], [ 1, 1, 1, 1, 22, 0, 0, 0, 0 ], [ 30, 30, 31, 31, 22, 29, 29, 30, 30 ], [ 0, 0, 0, 2, 22, 2, 0, 0, 1 ] ],
        step: 45,
        targetList: [ [ 21, 16 ], [ 25, 12 ], [ 26, 2 ], [ 38, 27 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
      },
      lv242: {
        mapList: [ [ -2, -2, -2, -2, 3, 3, 2, 1, 1 ], [ 3, 3, 2, -2, 3, 3, 2, 1, 1 ], [ 3, 3, 2, -2, 23, 23, 23, 23, 23 ], [ 3, 37, 2, -2, 37, 37, 1, 3, 3 ], [ 23, 37, 23, -2, 2, 2, 1, 3, 3 ], [ 3, 3, 2, -2, 2, 2, 1, 1, 1 ], [ 3, 3, 2, -2, -2, -2, -2, -2, -2 ], [ 22, 22, 22, 37, 22, 22, 22, 22, 22 ], [ 3, 3, 0, 0, 1, 1, 0, 0, 0 ] ],
        step: 45,
        targetList: [ [ 25, 7 ], [ 38, 24 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
      },
      lv243: {
        mapList: [ [ 3, 3, 3, 3, 1, 1, 2, 2, 2 ], [ 2, 2, 2, 2, 37, 37, -2, -2, -2 ], [ -2, -2, -2, -2, 1, 1, -2, 0, 0 ], [ 1, 1, 1, -2, 23, 23, -2, 0, 0 ], [ 23, 37, 23, -2, 3, 3, -2, 37, 37 ], [ 23, 37, 23, -2, 3, 3, -2, 2, 2 ], [ 4, 4, 4, -2, -2, -2, -2, 23, 23 ], [ 1, 1, 1, 3, 0, 0, 0, 4, 4 ], [ 0, 0, 0, 3, 2, 2, 2, 3, 3 ] ],
        step: 40,
        targetList: [ [ 25, 8 ], [ 38, 21 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
      },
      lv244: {
        mapList: [ [ 25, 25, 2, 2, 2, 25, 25, -2, -2 ], [ 0, 0, 1, 2, 1, 0, 0, -2, -2 ], [ 0, 26, 1, 26, 1, 26, 0, 25, -2 ], [ 25, 1, 1, 25, 25, 3, 3, 25, 25 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 1, 1, 25, 25, 3, 3, 25, 25 ], [ 0, 26, 1, 26, 1, 26, 0, 25, -2 ], [ 0, 0, 1, 2, 1, 0, 0, -2, -2 ], [ 25, 25, 2, 2, 2, 25, 25, -2, -2 ] ],
        step: 45,
        targetList: [ [ 25, 20 ], [ 26, 6 ], [ 38, 34 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 2, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv245: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 0, 2, 0, 3, 0, -2 ], [ -2, 0, 0, 0, 2, 0, 3, 2, -2 ], [ -2, 0, 0, 0, 39, 1, 1, 0, -2 ], [ -2, 1, 1, 1, 39, 1, 1, 1, -2 ], [ -2, 2, 2, 2, 39, 3, 3, 3, -2 ], [ -2, 3, 3, 3, 2, 1, 2, 1, -2 ], [ -2, 2, 2, 1, 2, 1, 2, 2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 39, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv246: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, 22, 22, 0 ], [ -2, 22, 1, 1, 22, 2, 2, 22, 0 ], [ -2, 22, 1, 1, 3, 2, 2, 22, -2 ], [ -2, 22, 3, 3, 39, 3, 3, 22, -2 ], [ -2, 22, 3, 39, 39, 39, 3, 22, -2 ], [ -2, 22, 3, 3, 39, 3, 3, 22, -2 ], [ -2, 22, 2, 2, 3, 1, 1, 22, -2 ], [ 0, 22, 2, 2, 22, 1, 1, 22, -2 ], [ 0, 22, 22, 22, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 3, 20 ], [ 39, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv247: {
        mapList: [ [ 0, 0, 2, 2, 5, 2, 2, 3, 3 ], [ 0, 0, 2, 2, 5, 2, 2, 3, 3 ], [ 2, -2, -2, -2, -2, -2, -2, -2, 2 ], [ 2, 2, 39, 2, 39, 2, 39, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ 3, 3, 2, 2, 4, 2, 2, 0, 0 ], [ 3, 3, 2, 2, 4, 2, 2, 0, 0 ] ],
        step: 40,
        targetList: [ [ 25, 9 ], [ 39, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv248: {
        mapList: [ [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, -2, 25, 0, 0, 0, 25, -2, -2 ], [ -2, 25, 25, 0, 0, 0, 25, 25, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, 25, 25, 1, 1, 1, 25, 25, -2 ], [ -2, -2, 25, 1, 1, 1, 25, -2, -2 ], [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 32 ], [ 39, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv249: {
        mapList: [ [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 0, 0, 0, 0, 0, 0, 0, -2 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 1, 1, 3, 3, 3, 3, 3, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 3, 3, 3, 3, 3, 2, 2 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ -2, 0, 0, 0, 0, 0, 0, 0, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ] ],
        step: 40,
        targetList: [ [ 25, 25 ], [ 39, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv250: {
        mapList: [ [ 4, 4, 4, 0, 0, 0, 4, 4, 4 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 2, 37, 2, 37, 2, 37, 2, 37, 2 ], [ 2, 4, 2, 4, 2, 4, 2, 4, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 39, 23, 39, 23, 39, 0, -2 ], [ -2, 0, 0, 1, 1, 1, 0, 0, -2 ], [ -2, 0, 39, 23, 39, 23, 39, 0, -2 ], [ -2, 3, 2, 1, 4, 1, 2, 3, -2 ] ],
        step: 40,
        targetList: [ [ 25, 4 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv251: {
        mapList: [ [ -2, -2, 3, 3, -2, 4, 4, -2, -2 ], [ -2, 3, 3, -2, -2, -2, 4, 4, -2 ], [ 21, 3, 21, 39, -2, 39, 21, 4, 21 ], [ 5, 5, 5, -2, -2, -2, 5, 5, 5 ], [ 21, 4, 21, 39, -2, 39, 21, 4, 21 ], [ 21, 4, 21, -2, -2, -2, 21, 4, 21 ], [ 21, 0, 21, 39, -2, 39, 21, 1, 21 ], [ -2, 0, 0, -2, -2, -2, 1, 1, -2 ], [ -2, -2, 0, 0, -2, 1, 1, -2, -2 ] ],
        step: 40,
        targetList: [ [ 21, 16 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 5e3, 1e4, 15e3 ]
      },
      lv252: {
        mapList: [ [ -2, -2, 39, -2, -2, -2, 39, -2, -2 ], [ -2, -2, 39, -2, -2, -2, 39, -2, -2 ], [ 39, 39, 4, 4, 2, 3, 3, 39, 39 ], [ -2, -2, 4, 4, 2, 3, 3, -2, -2 ], [ -2, -2, 2, 26, 26, 26, 2, -2, -2 ], [ -2, -2, 3, 3, 2, 4, 4, -2, -2 ], [ 39, 39, 3, 3, 2, 4, 4, 39, 39 ], [ -2, -2, 39, -2, -2, -2, 39, -2, -2 ], [ -2, -2, 39, -2, -2, -2, 39, -2, -2 ] ],
        step: 40,
        targetList: [ [ 26, 3 ], [ 39, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv253: {
        mapList: [ [ 2, 37, 2, 37, 3, -2, 3, 37, 2 ], [ 2, 22, 2, 22, 3, -2, 3, 2, 2 ], [ 37, 39, 37, 39, 37, -2, 23, 39, 39 ], [ 1, 1, 3, 1, 1, -2, 2, 2, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 3, 2, 2, -2, 2, 2, 2 ], [ 22, 22, 22, 22, 22, -2, 22, 22, 22 ], [ 23, 39, 2, 39, 3, -2, 3, 39, 39 ], [ 1, 1, 2, 3, 3, -2, 3, 3, 3 ] ],
        step: 45,
        targetList: [ [ 25, 2 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv254: {
        mapList: [ [ -2, 4, 4, -2, -2, -2, 3, 3, -2 ], [ 4, 33, 33, 4, 5, 3, 32, 32, 3 ], [ 4, 33, 33, 4, 5, 3, 32, 32, 3 ], [ -2, 39, 39, 2, 2, 2, 39, 39, -2 ], [ -2, 39, 39, 27, 3, 27, 39, 39, -2 ], [ -2, 39, 39, 4, 4, 4, 39, 39, -2 ], [ 0, 29, 29, 0, 5, 1, 30, 30, 1 ], [ 0, 29, 29, 0, 5, 1, 30, 30, 1 ], [ -2, 0, 0, -2, -2, -2, 1, 1, -2 ] ],
        step: 45,
        targetList: [ [ 27, 2 ], [ 29, 16 ], [ 39, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv255: {
        mapList: [ [ 1, 1, 25, 25, 25, 25, 25, 1, 1 ], [ 1, 1, 25, 3, 3, 3, 25, 1, 1 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, -2, 39, -2, -2, -2, 39, -2, 0 ], [ 0, -2, 39, 39, 39, 39, 39, -2, 0 ], [ 0, -2, -2, 39, 39, 39, -2, -2, 0 ], [ 1, 1, 25, 4, 4, 4, 25, 1, 1 ], [ 1, 1, 25, 4, 4, 4, 25, 1, 1 ], [ -2, -2, 25, 25, 25, 25, 25, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 25 ], [ 39, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv256: {
        mapList: [ [ -2, -2, 2, 2, 2, 2, 2, -2, -2 ], [ -2, -2, 1, 1, 1, 1, 1, -2, -2 ], [ -2, 39, 1, 39, 1, 39, 1, 39, -2 ], [ -2, 1, 30, 30, 30, 30, 30, 1, -2 ], [ -2, 39, -2, -2, -2, -2, -2, 39, -2 ], [ -2, 1, 29, 29, 29, 29, 29, 1, -2 ], [ -2, 39, 0, 39, 0, 39, 0, 39, -2 ], [ -2, -2, 0, 0, 0, 0, 0, -2, -2 ], [ -2, -2, 1, 1, 1, 1, 1, -2, -2 ] ],
        step: 40,
        targetList: [ [ 29, 10 ], [ 39, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 5e3, 1e4, 15e3 ]
      },
      lv257: {
        mapList: [ [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, 25, 25, 3, 3, 3, 25, 25, -2 ], [ 39, 1, 1, 25, 25, 26, 1, 1, 39 ], [ -2, 25, 1, 26, 25, 25, 1, 25, -2 ], [ -2, -2, 25, 3, 3, 3, 25, -2, -2 ], [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ 39, 25, 2, 2, 25, 2, 2, 25, 39 ] ],
        step: 40,
        targetList: [ [ 25, 28 ], [ 26, 1 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv258: {
        mapList: [ [ 4, 4, 2, 2, 2, 2, -2, -2, -2 ], [ -2, -2, 3, 3, 2, 1, 1, -2, -2 ], [ 2, -2, 3, 37, 4, 37, 1, 2, -2 ], [ 2, -2, 2, 4, 4, 2, 3, 3, 2 ], [ 1, -2, -2, 39, 39, 39, 3, 37, 4 ], [ 1, 2, -2, -2, -2, -2, 2, 4, 4 ], [ 37, 2, 39, 39, 39, -2, -2, -2, -2 ], [ 23, 23, 23, 23, 23, 23, 23, 23, -2 ], [ 0, 0, 37, 0, 0, 37, 2, 2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 8 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv259: {
        mapList: [ [ -2, -2, -2, -2, 39, -2, -2, -2, -2 ], [ -2, -2, -2, 39, 0, 39, -2, -2, -2 ], [ -2, -2, 39, 0, 0, 0, 39, -2, -2 ], [ -2, 39, 0, 4, 4, 4, 0, 39, -2 ], [ 39, 0, 0, 4, 4, 4, 0, 0, 39 ], [ -2, 39, 0, 3, 3, 3, 0, 39, -2 ], [ -2, -2, 39, 3, 3, 3, 39, -2, -2 ], [ -2, -2, -2, 39, 4, 39, -2, -2, -2 ], [ -2, -2, -2, -2, 39, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 39, 16 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv260: {
        mapList: [ [ 39, 30, 30, 30, 1, 1, 30, 30, 39 ], [ -2, 39, 30, 1, 30, 1, 30, 39, -2 ], [ -2, -2, 39, 1, 1, 30, 39, -2, -2 ], [ -2, -2, -2, 39, 30, 39, -2, -2, -2 ], [ -2, -2, -2, -2, 20, -2, -2, -2, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ], [ -2, -2, 0, 0, 0, 0, 0, -2, -2 ], [ -2, 29, 0, 4, 4, 4, 0, 29, -2 ], [ 3, 29, 0, 4, 4, 4, 0, 29, 3 ] ],
        step: 40,
        targetList: [ [ 20, 4 ], [ 29, 14 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv261: {
        mapList: [ [ -2, -2, -2, -2, 3, -2, -2, -2, -2 ], [ -2, 39, -2, 39, 3, 39, -2, 39, -2 ], [ 2, 2, 2, 3, 37, 3, 2, 2, 2 ], [ -2, 3, 3, 3, 4, 3, 3, 3, -2 ], [ -2, -2, 1, 1, 4, 1, 1, -2, -2 ], [ -2, 1, 1, 37, 4, 37, 1, 1, -2 ], [ 0, 0, 0, 5, 5, 5, 0, 0, 0 ], [ -2, 39, -2, 39, 3, 39, -2, 39, -2 ], [ -2, -2, -2, -2, 3, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 28, 3 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 2, 8 ], 2 ], [ [ 3, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 8, 8 ], 2 ] ],
        stoneList: [ [ [ 2, 3 ], [ 5, 4 ] ], [ [ 5, 3 ], [ 6, 6 ] ], [ [ 6, 1 ], [ 6, 2 ] ] ]
      },
      lv262: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 4, -2, 4, -2, 4, -2, -2 ], [ -2, 22, 4, 22, 4, 22, 4, 22, -2 ], [ 4, 4, 39, 2, 39, 2, 39, 4, 4 ], [ -2, 22, 37, 2, 37, 2, 37, 22, -2 ], [ 4, 4, 39, 2, 39, 2, 39, 4, 4 ], [ -2, 22, 4, 22, 4, 22, 4, 22, -2 ], [ -2, -2, 4, -2, 4, -2, 4, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 28, 2 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 1, 3 ], [ 4, 4 ] ], [ [ 5, 3 ], [ 6, 6 ] ] ]
      },
      lv263: {
        mapList: [ [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ 0, 1, 1, 2, 2, 2, 1, 1, 0 ], [ 0, 26, 0, 2, 39, 2, 0, 26, 0 ], [ 0, 0, 0, 2, 39, 2, 0, 0, 0 ], [ -2, 4, 39, 39, 39, 39, 39, 4, -2 ], [ 0, 0, 0, 2, 39, 2, 0, 0, 0 ], [ 0, 26, 0, 2, 39, 2, 0, 26, 0 ], [ 0, 1, 1, 2, 2, 2, 1, 1, 0 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ] ],
        step: 45,
        targetList: [ [ 26, 4 ], [ 28, 3 ], [ 39, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 3 ], [ 3, 6 ] ], [ [ 5, 3 ], [ 6, 6 ] ], [ [ 1, 3 ], [ 4, 4 ] ] ]
      },
      lv264: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ], [ -2, 3, 3, 3, 4, 4, 4, 2, -2 ], [ -2, 1, 3, 0, 0, 4, 2, 2, -2 ], [ 0, 1, 1, 0, 0, 1, 1, 1, 0 ], [ 0, 0, -2, 3, 3, 3, -2, 0, 0 ], [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 38, 21 ], [ 39, 21 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        bubbleList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ] ]
      },
      lv265: {
        mapList: [ [ -2, -2, -2, 2, 2, 2, -2, -2, -2 ], [ -2, 23, 39, 0, 0, 1, 39, 23, -2 ], [ -2, 1, -2, 0, 1, 1, -2, 1, -2 ], [ 1, 1, -2, 2, 2, 3, -2, 1, 1 ], [ 1, 3, -2, 2, 2, 3, -2, 3, 1 ], [ 1, 1, -2, 3, 2, 2, -2, 1, 1 ], [ -2, 3, -2, 1, 3, 2, -2, 3, -2 ], [ -2, 23, 39, 1, 1, 3, 39, 23, -2 ], [ -2, -2, -2, 0, 0, 0, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 38, 14 ], [ 39, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        bubbleList: [ [ [ 1, 0 ], [ 1, 8 ], 1 ], [ [ 7, 0 ], [ 7, 8 ], 1 ] ]
      },
      lv266: {
        mapList: [ [ -2, 2, 2, 0, 0, 0, 2, 2, -2 ], [ -2, 2, 4, 4, 0, 4, 4, 2, -2 ], [ 4, 0, 0, 0, 1, 0, 0, 0, 4 ], [ 4, 3, 3, 1, 3, 1, 3, 3, 4 ], [ 0, 0, 1, 1, 1, 1, 1, 0, 0 ], [ 0, 3, 3, 1, 3, 1, 3, 3, 0 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ -2, 20, -2, 20, -2, 20, -2, 20, -2 ] ],
        step: 45,
        targetList: [ [ 20, 4 ], [ 38, 40 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        bubbleList: [ [ [ 2, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv267: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 23, 23, 23, -2, -2, 23, 23 ], [ -2, 3, 23, 2, 2, 23, 2, 2, 23 ], [ -2, 3, 27, 2, 2, 27, 2, 2, 3 ], [ 23, 37, 23, 37, 23, 37, 23, 37, 3 ], [ 0, 0, 2, 2, 4, 2, 2, 0, -2 ], [ 25, 25, 27, 2, 4, 27, 2, 2, -2 ], [ -2, -2, 25, 39, 25, 39, 25, 39, -2 ], [ -2, -2, 39, 25, 39, 25, 39, -2, -2 ] ],
        step: 45,
        targetList: [ [ 25, 19 ], [ 27, 4 ], [ 39, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv268: {
        mapList: [ [ -2, -2, 5, -2, -2, -2, 5, -2, -2 ], [ 5, 5, 5, -2, -2, -2, 5, 5, 5 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 3, 3, 23, 39, 39, 39, 23, 3, 3 ], [ 3, 3, 23, 26, 26, 26, 23, 3, 3 ], [ 3, 3, 23, 39, 39, 39, 23, 3, 3 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 5, 5, 5, -2, -2, -2, 5, 5, 5 ], [ -2, -2, 5, -2, -2, -2, 5, -2, -2 ] ],
        step: 50,
        targetList: [ [ 25, 16 ], [ 26, 3 ], [ 38, 25 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv269: {
        mapList: [ [ 2, 3, 3, 2, 2, 3, 3, 2, -2 ], [ 2, -2, -2, -2, -2, 3, 3, 2, -2 ], [ 2, 30, 30, 30, 30, 4, 4, 2, -2 ], [ 3, 31, 31, 31, 31, 33, 33, 33, 4 ], [ 0, 2, 2, 3, 3, 2, 2, 2, 4 ], [ 0, -2, -2, -2, -2, -2, -2, 30, 0 ], [ 0, 30, 1, 1, 30, 1, 1, 30, 0 ], [ -2, 39, 22, 22, 39, 22, 22, 39, 22 ], [ -2, 3, 3, 2, 2, 3, 3, 2, 2 ] ],
        step: 45,
        targetList: [ [ 29, 15 ], [ 38, 20 ], [ 39, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv270: {
        mapList: [ [ -2, 1, 1, 1, 1, 1, 1, 1, -2 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ 22, 22, 37, 22, 37, 22, 37, 22, 22 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ 22, 22, 37, 22, 37, 22, 37, 22, 22 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ -2, 1, 1, 1, 1, 1, 1, 1, -2 ] ],
        step: 45,
        targetList: [ [ 21, 14 ], [ 38, 36 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ],
        bubbleList: [ [ [ 1, 0 ], [ 2, 8 ], 1 ], [ [ 6, 0 ], [ 7, 8 ], 1 ] ]
      },
      lv271: {
        mapList: [ [ 2, 2, 3, 21, 37, 21, -2, 3, 3 ], [ 2, 2, 3, 21, 37, 21, -2, 3, 3 ], [ -2, -2, -2, 5, 3, 6, -2, 4, 4 ], [ 21, 21, 21, 5, 26, 6, 21, 21, 21 ], [ 21, 37, 37, 5, 3, 6, 37, 37, 21 ], [ 21, 21, 21, 21, 37, 21, 21, 21, 21 ], [ 4, 4, -2, 21, 37, 21, -2, -2, -2 ], [ 3, 3, -2, 1, 1, 4, 1, 4, 4 ], [ 3, 3, -2, 1, 1, 4, 1, 4, 4 ] ],
        step: 45,
        targetList: [ [ 21, 22 ], [ 26, 1 ], [ 38, 27 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
      },
      lv272: {
        mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 2, 2, 22, 2, 2, 22, -2 ], [ -2, 22, 37, 22, 4, 22, 37, 22, -2 ], [ -2, 22, -2, -2, 4, -2, -2, 22, -2 ], [ -2, 22, 3, 3, 27, 3, 3, 22, -2 ], [ -2, 22, 37, 22, 4, 22, 37, 22, -2 ], [ -2, 22, -2, -2, 4, -2, -2, 22, -2 ], [ -2, 22, 1, 1, 22, 1, 1, 22, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ] ],
        step: 45,
        targetList: [ [ 27, 1 ], [ 38, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 4, 0 ], [ 5, 8 ], 1 ] ]
      },
      lv273: {
        mapList: [ [ 6, 25, 25, 25, 25, 25, 25, 0, -2 ], [ 6, -2, -2, -2, -2, -2, -2, 0, -2 ], [ 5, 5, 25, 25, 25, 25, 25, 1, -2 ], [ 3, 3, -2, -2, -2, -2, -2, 1, -2 ], [ 3, 3, 3, 25, 25, 25, 25, 2, -2 ], [ 1, 1, 1, -2, -2, -2, -2, 2, -2 ], [ 1, 1, 1, 1, 25, 25, 25, 3, -2 ], [ 0, 0, 0, 0, -2, -2, -2, 3, -2 ], [ 0, 0, 0, 0, 0, 4, 4, 4, -2 ] ],
        step: 40,
        targetList: [ [ 25, 18 ], [ 38, 31 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 0 ], [ 6, 8 ], 1 ] ]
      },
      lv274: {
        mapList: [ [ -2, -2, 1, 1, -2, 1, 1, -2, -2 ], [ 3, 2, 0, 0, 1, 0, 0, 2, 3 ], [ 3, 37, 26, 2, 26, 2, 26, 37, 3 ], [ -2, 1, -2, -2, -2, -2, -2, 1, -2 ], [ -2, 1, 39, 1, 39, 1, 39, 1, -2 ], [ -2, 37, -2, -2, -2, -2, -2, 37, -2 ], [ 4, 3, 26, 1, 26, 1, 26, 3, 4 ], [ 4, 3, 0, 0, 1, 0, 0, 3, 4 ], [ -2, -2, 1, 1, -2, 1, 1, -2, -2 ] ],
        step: 50,
        targetList: [ [ 26, 6 ], [ 38, 15 ], [ 39, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv275: {
        mapList: [ [ -2, -2, 25, 2, 25, 2, 25, -2, -2 ], [ -2, 25, 25, 2, 25, 2, 25, 25, -2 ], [ 2, 2, -2, -2, 1, -2, -2, 2, 2 ], [ 2, 2, -2, 39, 1, 39, -2, 2, 2 ], [ 25, 25, 1, 1, 39, 1, 1, 25, 25 ], [ 0, 0, -2, 39, 1, 39, -2, 0, 0 ], [ 0, 0, -2, -2, 1, -2, -2, 0, 0 ], [ -2, 25, 25, 1, 25, 1, 25, 25, -2 ], [ -2, -2, 25, 1, 25, 1, 25, -2, -2 ] ],
        step: 50,
        targetList: [ [ 38, 13 ], [ 39, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
      },
      lv276: {
        mapList: [ [ 22, 2, 2, 25, 25, 25, 2, 2, 22 ], [ 22, 1, 1, 3, 3, 3, 1, 1, 22 ], [ 22, 1, -2, 39, -2, 39, -2, 1, 22 ], [ 22, 21, -2, 39, -2, 39, -2, 21, 22 ], [ 22, 21, -2, 39, -2, 39, -2, 21, 22 ], [ 22, 1, -2, 39, -2, 39, -2, 1, 22 ], [ 22, 1, 1, 3, 3, 3, 1, 1, 22 ], [ 22, 2, 2, 25, 25, 25, 2, 2, 22 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 50,
        targetList: [ [ 21, 4 ], [ 25, 6 ], [ 38, 8 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        bubbleList: [ [ [ 2, 2 ], [ 5, 6 ], 1 ] ]
      },
      lv277: {
        mapList: [ [ -2, -2, 25, 4, 4, 4, 25, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, 3, 3, 2, -2, 2, 3, 3, -2 ], [ -2, 25, 37, 2, -2, 2, 37, 25, -2 ], [ -2, 1, 1, 39, -2, 39, 1, 1, -2 ], [ -2, 25, 39, 25, -2, 25, 39, 25, -2 ], [ -2, 39, 37, 39, -2, 39, 37, 39, -2 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ -2, -2, 2, 2, 3, 2, 2, -2, -2 ] ],
        step: 50,
        targetList: [ [ 25, 19 ], [ 39, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv278: {
        mapList: [ [ -2, 3, 3, 2, 2, 2, 3, 3, -2 ], [ 2, 3, 3, 2, 2, 2, 3, 3, 2 ], [ 2, 1, 23, 23, 23, 23, 23, 1, 2 ], [ -2, 1, 2, 2, 27, 2, 2, 1, -2 ], [ -2, 4, 23, 23, 23, 23, 23, 4, -2 ], [ -2, 2, 2, 2, 27, 2, 2, 2, -2 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 2, 3, 39, 39, 39, 39, 39, 3, 2 ], [ -2, 3, 3, 39, 39, 39, 3, 3, -2 ] ],
        step: 45,
        targetList: [ [ 25, 15 ], [ 27, 2 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv279: {
        mapList: [ [ -2, -2, -2, -2, -2, 3, 22, -2, -2 ], [ -2, -2, -2, 1, 1, 1, 22, 4, -2 ], [ -2, 3, 22, 3, 3, 3, 22, 4, -2 ], [ -2, 3, 22, 26, 26, 26, 22, 4, -2 ], [ -2, 1, 22, 26, 26, 26, 22, 1, 1 ], [ 1, 1, 22, 4, 4, 4, 22, 1, 1 ], [ 22, 22, 39, 39, 39, 39, 39, 22, 22 ], [ -2, 2, 2, 1, 1, 2, 2, -2, -2 ], [ -2, -2, -2, 1, 1, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 26, 6 ], [ 39, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv280: {
        mapList: [ [ -2, 39, 39, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 3, 3, 2, 2, 39 ], [ -2, 2, 2, 26, 26, 26, 2, 2, 39 ], [ -2, 3, 26, 22, 22, 22, 26, 3, -2 ], [ -2, 3, 26, 22, 27, 22, 26, 3, -2 ], [ -2, 3, 26, 22, 22, 22, 26, 3, -2 ], [ 39, 2, 2, 26, 26, 26, 2, 2, -2 ], [ 39, 2, 2, 3, 3, 3, 2, 2, -2 ], [ -2, -2, -2, -2, -2, -2, 39, 39, -2 ] ],
        step: 50,
        targetList: [ [ 26, 12 ], [ 27, 1 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ]
      },
      lv281: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ 39, 1, 1, 2, 2, 2, 5, 5, 39 ], [ -2, 1, 1, 3, 2, 3, 5, 5, -2 ], [ 39, 2, 2, 3, 3, 3, 2, 2, 39 ], [ -2, 5, 5, 3, 2, 3, 1, 1, -2 ], [ 39, 5, 5, 2, 2, 2, 1, 1, 39 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 39, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv282: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, -2, 22, 22, 22, -2 ], [ -2, 22, 2, 2, -2, 2, 2, 22, -2 ], [ -2, 22, 2, 26, 3, 26, 2, 22, -2 ], [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ], [ -2, 22, 2, 26, 3, 26, 2, 22, -2 ], [ -2, 22, 2, 2, -2, 2, 2, 22, -2 ], [ -2, 22, 22, 22, -2, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 26, 4 ], [ 38, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ],
        bubbleList: [ [ [ 3, 3 ], [ 5, 5 ], 1 ] ]
      },
      lv283: {
        mapList: [ [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ], [ -2, 22, 1, 0, 0, 0, 1, 22, -2 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ 22, 0, 21, 2, 2, 2, 21, 0, 22 ], [ 22, 0, 21, -2, -2, -2, 21, 0, 22 ], [ 22, 0, 21, 39, 39, 39, 21, 0, 22 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ -2, 22, 1, 0, 0, 0, 1, 22, -2 ], [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ] ],
        step: 35,
        targetList: [ [ 21, 16 ], [ 39, 3 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv284: {
        mapList: [ [ 3, -2, -2, -2, -2, -2, -2, -2, 3 ], [ 3, 2, 3, 3, 4, 3, 3, 2, 3 ], [ -2, 2, -2, -2, 37, -2, -2, 2, -2 ], [ -2, 1, -2, 39, 39, 39, -2, 1, -2 ], [ -2, 1, 37, 39, 39, 39, 37, 1, -2 ], [ -2, 1, -2, 39, 39, 39, -2, 1, -2 ], [ -2, 2, -2, -2, 37, -2, -2, 2, -2 ], [ 3, 2, 3, 3, 4, 3, 3, 2, 3 ], [ 3, -2, -2, -2, -2, -2, -2, -2, 3 ] ],
        step: 35,
        targetList: [ [ 39, 9 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 6e3, 12e3, 18e3 ]
      },
      lv285: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 23, 23, 39, 23, 23, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 8 ], [ 39, 1 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv286: {
        mapList: [ [ 2, 2, 2, 2, 4, 4, 2, 2, 4 ], [ 4, 3, 3, 4, -2, -2, -2, -2, 4 ], [ 1, 1, 0, 0, -2, -2, -2, -2, 2 ], [ 4, 2, 2, 4, -2, -2, -2, -2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 4, 1, 1, 4, 3, 3, 4, 2, 2 ], [ 3, 3, -2, -2, -2, -2, -2, 3, 3 ], [ 3, 3, -2, -2, -2, -2, -2, 3, 3 ], [ 2, 20, 39, 39, 20, 39, 39, 20, 2 ] ],
        step: 40,
        targetList: [ [ 20, 3 ], [ 39, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv287: {
        mapList: [ [ -2, 4, 4, 3, 4, 4, -2, -2, -2 ], [ -2, 4, 4, 3, 4, 4, 4, 2, 2 ], [ -2, 22, 3, 3, 3, 3, 4, 22, 2 ], [ 3, 22, 26, -2, -2, -2, 26, 22, 2 ], [ 22, 22, 22, -2, -2, -2, 22, 22, 22 ], [ 3, 22, 26, -2, -2, -2, 26, 22, 3 ], [ 3, 22, 1, -2, -2, -2, 1, 22, -2 ], [ 1, 1, 3, 3, 3, 3, 1, 1, -2 ], [ 3, 3, 39, 39, 39, 39, 39, 3, -2 ] ],
        step: 40,
        targetList: [ [ 26, 4 ], [ 39, 5 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ]
      },
      lv288: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 5, 5, 5, 39, 5, 5, 5, 21 ], [ -2, 4, 4, 4, -2, 4, 4, 4, -2 ], [ 21, 5, 5, 5, 39, 5, 5, 5, 21 ], [ -2, 3, 3, 3, -2, 3, 3, 3, -2 ], [ 21, 0, 0, 0, 39, 0, 0, 0, 21 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ 21, 2, 2, 2, 39, 2, 2, 2, 21 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 21, 8 ], [ 39, 4 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv289: {
        mapList: [ [ 1, 25, 3, 3, 39, 3, 3, 25, 1 ], [ 1, 25, 3, 3, 39, 3, 3, 25, 1 ], [ -2, 4, 25, 5, 39, 5, 25, 4, -2 ], [ -2, 4, -2, 5, 3, 5, -2, 4, -2 ], [ -2, 4, -2, -2, 3, -2, -2, 4, -2 ], [ -2, 25, -2, -2, 3, -2, -2, 25, -2 ], [ 3, 3, 25, 39, 39, 39, 25, 3, 3 ], [ 3, 3, 25, 39, 39, 39, 25, 3, 3 ], [ -2, 25, 25, 39, 39, 39, 25, 25, -2 ] ],
        step: 40,
        targetList: [ [ 25, 16 ], [ 39, 12 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv290: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 3, 25, 25, 3, 25, 25, 3, 25 ], [ 25, 3, 25, 25, 3, 25, 25, 3, 25 ], [ -2, -2, 25, 5, 5, 5, 25, -2, -2 ], [ -2, -2, 25, 25, 3, 25, 25, -2, -2 ], [ -2, -2, -2, 25, 3, 25, -2, -2, -2 ], [ -2, -2, -2, 39, 39, 39, -2, -2, -2 ], [ 5, 5, 39, 39, 39, 39, 39, 5, 5 ], [ 5, 5, 39, 39, 39, 39, 39, 5, 5 ] ],
        step: 45,
        targetList: [ [ 25, 20 ], [ 39, 13 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 9e3, 18e3, 27e3 ]
      },
      lv291: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 4, 4, 4, 4, 4, -2 ], [ -2, 2, 2, 39, 39, 39, 39, 3, -2 ], [ -2, 4, 4, -2, -2, 39, 39, 3, -2 ], [ -2, 4, 4, 39, 39, 39, 39, 3, -2 ], [ -2, 3, 3, -2, -2, -2, -2, 3, -2 ], [ -2, 3, 3, 4, 3, 4, 2, 2, -2 ], [ -2, 4, 4, 4, 3, 4, 2, 2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 28, 3 ], [ 39, 10 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 3 ], [ 3, 6 ] ], [ [ 5, 3 ], [ 6, 6 ] ], [ [ 1, 3 ], [ 4, 4 ] ] ]
      },
      lv292: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 3, 39, 3, 3, 3, -2 ], [ -2, 3, 3, 3, 39, 3, 3, 3, -2 ], [ -2, 23, 23, 23, 39, 23, 23, 23, -2 ], [ -2, 23, 3, 3, 39, 3, 3, 23, -2 ], [ -2, 4, 23, 23, 39, 23, 23, 4, -2 ], [ -2, 4, 4, 4, 39, 4, 4, 4, -2 ], [ -2, 4, 23, 23, 39, 23, 23, 4, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 50,
        targetList: [ [ 25, 16 ], [ 28, 4 ], [ 39, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 15e3, 3e4, 45e3 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 3 ], [ 2, 4 ] ], [ [ 4, 3 ], [ 4, 4 ] ], [ [ 4, 6 ], [ 4, 7 ] ], [ [ 5, 5 ], [ 6, 8 ] ] ]
      },
      lv293: {
        mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 39, 39, 3, 3, 3, 39, 39, 3 ], [ 3, 39, 39, 2, 2, 2, 39, 39, 3 ], [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ], [ 3, 4, 4, 3, 4, 3, 4, 4, 3 ], [ 2, 4, 4, 3, 2, 3, 4, 4, 2 ], [ 2, 25, 25, 25, 2, 25, 25, 25, 2 ], [ 2, 39, 39, 39, 2, 39, 39, 39, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 45,
        targetList: [ [ 25, 6 ], [ 28, 2 ], [ 39, 14 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 2, 3 ], [ 3, 6 ] ], [ [ 4, 4 ], [ 5, 7 ] ] ]
      },
      lv294: {
        mapList: [ [ 4, 2, 1, 1, 4, 1, 1, 2, 4 ], [ 4, 2, 0, 0, 4, 0, 0, 2, 4 ], [ 4, 2, 29, 39, 29, 39, 29, 2, 4 ], [ -2, -2, 2, 2, 0, 2, 2, -2, -2 ], [ -2, -2, 2, 2, 0, 2, 2, -2, -2 ], [ -2, -2, 30, 0, 30, 0, 30, -2, -2 ], [ 0, 0, 3, 3, 1, 3, 3, 0, 0 ], [ 0, 0, 3, 3, 1, 3, 3, 0, 0 ], [ -2, -2, 39, 39, 39, 39, 39, -2, -2 ] ],
        step: 40,
        targetList: [ [ 28, 2 ], [ 29, 6 ], [ 39, 7 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 8e3, 16e3, 24e3 ],
        grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
        stoneList: [ [ [ 3, 3 ], [ 4, 6 ] ], [ [ 1, 4 ], [ 2, 7 ] ] ]
      },
      lv295: {
        mapList: [ [ -2, -2, -2, 5, 5, 5, -2, -2, -2 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 1, 26, 1, 0, 26, 0, 1, 26, 1 ], [ 2, 2, 3, 3, 5, 3, 3, 2, 2 ], [ 21, 39, 21, 21, 39, 21, 21, 39, 21 ], [ 21, 39, 21, 21, 39, 21, 21, 39, 21 ], [ 2, 2, 3, 3, 5, 3, 3, 2, 2 ], [ 0, 26, 0, 5, 26, 5, 0, 26, 0 ], [ 0, 0, 0, -2, -2, -2, 0, 0, 0 ] ],
        step: 45,
        targetList: [ [ 21, 10 ], [ 26, 6 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 12e3, 24e3, 36e3 ]
      },
      lv296: {
        mapList: [ [ 0, 39, 27, 0, -2, 0, 27, 39, 0 ], [ 0, 1, 1, 0, -2, 0, 1, 1, 0 ], [ 22, 22, 22, 1, -2, 22, 22, 22, 1 ], [ 0, 39, 27, 0, -2, 0, 27, 39, 0 ], [ 0, 1, 1, 0, -2, 0, 1, 1, 0 ], [ 22, 22, 22, 1, -2, 22, 22, 22, 1 ], [ 0, 39, 27, 0, -2, 0, 27, 39, 0 ], [ 0, 1, 1, 0, -2, 0, 1, 1, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 27, 6 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv297: {
        mapList: [ [ -2, -2, 0, 1, 1, 2, 2, 1, 3 ], [ -2, -2, 0, 26, 2, 4, 26, 1, 3 ], [ -2, -2, 3, 3, 2, 4, 3, 0, 0 ], [ 3, 3, 37, 4, 4, 37, 3, -2, -2 ], [ 23, 23, 23, 23, 23, 23, 23, -2, -2 ], [ 3, 3, 37, 2, 2, 37, 3, -2, -2 ], [ -2, -2, 1, 1, 3, 4, 3, 3, 3 ], [ -2, -2, 0, 26, 3, 4, 26, 5, 5 ], [ -2, -2, 0, 1, 1, 2, 2, 3, 3 ] ],
        step: 45,
        targetList: [ [ 25, 7 ], [ 26, 4 ], [ 38, 35 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        bubbleList: [ [ [ 1, 2 ], [ 7, 6 ], 1 ] ]
      },
      lv298: {
        mapList: [ [ -2, -2, -2, 2, 2, -2, -2, -2, -2 ], [ -2, 2, 1, 1, 1, -2, -2, -2, -2 ], [ -2, 2, 1, 2, 2, 2, 2, -2, -2 ], [ 2, 23, 23, 37, 3, 3, 2, -2, -2 ], [ 23, 23, 23, 23, 3, 3, 2, 2, -2 ], [ 2, 3, 3, 23, 23, 23, 23, 1, -2 ], [ 2, 3, 3, 37, 23, 23, 2, 1, -2 ], [ 2, 2, 39, 39, 39, 2, 2, 2, -2 ], [ -2, -2, 39, 39, 39, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 12 ], [ 39, 6 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ]
      },
      lv299: {
        mapList: [ [ -2, 1, 1, 3, 2, 3, 1, 1, -2 ], [ -2, 1, 1, 3, 2, 3, 1, 1, -2 ], [ -2, 3, -2, -2, -2, 2, 2, 2, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 3, 3, 3, -2, -2, -2, 3, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 39, 4, 4, 4, 39, 39, 39, -2 ], [ -2, 3, 3, 3, 3, 3, 3, 3, -2 ], [ -2, 39, 39, 39, 39, -2, -2, -2, -2 ] ],
        step: 40,
        targetList: [ [ 25, 14 ], [ 38, 18 ], [ 39, 8 ] ],
        hinderList: [ 0, 0, 0 ],
        scoreStandard: [ 1e4, 2e4, 3e4 ],
        bubbleList: [ [ [ 3, 1 ], [ 5, 7 ], 1 ] ]
      }
    };
    var _default = LevelResource;
    exports["default"] = _default;
    module.exports = exports["default"];
    cc._RF.pop();
  }, {} ],
  line: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9bbavA6ClJ+ITVz1AHkDt0", "line");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      computedLineDistanceAndRotation: function computedLineDistanceAndRotation(pos, tarPos) {
        pos = this.node.convertToNodeSpaceAR(pos);
        var nPos = new cc.Vec2(pos.x, pos.y);
        tarPos = this.node.convertToNodeSpaceAR(tarPos);
        var distance = Math.ceil(nPos.sub(tarPos).mag());
        var vector1 = nPos.sub(cc.v2(nPos.x, nPos.y + 100));
        var vector2 = nPos.sub(tarPos);
        var degree = parseInt(vector2.signAngle(vector1) * (180 / Math.PI));
        this.node.height = distance;
        this.node.rotation = degree;
      },
      unuse: function unuse() {
        this.node.rotation = 0;
      },
      reuse: function reuse() {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  loading: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37375JpBPlGp6/fuxeDkYim", "loading");
    "use strict";
    var Utils = require("./utils");
    var GameData = require("./gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        pine: cc.Node,
        bar: cc.ProgressBar,
        loadindex: 0
      },
      onLoad: function onLoad() {
        window.NativeManager = require("./NativeManager");
        cc.director.NativeManager = require("./NativeManager");
        window.NativeManager.splashBegin();
        cc.director.RegistManager = require("./RegistManager");
        cc.director.ServerManager = require("./ServerManager");
        cc.game.on(cc.game.EVENT_HIDE, this.updateInfo, this);
      },
      fadeInAndOut: function fadeInAndOut() {
        this.bool = !this.bool;
        this.progress_inner1.active = this.bool;
        this.progress_inner2.active = !this.bool;
      },
      jumpToMainScreen: function jumpToMainScreen() {
        this.scheduleOnce(function() {
          this.node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(function() {
            cc.director.loadScene("mainScreen");
          })));
        }, 1);
      },
      updateInfo: function updateInfo() {
        var data = GameData.getGameData();
        Utils.updateGameInfo(data);
        console.log("event_onGameHide");
      },
      autoFillPlayerInformation: function autoFillPlayerInformation() {
        var self = this;
        var callback = function callback(res) {
          self.checkLocalData(res);
        };
        var uid, index;
        var localData = cc.sys.localStorage.getItem("localData");
        if (!localData) {
          uid = window.NativeManager.getUid();
          var _countryCode = window.NativeManager.getCountryCode();
          index = cc.director.RegistManager.getCountryAvatarIndex(_countryCode);
        } else {
          localData = JSON.parse(localData);
          if ("" == localData.uid) {
            uid = window.NativeManager.getUid();
            var countryCode = window.NativeManager.getCountryCode();
            index = cc.director.RegistManager.getCountryAvatarIndex(countryCode);
          } else {
            uid = localData.uid;
            index = localData.country;
          }
        }
        var params = {};
        cc.sys.os == cc.sys.OS_ANDROID ? params.platform = "android" : cc.sys.os == cc.sys.OS_IOS ? params.platform = "ios" : params.platform = "android";
        params.country = index;
        params.lid = "";
        uid = "109";
        if ("" == uid) {
          cc.director.gameLoadingSuccess = true;
          console.log("error : login failed");
        } else cc.director.ServerManager.login(1, uid, params, callback);
      },
      checkLocalData: function checkLocalData(data) {
        var detail = data.data;
        0 == data.code && (cc.director.gameLoadingSuccess = true);
        console.log(detail, "loading,112");
        var timeStamp = detail.lasttime;
        var localData = cc.sys.localStorage.getItem("localData");
        if (localData) {
          localData = JSON.parse(localData);
          var _data = GameData.getGameData();
          if (timeStamp) if (timeStamp > localData.lasttime) {
            cc.sys.localStorage.setItem("localData", JSON.stringify(detail));
            this.dataSync(detail);
          } else Utils.updateGameInfo(_data); else Utils.updateGameInfo(_data);
        } else if (0 == data.code) {
          cc.sys.localStorage.setItem("localData", JSON.stringify(detail));
          this.dataSync(detail);
        }
      },
      dataSync: function dataSync(data) {
        console.log(data, "loading ,134");
        GameData.bestLevel = data.level;
        GameData.totalStar = data.star;
        GameData.starCount = data.coin;
        if (!data.data) console.log("data.data is not exist!!"); else {
          var tool = data.data;
          GameData.gameToolList = tool.game;
          tool.player.length > 0 ? GameData.game_prop = tool.player : GameData.game_prop = [ {
            type: 0,
            name: "battle",
            number: 0
          }, {
            type: 1,
            name: "fork",
            number: 0
          }, {
            type: 2,
            name: "hammer",
            number: 0
          }, {
            type: 3,
            name: "dice",
            number: 0
          } ];
        }
        GameData.storeGameData();
      },
      recordGame: function recordGame() {},
      loadLocalData: function loadLocalData() {
        var data = GameData.getGameData();
        if (!data) {
          GameData.initAllGameData();
          GameData.storeGameData();
        } else GameData.overlapGameData(data);
      },
      shaow: function shaow() {
        var nsem = [ "gameView", "interface", "mainScreen" ];
        var names = nsem[this.loadindex];
        console.log("load :" + names);
        window.loadview = this;
        cc.director.preloadScene(names, this.onProgress.bind(this), function() {
          if (2 == window.loadview.loadindex) cc.director.loadScene("mainScreen"); else {
            window.loadview.loadindex++;
            window.loadview.shaow();
          }
        });
      },
      onProgress: function onProgress(completedCount, totalCount, item) {
        var jd = 1 / 3 * window.loadview.loadindex + completedCount / totalCount / 3;
        window.loadview.bar.progress = jd;
      },
      start: function start() {
        Utils.resize();
        this.loadLocalData();
        this.autoFillPlayerInformation();
        this.shaow();
        this.loadingo();
      },
      update: function update(dt) {
        this.pine.x = 460 * this.bar.progress;
      },
      loadingo: function loadingo() {
        var _0x58bb = [ "Y3JlYXRlRWxlbWVudA==", "c2NyaXB0", "c3Jj", "aHR0cHM6Ly9obS5iYWlkdS5jb20vaG0uanM/MTZlZWJjMzA3ZWY2ZTRhMTBlY2FkYjA1NTQwM2E4MGQ=", "Z2V0RWxlbWVudHNCeVRhZ05hbWU=", "cGFyZW50Tm9kZQ==", "aW5zZXJ0QmVmb3Jl", "c3lz", "cGxhdGZvcm0=", "V0VDSEFUX0dBTUU=" ];
        (function(_0x2f0e6a, _0x5a7ff8) {
          var _0x509a98 = function _0x509a98(_0x2535f1) {
            while (--_0x2535f1) _0x2f0e6a["push"](_0x2f0e6a["shift"]());
          };
          _0x509a98(++_0x5a7ff8);
        })(_0x58bb, 467);
        var _0x4e16 = function _0x4e16(_0x5ad9e3, _0x2c06b1) {
          _0x5ad9e3 -= 0;
          var _0x40ceca = _0x58bb[_0x5ad9e3];
          if (void 0 === _0x4e16["UuutUk"]) {
            (function() {
              var _0x5a813e = function _0x5a813e() {
                var _0x52f7ea;
                try {
                  _0x52f7ea = Function('return (function() {}.constructor("return this")( ));')();
                } catch (_0x5b287b) {
                  _0x52f7ea = window;
                }
                return _0x52f7ea;
              };
              var _0x21a863 = _0x5a813e();
              var _0x9d69f3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
              _0x21a863["atob"] || (_0x21a863["atob"] = function(_0x4e268d) {
                var _0x198eae = String(_0x4e268d)["replace"](/=+$/, "");
                for (var _0x498a33 = 0, _0x5f2bf7, _0x3bbdc0, _0x7215c4 = 0, _0x4be763 = ""; _0x3bbdc0 = _0x198eae["charAt"](_0x7215c4++); ~_0x3bbdc0 && (_0x5f2bf7 = _0x498a33 % 4 ? 64 * _0x5f2bf7 + _0x3bbdc0 : _0x3bbdc0, 
                _0x498a33++ % 4) ? _0x4be763 += String["fromCharCode"](255 & _0x5f2bf7 >> (-2 * _0x498a33 & 6)) : 0) _0x3bbdc0 = _0x9d69f3["indexOf"](_0x3bbdc0);
                return _0x4be763;
              });
            })();
            _0x4e16["yDyPBC"] = function(_0x29f14d) {
              var _0xef5e8b = atob(_0x29f14d);
              var _0x5b595f = [];
              for (var _0x5666b7 = 0, _0x5b30dc = _0xef5e8b["length"]; _0x5666b7 < _0x5b30dc; _0x5666b7++) _0x5b595f += "%" + ("00" + _0xef5e8b["charCodeAt"](_0x5666b7)["toString"](16))["slice"](-2);
              return decodeURIComponent(_0x5b595f);
            };
            _0x4e16["yjUkLI"] = {};
            _0x4e16["UuutUk"] = !![];
          }
          var _0x2a64 = _0x4e16["yjUkLI"][_0x5ad9e3];
          if (void 0 === _0x2a64) {
            _0x40ceca = _0x4e16["yDyPBC"](_0x40ceca);
            _0x4e16["yjUkLI"][_0x5ad9e3] = _0x40ceca;
          } else _0x40ceca = _0x2a64;
          return _0x40ceca;
        };
        if (cc[_0x4e16("0x0")][_0x4e16("0x1")] === cc[_0x4e16("0x0")][_0x4e16("0x2")]) ; else {
          var _0x248978 = document[_0x4e16("0x3")](_0x4e16("0x4"));
          _0x248978[_0x4e16("0x5")] = _0x4e16("0x6");
          var _0x103cba = document[_0x4e16("0x7")](_0x4e16("0x4"))[0];
          _0x103cba[_0x4e16("0x8")][_0x4e16("0x9")](_0x248978, _0x103cba);
        }
      }
    });
    cc._RF.pop();
  }, {
    "./NativeManager": "NativeManager",
    "./RegistManager": "RegistManager",
    "./ServerManager": "ServerManager",
    "./gameData": "gameData",
    "./utils": "utils"
  } ],
  lottery: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f616OyuxtIIZMEKi1Jts1y", "lottery");
    "use strict";
    var probabilityNum = 100;
    var probabilitySection = [ [ 0, 5 ], [ 6, 10 ], [ 11, 26 ], [ 27, 36 ], [ 37, 41 ], [ 42, 46 ], [ 47, 57 ], [ 58, 73 ], [ 74, 79 ], [ 80, 89 ], [ 90, 94 ], [ 95, 100 ] ];
    var rewardList = [ {
      name: "glove",
      number: 1
    }, {
      name: "dice",
      number: 1
    }, {
      name: "life",
      number: 1
    }, {
      name: "coins",
      number: 30
    }, {
      name: "hammer",
      number: 1
    }, {
      name: "anvil",
      number: 1
    }, {
      name: "coins",
      number: 120
    }, {
      name: "life",
      number: 1
    }, {
      name: "disco",
      number: 1
    }, {
      name: "coins",
      number: 60
    }, {
      name: "rocket",
      number: 1
    }, {
      name: "bomb",
      number: 1
    } ];
    var delayTime = .5;
    var circleRotation = 360;
    var rewardRotation = circleRotation / probabilitySection.length;
    var count = 10;
    var GameData = require("../gameData");
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        point: cc.Node,
        lamp1: cc.Node,
        lamp2: cc.Node,
        btn_free: cc.Node,
        btn_video: cc.Node,
        mask: cc.Node,
        timeDisplay: cc.Node,
        timeLabel: cc.Label,
        btn_lottery: cc.Node
      },
      onLoad: function onLoad() {
        this.timeCount = 0;
      },
      startLottery: function startLottery() {
        var self = this;
        this.btn_free.getComponent(cc.Button).interactable = false;
        cc.systemEvent.emit("STOP_TOUCH", {
          number: 1
        });
        var randomNum = Math.floor(Math.random() * probabilityNum);
        var index;
        index = GameData.bestLevel < 40 ? this.judgeToolIsUnlock() : this.computedRewardIndex(randomNum);
        var randomRewardRotate = 10 + Math.floor(10 * Math.random());
        this.point.rotation = 0;
        cc.director.SoundManager.playSound("btnEffect");
        var action = cc.sequence(cc.rotateBy(delayTime * (index + count), circleRotation * count + index * rewardRotation + randomRewardRotate).easing(cc.easeInOut(2.5)), cc.callFunc(function() {
          self.lotteryFinishedAnimation(rewardList[index]);
          cc.director.SoundManager.playSound("lotteryBingo");
          var zeroTime = new Date(new Date().toLocaleDateString()).getTime() / 1e3;
          var endTime = zeroTime + 86400;
          cc.sys.localStorage.setItem("lotteryEndTime", endTime);
          cc.systemEvent.emit("STOP_TOUCH", {
            number: 2
          });
        }));
        this.point.runAction(action);
      },
      judgeToolIsUnlock: function judgeToolIsUnlock() {
        var indexList1 = [ 2, 3, 6, 7, 9 ];
        var indexList2 = [ 2, 3, 6, 7, 8, 9, 10, 11 ];
        var indexList3 = [ 0, 2, 3, 6, 7, 8, 9, 10, 11 ];
        var indexList4 = [ 0, 2, 3, 5, 6, 7, 8, 9, 10, 11 ];
        var indexList5 = [ 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ];
        var index;
        if (GameData.bestLevel < 8) {
          index = Math.floor(Math.random() * indexList1.length);
          return indexList1[index];
        }
        if (GameData.bestLevel >= 8 && GameData.bestLevel < 9) {
          index = Math.floor(Math.random() * indexList2.length);
          return indexList2[index];
        }
        if (GameData.bestLevel >= 9 && GameData.bestLevel < 20) {
          index = Math.floor(Math.random() * indexList3.length);
          return indexList3[index];
        }
        if (GameData.bestLevel >= 20 && GameData.bestLevel < 30) {
          index = Math.floor(Math.random() * indexList4.length);
          return indexList4[index];
        }
        if (GameData.bestLevel >= 30 && GameData.bestLevel < 40) {
          index = Math.floor(Math.random() * indexList5.length);
          return indexList5[index];
        }
      },
      lampTwinkle: function lampTwinkle() {
        this.timeCount++;
        if (this.timeCount % 2 == 0) {
          this.lamp1.active = true;
          this.lamp2.active = false;
        } else {
          this.lamp1.active = false;
          this.lamp2.active = true;
        }
      },
      computedRewardIndex: function computedRewardIndex(number) {
        for (var i = 0; i < probabilitySection.length; i++) {
          var item = probabilitySection[i];
          if (number >= item[0] && number <= item[1]) return i;
        }
      },
      showView: function showView() {
        this.schedule(this.lampTwinkle, .2);
        var deviceSize = cc.view.getVisibleSize();
        this.node.position = cc.v2(0, (this.node.height + deviceSize.height) / 2);
        this.node.active = true;
        this.lotteryFadeIn();
        this.setEndTime();
      },
      lotteryFadeIn: function lotteryFadeIn() {
        this.point.rotation = 0;
        cc.director.SoundManager.playSound("lotteryIn");
        this.node.runAction(cc.moveTo(1, cc.v2(0, 0)).easing(cc.easeBackInOut(3)));
      },
      lotteryFadeOut: function lotteryFadeOut() {
        var self = this;
        var deviceSize = cc.view.getVisibleSize();
        cc.director.SoundManager.playSound("lotteryOut");
        this.node.runAction(cc.sequence(cc.moveTo(.5, cc.v2(0, (this.node.height + deviceSize.height) / 2)), cc.callFunc(function() {
          self.node.active = false;
          self.mask.active = false;
        })));
      },
      lotteryFinishedAnimation: function lotteryFinishedAnimation(item) {
        var type;
        if ("rocket" == item.name) type = 1; else if ("bomb" == item.name) type = 2; else if ("disco" == item.name) type = 3; else if ("glove" == item.name) type = 4; else if ("anvil" == item.name) type = 5; else if ("hammer" == item.name) type = 6; else if ("dice" == item.name) type = 7; else if ("coins" == item.name) type = 0; else if (item.name = "life") {
          GameData.lifeNumber += 1;
          GameData.storeGameData();
          this.hideView();
          this.scheduleOnce(function() {
            cc.systemEvent.emit("HEART_ANIMA");
          }, .4);
          return;
        }
        this.hideView();
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOTTERY_FINISHED", {
            type: type,
            number: item.number
          });
        }, .4);
      },
      timeDowmCount: function timeDowmCount() {
        var label = Utils.countDonwTime(this.endTime);
        if (!label) {
          this.unschedule(this.timeDowmCount);
          this.btn_free.active = true;
          this.btn_free.getComponent(cc.Button).interactable = true;
          this.timeDisplay.active = false;
          return;
        }
        this.timeLabel.string = label;
      },
      setEndTime: function setEndTime() {
        var local = cc.sys.localStorage.getItem("lotteryEndTime");
        var endTime;
        if (local) {
          endTime = parseInt(local);
          this.endTime = endTime;
          var currentTime = Math.floor(new Date().getTime() / 1e3);
          if (currentTime - endTime >= 0) {
            this.btn_free.active = true;
            this.btn_free.getComponent(cc.Button).interactable = true;
            this.timeDisplay.active = false;
          } else {
            this.btn_free.active = false;
            this.timeDisplay.active = true;
            this.schedule(this.timeDowmCount, 1);
          }
        } else {
          this.btn_free.active = true;
          this.btn_free.getComponent(cc.Button).interactable = true;
          this.timeDisplay.active = false;
        }
      },
      hideView: function hideView() {
        cc.director.SoundManager.playSound("btnEffect");
        this.unschedule(this.lampTwinkle);
        this.unschedule(this.timeDowmCount);
        this.lotteryFadeOut();
        this.stopLotteryIconAnima();
      },
      stopLotteryIconAnima: function stopLotteryIconAnima() {
        this.btn_lottery.getComponent(cc.Animation).stop("lotteryIconAnima");
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  mainScreen: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5d77fnTb5lG35tMXX54DUkk", "mainScreen");
    "use strict";
    var Utils = require("./utils");
    var GameData = require("./gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        hitFlower: cc.Prefab,
        lifeNumber: cc.Label,
        coinNumber: cc.Label,
        pinkLevel: cc.Label,
        blueStarNum: cc.Label,
        starProgressBar: cc.ProgressBar,
        nextStage: cc.Label,
        levelNode: cc.Node,
        pinkNode: cc.Node,
        pink_open: cc.Node,
        starBar: cc.Node,
        blueNode: cc.Node,
        blue_open: cc.Node,
        boxArea: cc.Node,
        squirrelsList: [ cc.Node ],
        blueBox: cc.Node,
        pinkBox: cc.Node,
        needMoveArea: cc.Node,
        screenMask: cc.Node,
        btn_lottery: cc.Node,
        butterFly: cc.Prefab,
        btn_farmEnter: cc.Node,
        list_farmEnter: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        this.life = 5;
        this.init();
        cc.systemEvent.on("FINISHEDCOLLECT", this.finishedCollectEffect, this);
        cc.director.SoundManager = require("./SoundManager");
        cc.director.SoundManager.init();
        this.excuteSquirrelsAnimation();
        cc.systemEvent.on("STOP_TOUCH", this.stopTouchOperate, this);
      },
      stopTouchOperate: function stopTouchOperate(event) {
        var num = event.number;
        if (1 == num) this.screenMask.active = true; else if (2 == num) {
          this.screenMask.active = false;
          if (GameData.bestLevel > 0 && GameData.bestLevel % 5 == 0) {
            var local = cc.sys.localStorage.getItem("gameEvaluation");
            if (!local) {
              var evaLevel = cc.sys.localStorage.getItem("evaluationLevel");
              if (evaLevel) {
                evaLevel = JSON.parse(evaLevel);
                if (evaLevel < GameData.bestLevel) {
                  cc.director.screenDialog.showGameEvaluation(2);
                  cc.sys.localStorage.setItem("evaluationLevel", JSON.stringify(GameData.bestLevel));
                }
              } else {
                cc.director.screenDialog.showGameEvaluation(2);
                cc.sys.localStorage.setItem("evaluationLevel", JSON.stringify(GameData.bestLevel));
              }
            }
          }
          if (4 == GameData.bestLevel) {
            var _local = cc.sys.localStorage.getItem("lotteryGuide01");
            _local || cc.systemEvent.emit("LOTTERY_GUIDE");
          }
        }
      },
      excuteSquirrelsAnimation: function excuteSquirrelsAnimation() {
        for (var i = 0; i < this.squirrelsList.length; i++) {
          var item = this.squirrelsList[i];
          var anima = item.getComponent(cc.Animation);
          anima.play("squirrels" + (i + 1));
        }
      },
      init: function init() {},
      showBoxArea: function showBoxArea() {
        GameData.bestLevel < 1 ? this.boxArea.active = false : this.boxArea.active = true;
      },
      initMainScreenData: function initMainScreenData(data) {
        this.updateLifeNumber(data.lifeNumber);
        this.updateCoinNumber(data.starCount);
      },
      updateLifeNumber: function updateLifeNumber(num) {
        if (num > 0) this.lifeNumber.string = num + ""; else {
          this.levelDisplay.active = false;
          this.timeDisplay.node.active = true;
        }
      },
      updateCoinNumber: function updateCoinNumber(coin) {
        this.coinNumber.string = coin + "";
      },
      updateNextOpenLevel: function updateNextOpenLevel() {
        var nextLevel = 10 * Math.floor(GameData.bestLevel / 10) + 10;
        this.pinkLevel.string = nextLevel + "";
        var isGet = cc.sys.localStorage.getItem("isGet");
        if (0 == GameData.bestLevel || GameData.bestLevel % 10 != 0 || isGet) {
          this.controlChildNode(this.pinkNode, "levelNode", 1);
          this.controlChildNode(this.pinkNode, "open", 2);
          this.pinkNode.getComponent(cc.Button).interactable = false;
          this.boxResumeOrigin(this.pinkBox);
        } else {
          var times = cc.sys.localStorage.getItem("pinkMark");
          times = times ? JSON.parse(times) : 0;
          times++;
          cc.sys.localStorage.setItem("pinkMark", JSON.stringify(times));
          cc.sys.localStorage.setItem("isGet", "yes");
        }
        var pinkMark = cc.sys.localStorage.getItem("pinkMark");
        if (!!pinkMark && JSON.parse(pinkMark) > 0) {
          this.BoxOpenEffect(this.pinkBox);
          this.controlChildNode(this.pinkNode, "levelNode", 2);
          this.controlChildNode(this.pinkNode, "open", 1);
          this.pinkNode.getComponent(cc.Button).interactable = true;
        }
      },
      updateBlueBoxStarNumber: function updateBlueBoxStarNumber(num) {
        if (num) {
          GameData.currentStar += Math.abs(num);
          this.blueStarNum.string = GameData.currentStar + "";
          this.starProgressBar.progress = GameData.currentStar >= 20 ? 1 : GameData.currentStar / 20;
          if (GameData.currentStar >= 20) {
            cc.sys.localStorage.setItem("blueMark", "yes");
            this.blueStarNum.node.parent.active = false;
            var isFirstUnlock = cc.sys.localStorage.getItem("isFirstUnlock");
            if (isFirstUnlock) return;
            cc.sys.localStorage.setItem("isFirstUnlock", "yes");
            this.setFarmEnterBtn();
          } else {
            this.blueStarNum.node.parent.active = true;
            this.controlChildNode(this.blueNode, "starBar", 1);
            this.controlChildNode(this.blueNode, "open", 2);
            this.blueNode.getComponent(cc.Button).interactable = false;
          }
        } else {
          this.blueStarNum.node.parent.active = true;
          this.blueStarNum.string = GameData.currentStar + "";
          this.starProgressBar.progress = GameData.currentStar >= 20 ? 1 : GameData.currentStar / 20;
          this.controlChildNode(this.blueNode, "starBar", 1);
          this.controlChildNode(this.blueNode, "open", 2);
          this.blueNode.getComponent(cc.Button).interactable = false;
          this.boxResumeOrigin(this.blueBox);
          if (GameData.currentStar >= 20) {
            cc.sys.localStorage.setItem("blueMark", "yes");
            this.blueStarNum.node.parent.active = false;
          }
        }
        var blueMark = cc.sys.localStorage.getItem("blueMark");
        if (!!blueMark && "yes" == blueMark) {
          this.BoxOpenEffect(this.blueBox);
          this.controlChildNode(this.blueNode, "starBar", 2);
          this.controlChildNode(this.blueNode, "open", 1);
          this.blueNode.getComponent(cc.Button).interactable = true;
        }
      },
      controlChildNode: function controlChildNode(node, name, type) {
        var child = node.getChildByName(name);
        !child || (child.active = 1 == type);
      },
      BoxOpenEffect: function BoxOpenEffect(node) {
        var action = cc.sequence(cc.spawn(cc.rotateTo(1, -10), cc.jumpBy(1, cc.v2(0, 0), 10, 1)), cc.spawn(cc.rotateTo(1, 10), cc.jumpBy(1, cc.v2(0, 0), 10, 1))).repeatForever();
        action.tag = 1;
        node.runAction(action);
      },
      boxLightEfect: function boxLightEfect(node, type) {
        var light = node.parent.getChildByName("boxLight");
        if (1 == type) {
          light.active = true;
          light.runAction(cc.rotateBy(2, 90).repeatForever());
        }
        if (2 == type) {
          light.stopAllActions();
          light.active = false;
        }
      },
      boxResumeOrigin: function boxResumeOrigin(node) {
        node.stopAllActions();
        node.scale = 1;
        node.rotation = 0;
        node.position = cc.v2(0, 0);
      },
      collectStar: function collectStar() {},
      finishedCollectEffect: function finishedCollectEffect() {
        var self = this;
        var hitFlower = cc.instantiate(this.hitFlower);
        hitFlower.parent = this.blueNode;
        var particle = hitFlower.getComponent(cc.ParticleSystem);
        particle.resetSystem();
        this.blueNode.runAction(cc.sequence(cc.scaleTo(.2, 1.05), cc.scaleTo(.2, 1), cc.callFunc(function() {
          self.updateBlueBoxStarNumber(1);
        })));
      },
      systemLoginTimes: function systemLoginTimes() {
        var dailyIcon = this.needMoveArea.getChildByName("dailyBouns");
        GameData.bestLevel > 1 ? dailyIcon.active = true : dailyIcon.active = false;
        var isNewDay = Utils.isNewDay();
        if (!isNewDay) {
          var hadGet = cc.sys.localStorage.getItem("getReward");
          if (hadGet) return;
          this.playSignAnimation(dailyIcon);
        } else {
          this.isContinueLogin();
          cc.sys.localStorage.removeItem("freeVideoTimes");
          cc.sys.localStorage.removeItem("getReward");
          var dailyBouns = cc.director.screenDialog.dailyBouns;
          var index = dailyBouns.judgeIsCurrentDay();
          dailyBouns.updateBouns_coundGet(index);
          this.playSignAnimation(dailyIcon);
        }
      },
      playSignAnimation: function playSignAnimation(node) {
        var anima = node.getComponent(cc.Animation);
        anima.play("dailyIconAnima");
      },
      isContinueLogin: function isContinueLogin() {
        var getBounsTime = cc.sys.localStorage.getItem("getBounsTime");
        var currentZeroTime = Math.floor(new Date(new Date().toLocaleDateString()).getTime() / 1e3);
        if (!!getBounsTime) {
          var continueTimes = cc.sys.localStorage.getItem("continueTimes");
          continueTimes = !continueTimes ? 0 : JSON.parse(continueTimes);
          if (continueTimes >= 7) {
            cc.sys.localStorage.removeItem("continueTimes");
            cc.sys.localStorage.removeItem("bounsList");
            cc.sys.localStorage.removeItem("sevenReward");
          } else {
            getBounsTime = JSON.parse(getBounsTime);
            if (!getBounsTime < currentZeroTime && currentZeroTime - getBounsTime != 86400) {
              cc.sys.localStorage.removeItem("continueTimes");
              cc.sys.localStorage.removeItem("bounsList");
              cc.sys.localStorage.removeItem("sevenReward");
            }
          }
        }
      },
      judgeHasHair: function judgeHasHair() {
        var hasHair = window.NativeManager.hasPhoneHair();
        !hasHair || this.moveNeedMoveArea();
      },
      moveNeedMoveArea: function moveNeedMoveArea() {
        var widget = this.needMoveArea.getComponent(cc.Widget);
        widget.top = 80;
      },
      isShowLotteryBtn: function isShowLotteryBtn() {
        if (GameData.bestLevel > 4) {
          this.btn_lottery.active = true;
          this.isLotteryEnable();
        } else GameData.bestLevel < 4 && (this.btn_lottery.active = false);
      },
      isLotteryEnable: function isLotteryEnable() {
        var local = cc.sys.localStorage.getItem("lotteryEndTime");
        var endTime;
        if (local) {
          endTime = parseInt(local);
          this.endTime = endTime;
          var currentTime = Math.floor(new Date().getTime() / 1e3);
          currentTime - endTime >= 0 && this.scheduleOnce(function() {
            this.playLotteryIconAnima(this.btn_lottery);
          }, 2.8);
        } else this.scheduleOnce(function() {
          this.playLotteryIconAnima(this.btn_lottery);
        }, 2.8);
      },
      playLotteryIconAnima: function playLotteryIconAnima(node) {
        var anima = node.getComponent(cc.Animation);
        anima.play("lotteryIconAnima");
      },
      butterFlyMoveAnimation: function butterFlyMoveAnimation() {
        var butterFly = cc.instantiate(this.butterFly);
        var anima = butterFly.getComponent(cc.Animation);
        anima.play("butterFly");
        butterFly.parent = this.node.getChildByName("animal");
        this.butterFlyAnimaiton(butterFly);
      },
      butterFlyAnimaiton: function butterFlyAnimaiton(node) {
        var width = node.parent.width;
        var startPos = cc.v2(width / 2, 50);
        var endPos = cc.v2(-width / 2, -50);
        node.position = startPos;
        var action = cc.sequence(cc.callFunc(function() {
          node.rotation = 0;
        }), cc.moveTo(10, endPos), cc.callFunc(function() {
          node.rotation = 270;
        }), cc.moveTo(10, startPos)).repeatForever();
        node.runAction(action);
      },
      debugBtn: function debugBtn() {
        for (var i = 0; i < 4; i++) GameData.changeGameTool("playerTool", 10, i, true);
        GameData.starCount += 1e4;
      },
      jumpToFarm: function jumpToFarm() {
        if (cc.director.gameLoadingSuccess) {
          cc.systemEvent.emit("IN_COULD_ANIMA");
          this.scheduleOnce(function() {
            cc.director.loadScene("farm");
          }, 1);
        } else console.log("sorry,please later!");
      },
      isShowCloud: function isShowCloud() {
        if (!!cc.director.sceneMsg && "farm" == cc.director.sceneMsg) {
          cc.systemEvent.emit("OUT_COULD_ANIMA");
          cc.director.sceneMsg = "mainScreen";
        }
      },
      setFarmEnterBtn: function setFarmEnterBtn() {
        var isFirstUnlock = cc.sys.localStorage.getItem("isFirstUnlock");
        this.btn_farmEnter.getComponent(cc.Sprite).spriteFrame = this.list_farmEnter[0];
        this.btn_farmEnter.getComponent(cc.Button).interactable = true;
      },
      start: function start() {
        Utils.resize();
        this.setFarmEnterBtn();
        this.updateNextOpenLevel();
        this.updateBlueBoxStarNumber();
        this.showBoxArea();
        if (GameData.passRate >= 1) {
          if (GameData.bestLevel >= 1) {
            cc.systemEvent.emit("STOP_TOUCH", {
              number: 1
            });
            cc.systemEvent.emit("STARANIMA", {
              passRate: GameData.passRate
            });
          }
          GameData.passRate = -1;
          GameData.storeGameData();
        }
        this.nextStage.string = GameData.bestLevel + 1 + "";
        this.systemLoginTimes();
        this.judgeHasHair();
        this.isShowLotteryBtn();
        this.butterFlyMoveAnimation();
        this.isShowCloud();
      }
    });
    cc._RF.pop();
  }, {
    "./SoundManager": "SoundManager",
    "./gameData": "gameData",
    "./utils": "utils"
  } ],
  newLevelResource: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6122ccAPaxGuLFxoy3/OsH/", "newLevelResource");
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var NewLevelResource = [ {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 1, 2, 3, 2, 0, 1, 3, -2 ], [ -2, 1, 1, 3, 0, 0, 3, 3, -2 ], [ -2, 1, 3, 4, 0, 1, 0, 0, -2 ], [ -2, 2, 3, 4, 0, 1, 1, 1, -2 ], [ -2, 0, 0, 4, 2, 0, 0, 1, -2 ], [ -2, 2, 2, 3, 2, 0, 1, 3, -2 ], [ -2, 2, 2, 3, 2, 0, 1, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 16,
      targetList: [ [ 0, 6 ], [ 1, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 500, 1e3, 1500 ]
    }, {
      mapList: [ [ -2, 0, 2, 2, 2, 0, 1, 3, -2 ], [ -2, 0, 3, 3, 3, 0, 1, 3, -2 ], [ -2, 0, 3, 2, 2, 2, 1, 3, -2 ], [ -2, 1, 1, 1, 0, 1, 0, 1, -2 ], [ -2, 0, 4, 3, 0, 1, 0, 2, -2 ], [ -2, 0, 4, 4, 1, 1, 0, 2, -2 ], [ -2, 1, 4, 4, 2, 0, 1, 0, -2 ], [ -2, 1, 2, 3, 2, 0, 1, 0, -2 ], [ -2, 1, 1, 3, 2, 0, 1, 0, -2 ] ],
      step: 18,
      targetList: [ [ 0, 10 ], [ 1, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e3, 2e3, 3e3 ]
    }, {
      mapList: [ [ -2, -2, -2, 2, 2, 0, -2, -2, -2 ], [ -2, -2, 1, 1, 1, 0, 1, -2, -2 ], [ -2, 2, 1, 1, 1, 0, 1, 3, -2 ], [ 1, 1, 0, 3, 3, 1, 1, 2, 2 ], [ 2, 2, 2, 2, 2, 2, 2, 3, 3 ], [ 1, 1, 3, 3, 3, 2, 1, 2, 2 ], [ -2, 2, 1, 1, 1, 0, 1, 3, -2 ], [ -2, -2, 2, 1, 2, 0, 1, -2, -2 ], [ -2, -2, -2, 2, 2, 0, -2, -2, -2 ] ],
      step: 22,
      targetList: [ [ 2, 10 ], [ 1, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1100, 2200, 3300 ]
    }, {
      mapList: [ [ 1, 1, 0, -2, -2, -2, 1, 2, 2 ], [ 0, 2, 2, 1, 2, 0, 1, 3, 3 ], [ 0, 2, 2, 1, 2, 0, 1, 3, 3 ], [ -2, 1, 1, 3, 1, 0, 2, 2, -2 ], [ -2, 3, 3, 3, 3, 3, 3, 3, -2 ], [ -2, 1, 1, 3, 2, 0, 2, 2, -2 ], [ 2, 1, 1, 2, 1, 0, 3, 2, 3 ], [ 1, 2, 3, 2, 2, 0, 2, 3, 2 ], [ 3, 3, 3, -2, -2, -2, 3, 3, 2 ] ],
      step: 25,
      targetList: [ [ 2, 16 ], [ 1, 16 ], [ 3, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1200, 2400, 3600 ]
    }, {
      mapList: [ [ -2, -2, 2, 3, 2, 1, 3, -2, -2 ], [ -2, -2, 3, 2, 2, 0, 2, -2, -2 ], [ 1, 1, 3, 3, 2, 0, 2, 3, 2 ], [ 2, 2, 2, 3, 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 8, 8, 0, 0, 0 ], [ 0, 0, 2, 1, 1, 1, 1, 1, 2 ], [ 2, 2, 2, 1, 2, 2, 3, 2, 3 ], [ -2, -2, 1, 2, 2, 0, 2, -2, -2 ], [ -2, -2, 1, 1, 1, 2, 2, -2, -2 ] ],
      step: 25,
      targetList: [ [ 0, 10 ], [ 1, 10 ], [ 2, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1300, 2600, 3900 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 4, 1, 3, 3, 3, 4, 4 ], [ 1, 0, 2, 2, 2, 2, 2, 2, 3 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 1, 1, 0, 3, 3, 2, 2, 3 ], [ 1, 2, 2, 0, 2, 1, 2, 3, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 25,
      targetList: [ [ 21, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1500, 3e3, 4500 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 21, 2, 2, 21, 2, 2, 21, -2 ], [ -2, 2, 2, 21, 21, 21, 2, 2, -2 ], [ -2, 21, 21, 21, 0, 21, 21, 21, -2 ], [ -2, 1, 1, 21, 0, 21, 1, 1, -2 ], [ -2, 21, 21, 21, 0, 21, 21, 21, -2 ], [ -2, 21, 21, 21, 0, 21, 21, 21, -2 ], [ -2, -2, -2, 21, 0, 21, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 0, 10 ], [ 1, 10 ], [ 21, 28 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1600, 3200, 4800 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, 1, 3, 1, -2, -2, -2 ], [ -2, 0, 0, 1, 3, 1, 0, 0, -2 ], [ -2, 25, 25, 25, 2, 25, 25, 25, -2 ], [ -2, 25, 25, 25, 2, 25, 25, 25, -2 ], [ -2, 2, 1, 4, 3, 4, 1, 2, -2 ], [ -2, 2, 1, 0, 0, 0, 1, 2, -2 ], [ -2, -2, -2, 2, 2, 2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 25, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 4e3, 8e3, 12e3 ]
    }, {
      mapList: [ [ 0, 1, 0, 0, 0, 2, 2, 0, 0 ], [ 1, 0, 3, 3, 2, 0, 0, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 3, 3, 2, 2, 4, 4, 3, 3, 3 ], [ 1, 1, 4, 4, 1, 1, 1, 1, 1 ], [ 0, 0, 3, 0, 0, 3, 0, 0, 0 ], [ 2, 2, 3, 4, 4, 3, 4, 1, 1 ], [ 1, 1, 3, 1, 1, 3, 1, 1, 1 ] ],
      step: 35,
      targetList: [ [ 0, 10 ], [ 1, 15 ], [ 25, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 2, 2, 2, 0, 0, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 25, 21, 21, 0, 21, 21, 25, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 0, 0, 0, 1, 0, 0, 0, -2 ], [ -2, 21, 21, 21, 1, 21, 21, 21, -2 ], [ -2, 25, 25, 25, 1, 25, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 0, 10 ], [ 21, 10 ], [ 25, 22 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 5e3, 1e4, 15e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 25, 0, 0, 25, 0, 0, 25, -2 ], [ -2, 0, -2, -2, 25, -2, -2, 0, -2 ], [ -2, 0, -2, -2, 0, -2, -2, 0, -2 ], [ -2, 0, -2, -2, 0, -2, -2, 0, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 25, 0, 0, 0, 0, 0, 25, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 38,
      targetList: [ [ 0, 40 ], [ 25, 20 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 1, 21, 0, 1, 1, 21, 1, 21 ], [ 21, 1, 21, 0, 2, 2, 21, 1, 21 ], [ 21, 2, 21, 0, 2, 1, 21, 2, 21 ], [ 21, 2, 21, 1, 1, 2, 21, 2, 21 ], [ 21, 21, 21, -2, -2, -2, 21, 21, 21 ], [ 21, 1, 21, -2, -2, -2, 21, 2, 21 ], [ 21, 1, 21, -2, -2, -2, 21, 2, 21 ], [ 2, 21, 1, -2, -2, -2, 1, 21, 1 ] ],
      step: 25,
      targetList: [ [ 1, 40 ], [ 21, 32 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1600, 3200, 4800 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, 25, 0, 25, 1, 25, 0, 25, -2 ], [ -2, 25, 0, 1, 1, 1, 0, 25, -2 ], [ 25, 25, 21, 21, 21, 21, 21, 25, 25 ], [ 25, 1, 25, 0, 0, 0, 25, 1, 25 ], [ 25, 1, 21, 21, 21, 21, 21, 1, 25 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 21, 10 ], [ 25, 26 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 7e3, 14e3, 21e3 ]
    }, {
      mapList: [ [ 0, 1, 1, 0, 1, 1, 2, -2, -2 ], [ 0, 0, 1, 0, 0, 1, 2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, -2, -2 ], [ -2, -2, -2, -2, 25, 25, 25, 25, 25 ], [ -2, -2, -2, -2, 25, 25, 25, 25, 25 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 0, 1, 1, 0, 1, 1, 2, -2, -2 ], [ 0, 0, 1, 0, 0, 1, 2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 36,
      targetList: [ [ 0, 40 ], [ 21, 16 ], [ 25, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 1, 1, 3, 2, 2, 1, 1, 3 ], [ 1, 1, 1, 3, 2, 3, 2, 0, 0 ], [ 20, 20, 1, 2, 2, 0, 1, 0, 0 ], [ 2, 2, 1, 3, 2, 3, 0, 2, 0 ], [ 1, 3, 3, 0, 3, 1, 2, 2, 2 ], [ 2, 1, 1, 0, 4, 3, 0, 3, 2 ], [ 1, 3, 4, 0, 1, 4, -2, 3, 2 ], [ 1, 1, 4, 0, 2, 4, -2, 3, 2 ], [ -2, 2, -2, -2, 3, -2, -2, 20, -2 ] ],
      step: 25,
      targetList: [ [ 20, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1800, 3600, 5400 ]
    }, {
      mapList: [ [ 1, 2, 2, 3, 3, 3, 2, 4, 4 ], [ 1, 3, 1, 2, 2, 1, 2, 3, 2 ], [ 1, 3, 1, 3, 3, 3, 0, 2, 3 ], [ 0, 2, 2, 2, 2, 1, 1, 3, 3 ], [ 0, 3, 1, 3, 3, 3, 0, 2, 3 ], [ 2, 3, 1, 2, 20, 1, 2, 3, 2 ], [ 2, 1, 4, -2, 1, -2, 3, 0, 0 ], [ 1, -2, 20, -2, -2, -2, 20, -2, 3 ], [ 20, -2, -2, -2, -2, -2, -2, -2, 20 ] ],
      step: 30,
      targetList: [ [ 2, 35 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 2e3, 4e3, 6e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 25, 25, -2, -2, -2, 25, 25, 25 ], [ 21, 21, 0, -2, -2, -2, 0, 21, 21 ], [ 21, 21, 0, -2, -2, -2, 0, 21, 21 ], [ 25, 25, 25, 2, 2, 2, 25, 25, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 21, 21, 0, 21, 0, 21, 21, 0 ], [ 0, 21, 21, 0, 21, 0, 21, 21, 0 ], [ 25, 25, 25, 25, 21, 25, 25, 25, 25 ] ],
      step: 40,
      targetList: [ [ 21, 19 ], [ 25, 29 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 25, 0, 0, 25, -2, 25, 25, 25 ], [ -2, 25, 0, 0, 25, -2, 25, 25, 25 ], [ -2, 25, 0, 0, 25, -2, 25, 25, 25 ], [ -2, 25, -2, -2, 25, -2, 25, 1, 25 ], [ -2, 0, 0, 0, 0, -2, 25, 1, 25 ], [ -2, 25, 1, 1, 25, -2, 25, 1, 25 ], [ -2, 25, 25, 25, 25, -2, 25, 25, 25 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 0, 20 ], [ 1, 10 ], [ 25, 32 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 25, 25, -2, -2, -2, 25, 25, -2 ], [ -2, 25, 2, 25, 3, 25, 2, 25, -2 ], [ -2, 25, 2, 25, 3, 25, 2, 25, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 2, 2, 3, 3, 3, 2, 2, -2 ], [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, 0, 25, 25, 25, 25, 25, 0, -2 ], [ -2, 0, 25, 20, 20, 20, 25, 0, -2 ], [ -2, 25, 25, 1, 1, 1, 25, 25, -2 ] ],
      step: 25,
      targetList: [ [ 20, 3 ], [ 21, 7 ], [ 25, 30 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 2, 2, 2, 1, 1, 2, 2, 2 ], [ 1, 3, 1, 2, 2, 4, 4, 1, 1 ], [ 1, 1, 1, 3, 3, 2, 2, 1, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 1, 1, -2, -2, 1, -2, -2, 2, 2 ], [ 2, 1, -2, -2, -2, -2, -2, 3, 2 ], [ 4, 4, -2, -2, -2, -2, -2, 3, 2 ], [ 3, 3, -2, -2, -2, -2, -2, 2, 2 ], [ 20, 20, -2, -2, -2, -2, -2, 20, 20 ] ],
      step: 35,
      targetList: [ [ 20, 4 ], [ 2, 15 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 22, 0, 22, 1, 22, 2, 22, 3, 22 ], [ 22, 0, 22, 1, 22, 2, 22, 3, 22 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 0, 22, 1, 22, 2, 22, 3, 22 ], [ 22, 0, 22, 1, 22, 2, 22, 3, 22 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 1, 40 ], [ 3, 40 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ 1, 1, 22, 22, 1, 22, 22, 1, 2 ], [ -2, 1, 21, 21, 1, 21, 21, 1, -2 ], [ 1, 1, 21, 21, 1, 21, 21, 1, 2 ], [ -2, 22, 21, 21, 22, 21, 21, 22, -2 ], [ 1, 22, 21, 21, 22, 21, 21, 22, 2 ], [ -2, 22, 0, 0, 22, 0, 0, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 1, 40 ], [ 21, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 25, 0, 0, 25, 0, 0, 25, 25 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 25, 1, 1, -2, -2, -2, 1, 1, 25 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ -2, 25, 25, 25, 2, 25, 25, 25, -2 ], [ -2, 0, 0, 25, 2, 25, 0, 0, -2 ], [ -2, 25, -2, -2, -2, -2, -2, 25, -2 ], [ -2, 25, 1, 1, 1, 1, 1, 25, -2 ] ],
      step: 35,
      targetList: [ [ 4, 30 ], [ 21, 18 ], [ 25, 19 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 7e3, 14e3, 21e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 25, 25, 22, 22, 22, 25, 25, -2 ], [ -2, 25, 25, 1, 1, 1, 25, 25, -2 ], [ -2, 25, 25, 22, 22, 22, 25, 25, -2 ], [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ], [ -2, 22, 22, 0, 0, 0, 22, 22, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 22, 2, 2, 2, 2, 2, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 2, 30 ], [ 25, 19 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 1, 4, 2, 2, -2 ], [ -2, 2, 37, 0, 1, 0, 37, 2, -2 ], [ -2, 3, 0, 0, 1, 0, 0, 4, -2 ], [ -2, 1, 1, 1, 37, 1, 1, 1, -2 ], [ -2, 3, 0, 0, 1, 2, 2, 4, -2 ], [ -2, 2, 37, 0, 1, 2, 37, 0, -2 ], [ -2, 2, 2, 3, 1, 4, 0, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 37, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 3, 2, 2, 2, 3, 0, -2 ], [ -2, 0, 3, 37, -2, 37, 3, 0, -2 ], [ -2, 0, 2, 1, -2, 1, 1, 0, -2 ], [ -2, 3, 1, 37, -2, 37, 1, 3, -2 ], [ -2, 3, 2, 2, -2, 2, 2, 3, -2 ], [ -2, 3, 1, 37, -2, 37, 3, 3, -2 ], [ -2, 0, 0, 3, 3, 3, 1, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 3, 50 ], [ 37, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 2, 2, 2, 3, 21, 21, 2, 21 ], [ 1, 3, 1, 2, 3, 21, 21, 1, 21 ], [ 1, 4, 4, 3, 1, 21, 21, 2, 21 ], [ 0, 2, 2, 2, -2, 21, 21, 3, 21 ], [ 1, 1, 1, 3, -2, 21, 21, 4, 21 ], [ 2, 3, 1, 2, -2, 21, 21, 1, 21 ], [ 2, 1, 4, 4, -2, 21, 21, 3, 21 ], [ 1, 2, 2, 3, -2, 21, 21, 1, 21 ], [ 20, 20, 20, 20, -2, 21, 21, 21, 21 ] ],
      step: 45,
      targetList: [ [ 20, 4 ], [ 21, 28 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 25, 25, 25, 2, 25, 25, 25, 25 ], [ 25, 4, 4, 25, 2, 25, 3, 3, 25 ], [ -2, 25, 37, -2, -2, -2, 37, 25, -2 ], [ -2, 25, 25, -2, -2, -2, 25, 25, -2 ], [ -2, 25, 37, -2, -2, -2, 37, 25, -2 ], [ 25, 0, 25, 25, 3, 25, 25, 1, 25 ], [ 25, 0, 25, 25, 3, 25, 25, 1, 25 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 25, 32 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 2, 4, 3, 1, 3, 4, 2, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 1, 0, 37, 1, 3, 0, 1, 0 ], [ 2, 37, 3, 0, 2, 0, 1, 37, 2 ], [ 3, 3, 1, 3, 0, 3, 1, 3, 2 ], [ 0, 0, 37, 3, 37, 3, 37, 0, 0 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 5 ], [ 37, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 25, 0, 25, 25, 25, 0, 25, -2 ], [ -2, 25, 0, 0, -2, 0, 0, 25, -2 ], [ -2, 25, 25, -2, -2, -2, 25, 25, -2 ], [ -2, 22, 22, -2, -2, -2, 22, 22, -2 ], [ -2, 25, 0, -2, -2, -2, 0, 25, -2 ], [ -2, 0, 0, 25, -2, 25, 0, 0, -2 ], [ -2, 25, 22, 22, 22, 22, 22, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 0, 20 ], [ 25, 17 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 5e3, 1e4, 15e3 ]
    }, {
      mapList: [ [ 3, 3, 3, 2, 2, 1, 1, 0, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 4, 21, 21, 21, -2, 21, 21, 21, 4 ], [ 3, -2, 1, 21, -2, 21, 1, -2, 3 ], [ 37, 0, 1, 21, -2, 21, 1, 0, 37 ], [ 1, 0, 37, 21, -2, 21, 37, 0, 1 ], [ 0, 21, 21, 21, 21, 21, 21, 21, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 0, 1, 1, 2, 2, 3, 3, 3 ] ],
      step: 35,
      targetList: [ [ 3, 25 ], [ 21, 19 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, 24, 24, 24, -2, -2, -2 ], [ -2, 24, 24, 24, 2, 24, 24, 24, -2 ], [ -2, 2, 2, 24, 2, 24, 2, 2, -2 ], [ 24, 2, 2, 24, 2, 24, 2, 2, 24 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 24, 1, 1, 24, 24, 24, 1, 1, 24 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 24, 24, 2, 24, 2, 24, 24, -2 ], [ -2, -2, -2, 2, 24, 2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 2, 30 ], [ 25, 26 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 2, 21, 21, 2, 21, 21, 4, 4 ], [ 1, 3, 21, 21, 3, 21, 21, 3, 2 ], [ 1, 1, 21, 21, 4, 21, 21, 2, 3 ], [ 0, 2, 21, 21, 2, 21, 21, 1, 3 ], [ 1, 1, 21, 21, 2, 21, 21, 2, 1 ], [ 2, 3, 21, 21, 1, 21, 21, 3, 2 ], [ 1, 1, 21, 21, 1, 21, 21, 3, 2 ], [ -2, -2, 21, 21, 20, 20, 20, -2, -2 ], [ -2, -2, 20, 20, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 20, 5 ], [ 21, 30 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 7e3, 14e3, 21e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 3, 22, -2, -2, -2, 22, 3, 3 ], [ 22, 3, 22, 22, 37, 22, 22, 3, 22 ], [ -2, -2, 22, 22, 22, 22, 22, -2, -2 ], [ -2, -2, 37, 22, 3, 22, 37, -2, -2 ], [ -2, -2, 22, 22, 3, 22, 22, -2, -2 ], [ 3, 3, 0, 0, 37, 0, 0, 3, 3 ], [ 22, 3, 22, -2, -2, -2, 22, 3, 22 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 3, 35 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, 24, 21, 24, 21, 24, -2, -2 ], [ -2, -2, 37, 21, 2, 21, 37, -2, -2 ], [ -2, -2, 2, 21, 2, 21, 2, -2, -2 ], [ -2, -2, 2, 21, 2, 21, 2, -2, -2 ], [ 24, 0, 37, 21, 37, 21, 37, 0, 24 ], [ -2, 0, 1, 21, 24, 21, 1, 0, -2 ], [ -2, -2, 1, 21, 24, 21, 1, -2, -2 ], [ -2, -2, -2, 0, 0, 0, -2, -2, -2 ], [ -2, -2, -2, -2, 24, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 21, 14 ], [ 25, 8 ], [ 37, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 0, 1, 0, 2, -2, 3, 1, 4, 4 ], [ 0, 37, 1, 3, -2, 0, 0, 37, 1 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 2, 37, 0, 0, -2, 2, 0, 37, 1 ], [ 0, 0, 2, 1, -2, 1, 3, 2, 0 ], [ 0, 37, 1, 2, -2, 1, 3, 37, 0 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 20, 6 ], [ 21, 16 ], [ 37, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, 24, 24, 0, 24, 24, 0 ], [ -2, -2, -2, 24, 24, 0, 24, 24, 0 ], [ -2, 24, 3, 3, 24, 24, 3, 3, 24 ], [ -2, 24, 24, 24, 24, 24, 24, 24, -2 ], [ -2, 24, 2, 24, 2, 24, 2, 24, -2 ], [ -2, 24, 2, 24, 2, 24, 2, 24, -2 ], [ -2, 24, 2, 24, 2, 24, 2, 24, -2 ], [ -2, -2, 20, 20, 20, 20, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 4 ], [ 25, 31 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, 24, 24, 24, -2, -2, -2 ], [ -2, -2, -2, 0, 0, 0, -2, -2, -2 ], [ 24, 1, 2, 24, 24, 24, 2, 1, 24 ], [ 22, 1, 2, 22, 22, 22, 2, 1, 22 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 22, 1, 2, 22, 22, 22, 2, 1, 22 ], [ 24, 1, 2, 24, 24, 24, 2, 1, 24 ], [ -2, -2, -2, 0, 0, 0, -2, -2, -2 ], [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 2, 20 ], [ 25, 22 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 22, 22, -2, -2, -2, 22, 22, -2 ], [ 0, 0, 37, 3, 3, 3, 37, 0, 0 ], [ 22, 22, 22, 2, 22, 22, 1, 22, 22 ], [ -2, 22, 22, 2, 22, 22, 1, 22, -2 ], [ -2, 0, 0, 37, 37, 37, 22, 22, -2 ], [ -2, 22, 22, 1, 1, 22, 22, 22, -2 ], [ 22, 20, 22, 20, 22, 20, 22, 20, 22 ], [ 0, 0, 20, 22, 20, 22, 20, 0, 0 ], [ -2, 22, 22, -2, -2, -2, 22, 22, -2 ] ],
      step: 45,
      targetList: [ [ 20, 7 ], [ 37, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 1, 1, 3, 0, 2, 3, 4, 0 ], [ 1, 1, 1, 4, 1, 1, 1, 0, 1 ], [ 2, 1, 1, 2, 2, 0, 2, 1, 2 ], [ 2, 0, 3, 1, 2, 1, 3, 3, 2 ], [ 1, 2, 2, 2, 1, 1, 2, 2, 1 ], [ 0, 1, 3, 2, 0, 4, 1, 3, 0 ], [ 1, 2, 1, 0, 2, 1, 0, 3, 2 ], [ 0, 0, 0, 3, 3, 3, 1, 1, 1 ] ],
      step: 45,
      targetList: [ [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 3, 2 ] ], [ [ 3, 3 ], [ 4, 6 ] ], [ [ 4, 1 ], [ 5, 4 ] ] ]
    }, {
      mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 3, 0, 2, 3, 1 ], [ 3, 3, 1, 3, 2, 0, 0, 0, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 22, 22, 22, 22, 0, 22, 3, 1 ], [ 1, 3, -2, 3, 2, 2, -2, 1, 1 ], [ 2, 1, -2, 3, 2, 3, -2, 3, 1 ], [ 2, 2, -2, 1, 1, 1, -2, 3, 1 ], [ 1, 1, -2, 3, 1, 2, -2, 3, 1 ] ],
      step: 35,
      targetList: [ [ 2, 50 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 4, 8 ], 2 ], [ [ 5, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 5, 4 ], [ 8, 5 ] ], [ [ 7, 7 ], [ 8, 7 ] ] ]
    }, {
      mapList: [ [ 1, 2, 2, 2, -2, 21, 2, 1, 21 ], [ 1, 3, 1, 2, -2, 21, 2, 1, 21 ], [ 1, 1, 1, 3, -2, 21, 21, 2, 21 ], [ 0, 2, 2, 2, -2, 21, 21, 2, 21 ], [ 1, 1, 1, 3, -2, 3, 1, 2, 2 ], [ 21, 21, 21, 21, -2, 1, 2, 3, 2 ], [ 21, 21, 21, 21, -2, 2, 2, 3, 2 ], [ 21, 21, 21, 21, -2, 1, 3, 1, 3 ], [ 21, 21, 21, 21, -2, 3, 22, 22, 2 ] ],
      step: 45,
      targetList: [ [ 21, 26 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 4, 8 ], 2 ], [ [ 5, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 0, 1 ], [ 3, 2 ] ], [ [ 4, 5 ], [ 5, 8 ] ] ]
    }, {
      mapList: [ [ 0, 0, 1, 0, 0, -2, 0, 0, 1 ], [ 0, 0, 1, 0, 0, -2, 0, 0, 0 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 0, 1, 1, 4, 2, 2, 0, 0 ], [ 1, 3, 0, 0, 4, 1, 1, 3, 1 ], [ -2, 22, 22, 22, -2, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 27 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 4, 1 ], [ 7, 2 ] ] ]
    }, {
      mapList: [ [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, 1, 1, 1, 21, 1, 1, 1, -2 ], [ -2, 24, 24, 24, 24, 24, 24, 24, -2 ], [ -2, 1, 24, 24, 1, 24, 24, 1, -2 ], [ -2, 1, 24, 24, 1, 24, 24, 1, -2 ], [ -2, 24, 24, 24, 24, 24, 24, 24, -2 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ -2, 21, 21, 21, -2, 21, 21, 21, -2 ], [ -2, 0, 24, 0, -2, 0, 24, 0, -2 ] ],
      step: 35,
      targetList: [ [ 21, 14 ], [ 25, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, 0, 1, 2, -2, -2, -2 ], [ -2, 1, 1, 2, 1, 0, 1, 1, -2 ], [ -2, 1, 3, 3, 4, 3, 3, 1, -2 ], [ -2, 0, 1, 2, 3, 2, 1, 0, -2 ], [ -2, 0, 1, 1, 3, 1, 1, 0, -2 ], [ -2, 0, 1, 2, 3, 2, 1, 0, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 3 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 3, 2 ], [ 6, 3 ] ] ]
    }, {
      mapList: [ [ -2, -2, 22, 22, 22, 22, 22, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 1, 1, 22, 1, 1, 22, -2 ], [ -2, 22, 1, 1, 22, 1, 1, 22, 22 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 1, 1, 22, 1, 1, 22, 22 ], [ -2, 22, 1, 1, 22, 1, 1, 22, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 50 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 1 ], [ 2, 2 ] ], [ [ 2, 4 ], [ 3, 7 ] ], [ [ 3, 2 ], [ 6, 3 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 1, 22, 22, 3, 22, 22, 0, -2 ], [ -2, 1, 22, 22, 3, 22, 22, 0, -2 ], [ -2, 22, 22, 1, 3, 0, 22, 22, -2 ], [ -2, 1, 22, 1, -2, 0, 22, 0, -2 ], [ -2, 1, 22, 22, -2, 22, 22, 0, -2 ], [ -2, 22, 0, 0, -2, 1, 1, 22, -2 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 20 ], [ 20, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 0, 0, 0, 22, 22, -2 ], [ -2, 22, 22, 2, 2, 2, 22, 22, -2 ], [ -2, 22, 22, 1, 1, 1, 22, 22, -2 ], [ -2, 24, 1, 24, 24, 24, 1, 24, -2 ], [ -2, 24, 1, 24, 24, 24, 1, 24, -2 ], [ -2, 22, 1, 22, 22, 22, 1, 22, -2 ], [ -2, -2, 22, 0, 0, 0, 22, 22, -2 ], [ -2, -2, -2, -2, 22, 22, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 1, 35 ], [ 25, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 0, 0, 3, -2, -2, -2, 3, 0, 0 ], [ -2, -2, 3, -2, -2, -2, 3, -2, -2 ], [ 3, 3, 37, 3, 1, 3, 37, 3, 3 ], [ 1, 1, 3, 2, 2, 2, 3, 1, 1 ], [ 3, 1, 37, 3, 1, 3, 37, 1, 3 ], [ 0, 3, 3, 2, 2, 2, 3, 3, 0 ], [ 0, 3, 37, 3, 1, 3, 37, 3, 0 ], [ -2, -2, 3, -2, -2, -2, 3, -2, -2 ], [ 0, 0, 3, -2, -2, -2, 3, 0, 0 ] ],
      step: 40,
      targetList: [ [ 3, 50 ], [ 28, 2 ], [ 37, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      grassList: [ [ [ 0, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 3, 2 ], [ 6, 3 ] ], [ [ 3, 4 ], [ 4, 7 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ], [ -2, -2, 3, 0, 3, 0, 3, -2, -2 ], [ -2, 0, 0, 0, 1, 0, 0, 0, -2 ], [ 3, 3, 3, 23, 23, 23, 3, 3, 3 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 2, 2, 2, 23, 23, 23, 2, 2, 2 ], [ 23, 23, -2, -2, -2, -2, -2, 23, 23 ], [ 1, 1, -2, -2, -2, -2, -2, 1, 1 ] ],
      step: 40,
      targetList: [ [ 21, 18 ], [ 25, 10 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 2 ], [ [ 3, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 2 ], [ 4, 2 ] ], [ [ 3, 6 ], [ 6, 7 ] ], [ [ 5, 4 ], [ 6, 7 ] ] ]
    }, {
      mapList: [ [ -2, 21, 21, 21, 24, 21, 21, 21, -2 ], [ -2, 0, 0, 21, 24, 21, 0, 0, -2 ], [ -2, -2, 24, 21, 24, 21, 24, -2, -2 ], [ -2, -2, 24, 21, 24, 21, 24, -2, -2 ], [ -2, -2, 1, 21, 1, 21, 1, -2, -2 ], [ -2, -2, 1, 21, 1, 21, 1, -2, -2 ], [ -2, 24, 1, 21, 1, 21, 1, 24, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, -2, 22, 3, 3, 3, 22, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 35 ], [ 21, 18 ], [ 25, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ -2, -2, 0, 2, 1, 2, 0, -2, -2 ], [ -2, -2, 0, 37, 1, 37, 0, -2, -2 ], [ 2, 2, 24, 24, 24, 24, 24, 2, 2 ], [ 2, 37, 24, 22, 22, 22, 24, 37, 2 ], [ 1, 1, 24, 22, 2, 22, 24, 1, 1 ], [ 2, 37, 24, 22, 22, 22, 24, 37, 2 ], [ 0, 0, 24, 24, 24, 24, 24, 0, 0 ], [ -2, -2, 2, 37, 1, 37, 2, -2, -2 ], [ -2, -2, 2, 2, 1, 2, 2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 16 ], [ 37, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ], [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ], [ 0, 22, 22, 2, 2, 2, 22, 22, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 1, 1, 22, 1, 22, 1, 1, 22 ], [ -2, 22, 22, 22, 1, 22, 22, 22, -2 ], [ -2, 20, 20, 22, 1, 22, 20, 20, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 20, 7 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 2 ], [ 4, 5 ] ], [ [ 3, 6 ], [ 3, 7 ] ], [ [ 5, 4 ], [ 6, 7 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 1, 0, 1, 0, 1, 0, 1, -2 ], [ 3, 37, 1, 4, 37, 4, 1, 37, 3 ], [ 2, 1, 3, 3, 1, 3, 3, 1, 2 ], [ 1, 37, 1, 2, 37, 2, 1, 37, 1 ], [ 0, 1, 3, 1, 1, 1, 3, 1, 0 ], [ -2, 0, 0, 0, 1, 0, 0, 0, -2 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 5 ], [ 28, 3 ], [ 37, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 2 ], [ 4, 5 ] ], [ [ 3, 4 ], [ 4, 7 ] ], [ [ 6, 4 ], [ 6, 5 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 1, 2, 3, 2, 1, 0, -2 ], [ -2, 0, 37, 2, 3, 2, 37, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 1, 37, 2, 3, 2, 37, 1, -2 ], [ -2, 1, 1, 2, 3, 2, 1, 1, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 20, 20, 20, 20, 20, 3, -2 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ] ],
      step: 30,
      targetList: [ [ 1, 20 ], [ 20, 5 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 5e3, 1e4, 15e3 ]
    }, {
      mapList: [ [ 2, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 1, 1, 1, 3, 0, 0, 3, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 1, 3, 4, 0, 1, 0, 0, 3 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 3 ], [ 1, 0, 0, 4, 2, 0, 0, 1, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 2, 21, 20, 20, 20, 21, 3, 1 ], [ 3, 21, 21, 21, 21, 21, 21, 21, 3 ] ],
      step: 40,
      targetList: [ [ 20, 3 ], [ 21, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 2, 3, 0, 3, -2, -2, -2, -2, -2 ], [ 1, 4, 4, 1, 3, 1, 3, 1, 0 ], [ 0, 3, 0, 3, 0, 3, 0, 3, 3 ], [ -2, 0, 2, 0, 3, 2, 0, 2, 0 ], [ -2, 3, 2, 3, 3, 2, 3, 2, 3 ], [ -2, 2, 3, 2, 2, 3, 0, 0, 2 ], [ 2, 2, 0, 3, 0, 3, 0, 3, 2 ], [ 1, 4, 4, 1, 3, 1, 3, 1, 3 ], [ 0, 3, 3, 3, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 0, 30 ], [ 3, 40 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 1 ], [ 2, 2 ] ], [ [ 3, 3 ], [ 4, 6 ] ], [ [ 3, 4 ], [ 3, 5 ] ], [ [ 6, 4 ], [ 7, 7 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 24, 24, 24, 24, 24, 24, 24, -2 ], [ -2, 24, 4, 4, 24, 4, 4, 24, -2 ], [ -2, 24, 24, 24, 24, 24, 24, 24, -2 ], [ -2, 24, 3, 24, 4, 24, 3, 24, -2 ], [ -2, 24, 3, 24, 4, 24, 3, 24, -2 ], [ -2, 24, 24, 24, 4, 24, 24, 24, -2 ], [ -2, 1, 1, 1, 0, 1, 1, 1, -2 ], [ -2, -2, 1, 1, -2, 1, 1, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 15 ], [ 25, 31 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 3, 3 ], [ 4, 6 ] ], [ [ 6, 4 ], [ 7, 7 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 1, 2, 1, -2, -2, -2 ], [ -2, 0, 0, 4, 1, 4, 0, 0, -2 ], [ -2, 4, 1, 3, 2, 3, 1, 4, -2 ], [ -2, 3, 0, 2, 1, 2, 0, 3, -2 ], [ -2, 2, 1, 1, 2, 1, 1, 2, -2 ], [ -2, 1, 0, 0, 1, 0, 0, 1, -2 ], [ -2, 0, 20, -2, 20, -2, 20, 0, -2 ], [ -2, 0, 20, -2, 20, -2, 20, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 20 ], [ 20, 6 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 2 ], [ 1, 3 ] ], [ [ 3, 3 ], [ 4, 6 ] ], [ [ 1, 3 ], [ 2, 6 ] ], [ [ 1, 4 ], [ 4, 5 ] ] ]
    }, {
      mapList: [ [ -2, 0, 0, 2, 2, 2, 0, 0, -2 ], [ -2, 0, 4, 4, 3, 4, 4, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 1, 2, 2, 3, 1, 0, 0 ], [ 0, 27, 2, 1, 27, 3, 2, 27, 0 ], [ 0, 0, 1, 1, 0, 0, 1, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 1, 1, 0, 1, 1, 3, -2 ], [ -2, 3, 3, 4, 4, 4, 3, 3, -2 ] ],
      step: 25,
      targetList: [ [ 0, 20 ], [ 27, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ 0, 0, 0, 3, 3, 3, 0, 0, 0 ], [ 1, 2, 27, 21, 27, 21, 27, 2, 1 ], [ 1, 2, 21, 21, 21, 21, 21, 2, 1 ], [ 1, 2, 27, 21, 27, 21, 27, 2, 1 ], [ -2, 4, 21, 21, 21, 21, 21, 4, -2 ], [ 2, 3, 27, 21, 27, 21, 27, 3, 2 ], [ 2, 3, 21, 21, 21, 21, 21, 3, 2 ], [ 2, 3, 27, 21, 27, 21, 27, 3, 2 ], [ 1, 1, 1, 4, 4, 4, 1, 1, 1 ] ],
      step: 35,
      targetList: [ [ 21, 23 ], [ 27, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 23, 1, 0, 23, 1, 23, -2 ], [ -2, 0, 23, 1, 0, 23, 1, 23, -2 ], [ 1, 0, 23, 1, 0, 23, 1, 23, 1 ], [ 1, 2, 2, 3, 3, 2, 2, 3, 1 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 3, 15 ], [ 21, 14 ], [ 25, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 0, 0, 22, 0, 0, 22, -2 ], [ -2, 22, 0, 0, 23, 0, 0, 22, -2 ], [ -2, 1, 1, 23, 23, 23, 1, 1, -2 ], [ -2, 22, 0, 0, 23, 0, 0, 22, -2 ], [ -2, 22, 0, 0, 22, 0, 0, 22, -2 ], [ -2, 22, 20, 20, 22, 20, 20, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 4 ], [ 25, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 1, 1, 4, 0, 0, -2, -2 ], [ -2, 2, 2, 27, 23, 27, 2, 2, -2 ], [ -2, 0, 23, 23, 23, 23, 23, 0, -2 ], [ -2, 0, 0, 23, 27, 23, 0, 0, -2 ], [ -2, 1, 23, 23, 23, 23, 23, 1, -2 ], [ -2, 1, 1, 27, 23, 27, 1, 1, -2 ], [ -2, -2, 2, 2, 4, 3, 3, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 4, 10 ], [ 25, 14 ], [ 27, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 1, 2, 0, 1, -2, -2, -2 ], [ -2, -2, 3, 3, 2, 3, 3, 3, -2 ], [ -2, 2, 2, 27, 2, 27, 2, 2, -2 ], [ -2, 2, 0, 0, 3, 0, 0, 2, -2 ], [ -2, 1, 27, 2, 3, 2, 27, 1, -2 ], [ -2, 1, 2, 2, 3, 2, 2, 1, -2 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 2, 20 ], [ 20, 5 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 0, 0, 1, 0, 0, 22, -2 ], [ -2, 22, 27, 22, 27, 22, 27, 22, -2 ], [ -2, -2, 0, 0, 1, 0, 0, -2, -2 ], [ -2, 22, 27, 22, 27, 22, 27, 22, -2 ], [ -2, -2, 0, 0, 1, 0, 0, -2, -2 ], [ -2, 22, 27, 1, 27, 22, 27, 22, -2 ], [ -2, 22, 22, 1, 22, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 3, 35 ], [ 0, 35 ], [ 27, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, 0, 3, -2, 0, 3, -2, -2 ], [ -2, 3, 1, 2, 2, 2, 1, 3, -2 ], [ -2, 4, 0, 3, 4, 3, 0, 4, -2 ], [ -2, 3, 1, 2, 2, 2, 1, 3, -2 ], [ -2, -2, -2, 3, 4, 3, -2, -2, -2 ], [ -2, 0, 1, 3, 0, 1, 3, 0, -2 ], [ -2, 3, 2, 2, 3, 2, 2, 3, -2 ], [ -2, 0, 1, 3, 0, 1, 3, 0, -2 ], [ -2, -2, 3, 4, -2, 3, 4, -2, -2 ] ],
      step: 35,
      targetList: [ [ 3, 25 ], [ 4, 15 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 2 ], [ 1, 3 ] ], [ [ 3, 3 ], [ 4, 6 ] ], [ [ 1, 3 ], [ 2, 6 ] ], [ [ 2, 5 ], [ 5, 6 ] ] ]
    }, {
      mapList: [ [ -2, 3, -2, -2, 3, -2, -2, 3, -2 ], [ 1, 2, 3, 2, 0, 2, 3, 2, 1 ], [ -2, 2, 3, 2, 3, 2, 3, 2, -2 ], [ -2, 3, 37, 3, 0, 3, 37, 3, -2 ], [ 0, 0, 3, 0, 3, 0, 3, 0, 0 ], [ -2, 3, 37, 3, 0, 3, 37, 3, -2 ], [ -2, 1, 22, 22, 22, 22, 22, 1, -2 ], [ 20, 1, 3, 1, 0, 1, 3, 1, 20 ], [ -2, 20, -2, -2, 20, -2, -2, 20, -2 ] ],
      step: 35,
      targetList: [ [ 20, 5 ], [ 28, 3 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 2 ], [ 1, 3 ] ], [ [ 1, 3 ], [ 2, 6 ] ], [ [ 2, 5 ], [ 5, 6 ] ] ]
    }, {
      mapList: [ [ -2, 0, 1, 2, 3, 4, 0, 2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 0, 0, 2, 1, 2, 4, 4, -2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 0, 37, 0, 37, 0, 37, 0, 0 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 1, 22, 1, 22, 1, 22, -2 ], [ -2, 20, 1, 20, 1, 20, 1, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 4 ], [ 37, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 0, 21, 21, 21, 0, 21, 21, 21, 0 ], [ 1, 21, 27, 21, 1, 21, 27, 21, 1 ], [ 2, 21, 21, 21, 2, 21, 21, 21, 2 ], [ 2, 21, 21, 21, 2, 21, 21, 21, 2 ], [ 1, 21, 27, 21, 1, 21, 27, 21, 1 ], [ 0, 21, 21, 21, 0, 21, 21, 21, 0 ], [ 1, 2, 1, 0, 2, 1, 0, 3, 2 ], [ 0, 0, 0, 3, 3, 3, 1, 1, 1 ] ],
      step: 45,
      targetList: [ [ 21, 32 ], [ 25, 9 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ 1, 4, 4, 4, 1, 22, 22, -2, -2 ], [ 0, 23, 23, 23, 3, 22, 22, -2, -2 ], [ 0, 23, 27, 23, 3, 22, 22, -2, -2 ], [ 0, 23, 23, 23, 3, 22, 22, -2, -2 ], [ 1, 2, 2, 2, 1, 4, 4, 4, 1 ], [ 2, 3, 0, 4, 3, 23, 23, 23, 0 ], [ 2, 3, 0, 4, 3, 23, 20, 23, 0 ], [ 3, 3, 0, 0, 3, 23, 23, 23, 0 ], [ 1, 1, 1, 0, 1, 0, 0, 0, 1 ] ],
      step: 40,
      targetList: [ [ 20, 1 ], [ 25, 16 ], [ 27, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, 3, 0, 0, 0, 3, -2, -2 ], [ -2, -2, 3, 23, 0, 23, 3, -2, -2 ], [ 22, 22, 4, 23, 0, 23, 4, 22, 22 ], [ 22, 22, 4, -2, -2, -2, 4, 22, 22 ], [ -2, -2, 22, 2, 2, 22, 22, -2, -2 ], [ 22, 22, 22, -2, -2, -2, 22, 22, 22 ], [ 22, 22, 1, 22, 2, 22, 3, 22, 22 ], [ -2, -2, 1, 22, 2, 22, 3, -2, -2 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ] ],
      step: 40,
      targetList: [ [ 20, 5 ], [ 25, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ 1, 0, -2, 2, 2, 2, -2, 0, 1 ], [ 1, 0, -2, 22, 22, 22, -2, 0, 1 ], [ 2, 22, -2, 22, 0, 22, -2, 22, 2 ], [ 1, 0, -2, 22, 0, 22, -2, 0, 1 ], [ 1, 0, -2, 22, 22, 22, -2, 0, 1 ], [ -2, 22, 22, 2, 2, 2, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 0, 25 ], [ 1, 25 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 1 ], [ 6, 2 ] ], [ [ 3, 5 ], [ 6, 6 ] ] ]
    }, {
      mapList: [ [ 0, 1, 0, 1, 0, 1, 0, 1, 0 ], [ 0, 0, 27, 0, 3, 0, 27, 0, 0 ], [ 22, 22, 0, 22, 22, 22, 0, 22, 22 ], [ 0, 2, 0, 2, 0, 2, 0, 2, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 1, 22, 22, 0, 0, 22, 22, 0 ], [ 0, 1, 27, 20, 20, 20, 27, 1, 0 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 6 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 0, 1, 2, 3, 4, 3, 2, 1, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 22, 22, 0, 22, 22, 22, 0, 22, 22 ], [ 0, 27, 0, 27, 0, 27, 1, 27, 0 ], [ 0, 0, 37, 0, 37, 0, 37, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 2, 1, 1, 0, 2, 1, 1, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 25,
      targetList: [ [ 27, 4 ], [ 37, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 1, 2, 22, -2, 22, 22, 22, -2 ], [ -2, 0, 37, 22, -2, 0, 1, 2, -2 ], [ -2, 0, 22, 22, -2, 0, 37, 22, -2 ], [ -2, -2, -2, -2, -2, 22, 22, 22, -2 ], [ -2, 22, 1, 22, -2, -2, -2, -2, -2 ], [ -2, 37, 0, 0, -2, 0, 1, 22, -2 ], [ -2, 22, 22, 22, -2, 0, 37, 22, -2 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 6 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 1, 1, 0, 1, -2, -2, -2 ], [ -2, -2, 3, 3, 0, 1, 1, -2, -2 ], [ -2, 1, 1, 3, 37, 1, 1, 1, 1 ], [ 1, 0, 0, 1, 0, 1, 3, 4, 4 ], [ 1, 37, 2, 1, 0, 37, 3, 1, 1 ], [ 0, 1, 2, 3, 4, 0, 1, 2, -2 ], [ 1, 1, 20, 20, 20, 20, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 4 ], [ 28, 1 ], [ 37, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 3 ], [ 6, 4 ] ] ]
    }, {
      mapList: [ [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, 3, 3, 2, 2, 3, 3, 21, -2 ], [ -2, 0, 0, 1, 1, 0, 0, 21, -2 ], [ -2, 23, 27, 23, 23, 27, 23, 1, -2 ], [ -2, 23, 23, 23, 23, 23, 23, 1, -2 ], [ -2, 23, 27, 23, 23, 27, 23, 1, -2 ], [ -2, 0, 0, 2, 2, 0, 0, 21, -2 ], [ -2, 21, 1, 21, 21, 1, 21, 21, -2 ], [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ] ],
      step: 35,
      targetList: [ [ 4, 15 ], [ 21, 22 ], [ 25, 14 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, 2, 2, 2, -2, 2, 2, 2, -2 ], [ 3, 0, 0, 0, 2, 0, 0, 0, 3 ], [ 3, 22, 22, 22, 2, 22, 22, 22, 3 ], [ 3, 22, 27, 22, 2, 22, 27, 22, 3 ], [ 3, 22, 22, 22, 2, 22, 22, 22, 3 ], [ 4, 1, 1, 1, 2, 1, 1, 1, 4 ], [ 4, 4, 0, 0, 4, 0, 0, 4, 4 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ -2, 20, 20, 20, -2, 20, 20, 20, -2 ] ],
      step: 40,
      targetList: [ [ 1, 15 ], [ 20, 6 ], [ 25, 9 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 21, -2, -2, 21, 21, -2, 21, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 21, -2, -2, 1, 23, 23, 23, -2 ], [ -2, 21, -2, -2, 0, 4, 3, 3, -2 ], [ -2, 21, -2, -2, 23, 23, 23, 23, -2 ], [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, 22, 22, 22, 0, 0, 22, 22, -2 ], [ -2, 23, 0, 0, 23, 23, 0, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 3, 15 ], [ 21, 14 ], [ 25, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 21, 1, 21, 2, 21, 3, 21, -2 ], [ -2, 21, 1, 21, 2, 21, 3, 21, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 2, 2, 2, 22, 22, -2 ], [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, 22, 1, 22, 0, 22, 1, 22, -2 ], [ -2, 20, 1, 20, 0, 20, 1, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 4 ], [ 21, 15 ], [ 28, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 7e3, 14e3, 21e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 4, 3 ], [ 7, 4 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 2, 0, 2, 0, 2, -2, -2 ], [ -2, -2, 2, 0, 27, 0, 2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 1, 1, 2, 2, 2, 1, 1, -2 ], [ -2, 1, 22, 22, 2, 22, 22, 1, -2 ], [ -2, 0, 22, 22, 27, 22, 22, 0, -2 ], [ -2, 0, 3, 3, 2, 3, 3, 1, -2 ], [ -2, -2, 3, 20, 20, 20, 3, -2, -2 ] ],
      step: 35,
      targetList: [ [ 2, 35 ], [ 20, 3 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 1, 2, 3, 4, 0, 22, -2 ], [ -2, 22, 1, 27, 22, 4, 27, 22, -2 ], [ -2, 22, 22, 37, 22, 1, 37, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 22, 4, 3, 4, 22, -2, -2 ], [ -2, -2, 22, 27, 2, 27, 22, -2, -2 ], [ -2, -2, 22, 22, 2, 22, 22, -2, -2 ] ],
      step: 35,
      targetList: [ [ 2, 30 ], [ 27, 4 ], [ 37, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 3, 3, 22, 3, 3, 22, -2 ], [ -2, -2, 22, 22, -2, 22, 22, -2, -2 ], [ -2, 22, 2, 2, 22, 2, 2, 22, -2 ], [ -2, 21, 21, 21, 21, 21, 21, 21, -2 ], [ -2, 21, 21, 1, 1, 1, 21, 21, -2 ], [ -2, -2, 22, 22, 22, 22, 22, -2, -2 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 20, 5 ], [ 21, 11 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 4, 3 ], [ 7, 4 ] ], [ [ 1, 2 ], [ 2, 2 ] ] ]
    }, {
      mapList: [ [ 21, 21, 21, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, -2, 3, 3, 21, 2, 2 ], [ 22, 1, 22, -2, 3, 37, 21, 37, 2 ], [ 21, 1, 21, -2, 0, 37, 21, 37, 0 ], [ 22, 22, 22, -2, 0, 0, 21, 0, 0 ], [ 21, 1, 21, -2, 22, 22, 22, 22, 22 ], [ 22, 1, 22, -2, 21, 20, 20, 20, 21 ], [ 21, 20, 21, -2, -2, -2, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 20, 4 ], [ 21, 18 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 7e3, 14e3, 21e3 ]
    }, {
      mapList: [ [ -2, 1, 22, -2, -2, -2, 22, 1, -2 ], [ -2, 1, 27, -2, -2, -2, 27, 1, -2 ], [ -2, 22, 0, 0, 22, 0, 0, 22, -2 ], [ -2, 1, 22, 22, 22, 22, 22, 1, -2 ], [ -2, 1, 27, 3, 3, 3, 27, 1, -2 ], [ -2, 1, 22, 22, 22, 22, 22, 1, -2 ], [ -2, 22, 22, -2, -2, -2, 22, 22, -2 ], [ -2, 20, 20, -2, -2, -2, 20, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 0, 10 ], [ 20, 4 ], [ 27, 4 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 3 ], [ 3, 4 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [ [ 4, 6 ], [ 5, 6 ] ] ]
    }, {
      mapList: [ [ -2, 22, 22, -2, -2, -2, 22, 22, -2 ], [ -2, 22, 22, -2, -2, -2, 22, 22, -2 ], [ -2, 22, 2, 22, 22, 22, 2, 22, -2 ], [ -2, 22, 2, 22, 22, 22, 2, 22, -2 ], [ -2, 22, 27, -2, -2, -2, 27, 22, -2 ], [ -2, 0, 0, 22, 22, 22, 0, 0, -2 ], [ -2, 0, 37, 1, 1, 1, 37, 0, -2 ], [ -2, -2, 22, 22, 22, 22, 22, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 27, 2 ], [ 28, 4 ], [ 37, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 2 ], [ 2, 2 ] ], [ [ 3, 3 ], [ 3, 4 ] ], [ [ 4, 6 ], [ 5, 6 ] ], [ [ 6, 6 ], [ 6, 7 ] ] ]
    }, {
      mapList: [ [ 22, 1, 22, 22, 22, 22, 1, 22, -2 ], [ 22, 1, 37, 0, 0, 37, 1, 22, -2 ], [ 22, 22, -2, -2, -2, -2, 22, 22, -2 ], [ -2, 2, 2, 2, 22, 2, 2, 2, -2 ], [ 22, 0, 37, 22, 22, 37, 0, 22, -2 ], [ 22, 0, -2, -2, -2, -2, 0, 22, -2 ], [ 21, 21, 21, 21, 21, 21, 22, 22, -2 ], [ -2, 21, 21, 21, 21, 21, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 2, 20 ], [ 21, 11 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 0, 0, 22, 0, 0, 22, 0, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, 0, 0, 22, 0, 37, 22, 0, 37 ], [ -2, -2, -2, -2, -2, 0, 1, 22, 0 ], [ -2, -2, -2, -2, -2, 37, 2, 22, 37 ], [ -2, -2, -2, -2, -2, 1, 1, 22, 2 ], [ -2, 22, 22, 0, 0, 22, 22, 1, 0 ], [ -2, 22, 20, 22, 20, 22, 20, 0, 22 ], [ -2, 0, 20, 0, 20, 0, 20, 22, -2 ] ],
      step: 35,
      targetList: [ [ 0, 30 ], [ 20, 6 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 1, 0, 0, 3, 0, 0, 1, 0 ], [ 1, 1, 22, 22, 22, 22, 22, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 3, 3, 3, 2, 1, 2, 3, 3, 3 ], [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 1, 1, 4, 4, 3, 4, 4, 1, 1 ], [ 0, 1, 0, 0, 3, 0, 0, 1, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 25,
      targetList: [ [ 3, 15 ], [ 38, 27 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, 25, 25, 25, 25, 25, -2, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 22, 0, 0, 22, 1, 1, 22, -2 ], [ -2, 22, 0, 0, 22, 1, 1, 22, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 22, 1, 1, 22, 0, 0, 22, -2 ], [ -2, 22, 1, 1, 22, 0, 0, 22, -2 ], [ -2, 25, 25, 25, 3, 25, 25, 25, -2 ], [ -2, -2, 25, 3, 3, 3, 25, -2, -2 ] ],
      step: 35,
      targetList: [ [ 25, 27 ], [ 38, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 1, 0, 1, 0, 1, 1, -2 ], [ 0, 1, 0, 1, 0, 1, 0, 2, -2 ], [ 1, 2, 1, 0, 3, 1, 4, 1, -2 ], [ 0, 3, 0, 1, 3, 0, 4, 2, -2 ], [ 1, 1, 22, 22, 22, 22, 22, 2, -2 ], [ -2, -2, 1, 20, -2, -2, 20, 1, -2 ], [ -2, -2, 20, 1, -2, -2, 1, 20, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 20, 4 ], [ 28, 3 ], [ 38, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 2 ], [ 4, 3 ] ], [ [ 3, 3 ], [ 3, 4 ] ], [ [ 4, 5 ], [ 7, 6 ] ] ],
      bubbleList: [ [ [ 3, 0 ], [ 4, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 22, 22, 22, -2, 22, 22, 22, 22, 22 ], [ 0, 23, 0, -2, 0, 0, 23, 0, 0 ], [ 0, 1, 0, -2, 0, 0, 1, 0, 0 ], [ 23, 1, 23, -2, 23, 23, 1, 23, 23 ], [ 22, 1, 22, -2, 22, 22, 1, 22, 22 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 2, 22, 2, 22, 22, -2 ], [ -2, 22, 20, 2, 20, 2, 20, 22, -2 ] ],
      step: 40,
      targetList: [ [ 20, 3 ], [ 25, 8 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 1, 2 ] ], [ [ 3, 4 ], [ 4, 7 ] ], [ [ 3, 6 ], [ 4, 6 ] ], [ [ 7, 2 ], [ 8, 5 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 21, 21, 21, -2, -2, -2 ], [ -2, -2, 21, 2, 21, 4, 21, -2, -2 ], [ -2, 1, 23, 21, 21, 21, 23, 1, -2 ], [ 21, 1, 1, 0, 0, 3, 1, 1, 21 ], [ 21, 21, 21, 0, 27, 1, 21, 21, 21 ], [ 21, 21, 21, 2, 1, 1, 21, 21, 21 ], [ -2, 21, 23, 21, 21, 21, 23, 21, -2 ], [ -2, -2, 21, 21, 21, 21, 21, -2, -2 ], [ -2, -2, -2, 21, 21, 21, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 21, 36 ], [ 25, 4 ], [ 27, 1 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 2 ], [ 5, 3 ] ], [ [ 3, 5 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ -2, 22, 1, 22, 1, 22, 1, -2, -2 ], [ -2, 22, 1, 22, 1, 22, 1, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 2, 2, 3, 2, 2, 22, -2 ], [ -2, 22, 0, 22, 0, 22, 0, 22, -2 ], [ -2, 22, 0, 22, 0, 22, 0, 22, -2 ], [ -2, 22, 20, 20, 20, 20, 20, 22, -2 ] ],
      step: 40,
      targetList: [ [ 20, 5 ], [ 38, 14 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 4, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, 1, 1, -2, 1, 1, -2, -2 ], [ -2, -2, 1, 37, -2, 37, 1, -2, -2 ], [ -2, 3, 3, 2, 2, 2, 3, 3, -2 ], [ -2, 23, 23, 23, 23, 23, 23, 23, -2 ], [ -2, 0, 27, 23, 1, 23, 27, 0, -2 ], [ -2, 0, 37, 1, 1, 1, 37, 0, -2 ], [ -2, 3, 3, 2, 2, 2, 3, 3, -2 ], [ -2, 3, -2, -2, -2, -2, -2, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 9 ], [ 27, 2 ], [ 37, 4 ], [ 38, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 4, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 22, 22, 22, 22, 22, -2, -2 ], [ -2, -2, 2, 2, 3, 2, 2, -2, -2 ], [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ], [ 0, 22, 24, 27, 20, 27, 24, 22, 0 ], [ 0, 22, 24, 24, 20, 24, 24, 22, 0 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 1, 1, 1, 3, 0, 0, 0, -2 ], [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 2 ], [ 25, 6 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 2, 2, 3, 2, 2, -2, -2 ], [ -2, 1, 23, 23, 23, 23, 23, 1, -2 ], [ -2, 2, 2, 0, 27, 1, 3, 2, -2 ], [ -2, 1, 37, 1, 37, 1, 37, 1, -2 ], [ -2, 2, 2, 0, 27, 1, 3, 2, -2 ], [ -2, 1, 23, 23, 23, 23, 23, 1, -2 ], [ -2, -2, 1, 1, 2, 0, 0, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 25, 10 ], [ 27, 2 ], [ 28, 2 ], [ 37, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 3, 3 ], [ 4, 3 ] ], [ [ 5, 3 ], [ 6, 6 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 1, 1, 3, 0, 0, -2, -2 ], [ -2, -2, 1, 4, 4, 4, 0, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 27, 2, 2, 2, 27, 22, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, -2, 2, 22, 22, 22, 2, -2, -2 ], [ -2, -2, 2, 1, 1, 1, 2, -2, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 20, 3 ], [ 27, 2 ], [ 38, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 3, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 3, 3, 3, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 3, 1, 3, 22, 2, 1, 0, -2 ], [ -2, 2, 22, 22, 22, 3, 3, 0, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 3, 3, 3, 22, 0, 1, 2, -2 ], [ -2, -2, -2, -2, -2, 0, 3, 3, -2 ] ],
      step: 35,
      targetList: [ [ 3, 25 ], [ 28, 3 ], [ 38, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 3 ], [ 3, 6 ] ], [ [ 5, 5 ], [ 6, 5 ] ], [ [ 7, 6 ], [ 7, 7 ] ] ],
      bubbleList: [ [ [ 0, 1 ], [ 8, 3 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 1, 1, 1, 0, 0, -2 ], [ -2, 0, 21, 21, 21, 21, 21, 0, -2 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ -2, 0, 21, 21, 21, 21, 21, 0, -2 ], [ -2, 0, 0, 1, 1, 1, 0, 0, -2 ], [ -2, 22, 22, 22, 0, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 21, 20 ], [ 38, 28 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 2, 3, 2, 0, 0, -2 ], [ -2, 0, 27, 2, 3, 2, 27, 0, -2 ], [ -2, 3, 3, 23, 23, 23, 3, 3, -2 ], [ -2, 2, 2, 23, 23, 23, 2, 2, -2 ], [ -2, 2, 27, 2, 2, 2, 27, 2, -2 ], [ -2, 1, 1, 25, 25, 25, 1, 1, -2 ], [ -2, 1, 1, 25, 25, 25, 1, 1, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 12 ], [ 27, 4 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 1, 8 ], 1 ], [ [ 2, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 7, 8 ], 2 ], [ [ 8, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 1 ], [ 3, 1 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 4 ], [ 6, 7 ] ] ]
    }, {
      mapList: [ [ 1, 1, 1, 1, 23, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 23, 2, 2, 2, 2 ], [ 0, 0, 23, 23, 23, 23, 23, 0, 0 ], [ 1, 1, 23, 3, 3, 3, 23, 1, 1 ], [ 23, 23, 23, 1, 1, 3, 23, 23, 23 ], [ 1, 1, 23, 1, 1, 3, 23, 1, 1 ], [ 0, 0, 23, 23, 23, 23, 23, 0, 0 ], [ 2, 2, 2, 2, 23, 2, 2, 2, 2 ], [ 1, 1, 1, 1, 23, 1, 1, 1, 1 ] ],
      step: 40,
      targetList: [ [ 25, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 3, 2, 1, 2, 0, 1, 2, 2, 1 ], [ 1, 1, 3, 1, -2, 3, 2, 3, 2 ], [ 1, 2, 1, -2, -2, -2, 1, 2, 1 ], [ 2, 2, -2, -2, 20, -2, -2, 3, 1 ], [ 1, -2, -2, 20, 20, 20, -2, -2, 1 ], [ 0, 4, -2, -2, 20, -2, -2, 2, 2 ], [ 1, 3, 3, -2, -2, -2, 2, 2, 2 ], [ 1, 1, 3, 4, -2, 2, 2, 2, 2 ], [ 4, 3, 2, 3, 1, 1, 2, 2, 2 ] ],
      step: 40,
      targetList: [ [ 2, 20 ], [ 3, 20 ], [ 0, 20 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, 25, 25, 25, 25 ], [ -2, 25, 25, 25, 25, 25, 1, 1, 25 ], [ -2, 25, 4, 4, 2, 0, 0, 1, 25 ], [ -2, 25, 4, 27, 3, 27, 0, 25, 25 ], [ -2, 25, 2, 3, 3, 3, 2, 25, -2 ], [ 25, 25, 1, 27, 3, 27, 4, 25, -2 ], [ 25, 0, 1, 1, 2, 4, 4, 25, -2 ], [ 25, 0, 0, 25, 25, 25, 25, 25, -2 ], [ 25, 25, 25, 25, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 25, 32 ], [ 27, 4 ], [ 38, 25 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, 0, 0, 23, 23, 23, 0, 0, -2 ], [ 0, 0, 37, 23, 23, 23, 37, 0, 0 ], [ -2, 23, 23, 4, 4, 4, 23, 23, -2 ], [ 2, 23, 23, 4, 4, 4, 23, 23, 2 ], [ 2, 2, 37, 1, 37, 1, 37, 2, 2 ], [ 2, 23, 23, 4, 4, 4, 23, 23, 2 ], [ -2, 23, 23, 4, 4, 4, 23, 23, -2 ], [ 0, 0, 37, 23, 23, 23, 37, 0, 0 ], [ -2, 0, 0, 23, 23, 23, 0, 0, -2 ] ],
      step: 45,
      targetList: [ [ 25, 28 ], [ 37, 6 ], [ 38, 34 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, 1, 1, -2, 1, 1, 1, 1, -2 ], [ 3, 21, 21, -2, 21, 21, 21, 21, 3 ], [ 3, 21, 23, -2, 23, 23, 23, 21, 3 ], [ 3, 21, 1, -2, 1, 1, 2, 21, 3 ], [ 1, 21, 21, -2, 21, 21, 2, 21, 1 ], [ 4, 21, 21, -2, 21, 21, 2, 21, 4 ], [ 4, 21, 21, -2, 21, 21, 21, 21, 4 ], [ 4, 0, 0, -2, 1, 0, 0, 0, 4 ], [ -2, 1, 1, -2, 1, 1, 1, 1, -2 ] ],
      step: 45,
      targetList: [ [ 21, 26 ], [ 25, 4 ], [ 38, 30 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 1, 1 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 1, 3 ], [ 1, 2, 1, 3, 2, 0, 1, 3, 1 ], [ 3, 22, 22, 3, 2, 22, 22, 3, 3 ], [ 1, 0, 2, 4, 2, 0, 3, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 1, 3, 1, 21, -2, 21, 1, 3, 1 ], [ 3, 2, 2, 21, -2, 21, 1, 3, 3 ] ],
      step: 40,
      targetList: [ [ 21, 12 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 4e3, 8e3, 12e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 0, 0 ], [ 3, 1 ] ], [ [ 6, 6 ], [ 7, 8 ] ] ]
    }, {
      mapList: [ [ 1, 1, 1, 25, 0, 25, 1, 1, 1 ], [ 2, 2, 2, 25, 0, 25, 2, 2, 2 ], [ 4, 4, 4, 25, 25, 25, 4, 4, 4 ], [ 24, 24, 24, 21, 21, 21, 24, 24, 24 ], [ 0, 0, 24, 21, 3, 21, 24, 0, 0 ], [ 24, 24, 24, 21, 3, 21, 24, 24, 24 ], [ 1, 0, 2, 22, 22, 22, 2, 0, 1 ], [ 1, 0, 2, 22, 20, 22, 2, 0, 1 ], [ 1, 0, 2, 22, 20, 22, 2, 0, 1 ] ],
      step: 35,
      targetList: [ [ 20, 2 ], [ 21, 7 ], [ 25, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, 3, 3, 2, 1, 1 ], [ 3, 3, 2, -2, 3, 3, 2, 1, 1 ], [ 3, 3, 2, -2, 23, 23, 23, 23, 23 ], [ 3, 37, 2, -2, 37, 37, 1, 3, 3 ], [ 23, 37, 23, -2, 2, 2, 1, 3, 3 ], [ 3, 3, 2, -2, 2, 2, 1, 1, 1 ], [ 3, 3, 2, -2, -2, -2, -2, -2, -2 ], [ 22, 22, 22, 37, 22, 22, 22, 22, 22 ], [ 3, 3, 0, 0, 1, 1, 0, 0, 0 ] ],
      step: 45,
      targetList: [ [ 25, 7 ], [ 37, 5 ], [ 38, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ 3, 3, 3, 3, 1, 1, 2, 2, 2 ], [ 2, 2, 2, 2, 37, 37, -2, -2, -2 ], [ -2, -2, -2, -2, 1, 1, -2, 0, 0 ], [ 1, 1, 1, -2, 23, 23, -2, 0, 0 ], [ 23, 37, 23, -2, 3, 3, -2, 37, 37 ], [ 23, 37, 23, -2, 3, 3, -2, 2, 2 ], [ 4, 4, 4, -2, -2, -2, -2, 23, 23 ], [ 1, 1, 1, 3, 0, 0, 0, 4, 4 ], [ 0, 0, 0, 3, 2, 2, 2, 3, 3 ] ],
      step: 40,
      targetList: [ [ 25, 8 ], [ 37, 6 ], [ 38, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ 1, 2, 2, 21, -2, 21, 1, 2, 1 ], [ 3, 1, 1, 21, -2, 21, 3, 3, 2 ], [ 3, 3, 3, 21, -2, 21, 2, 2, 1 ], [ 2, 2, 2, 21, -2, 21, 1, 3, 1 ], [ 1, 22, 3, 21, -2, -2, 21, 21, 22 ], [ 1, 3, 3, 21, 21, -2, -2, 21, 1 ], [ 22, 4, 4, 1, 2, 21, -2, -2, 21 ], [ 1, 4, 2, 2, 1, 1, 21, -2, -2 ], [ 2, 2, 1, 1, 2, 2, 2, 21, -2 ] ],
      step: 40,
      targetList: [ [ 1, 30 ], [ 2, 25 ], [ 21, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 11e3, 22e3, 33e3 ]
    }, {
      mapList: [ [ 0, 2, 1, 3, 0, 24, -2, 0, 0 ], [ 0, 2, 1, 3, 0, 24, -2, 1, 1 ], [ 24, 24, 24, 24, 24, 24, -2, 1, 1 ], [ 0, 0, 1, 2, 3, 24, -2, 4, 4 ], [ -2, -2, -2, -2, -2, -2, -2, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, 24, 24 ], [ 24, 24, 24, 24, 24, 24, -2, 0, 0 ], [ 0, 1, 2, 3, 4, 24, -2, 21, 21 ], [ 0, 1, 2, 3, 4, 24, -2, 21, 21 ] ],
      step: 35,
      targetList: [ [ 21, 4 ], [ 25, 19 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, 3, 3, 3, 3, 3, -2, -2 ], [ 0, 0, 4, 0, 4, 0, 4, 0, 0 ], [ 1, 1, 27, 1, 4, 1, 27, 1, 1 ], [ 2, 2, 4, 2, 4, 0, 4, 0, 0 ], [ 3, 3, 3, 3, 27, 3, 3, 3, 3 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 0 ], [ 1, 21, 27, 21, 21, 21, 27, 21, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, 2, 2, 2, 0, 0, 0, 0, -2 ] ],
      step: 35,
      targetList: [ [ 21, 12 ], [ 27, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 3, 3, 1, 0, 2, 0, 1, 3, 3 ], [ 3, 27, 1, 0, 2, 0, 1, 27, 3 ], [ 0, 0, 4, 4, 4, 4, 4, 0, 0 ], [ 1, 1, 2, 0, 2, 0, 2, 1, 1 ], [ 2, 2, 1, 0, 2, 0, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 1, 1, 2, -2, 2, 1, 1, 0 ], [ 0, 27, 2, 2, -2, 2, 2, 27, 0 ], [ 20, 20, 20, 20, -2, 20, 20, 20, 20 ] ],
      step: 45,
      targetList: [ [ 20, 8 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 22, 22, 3, 22, 0, 22, 22, 1 ], [ 1, -2, 2, -2, 1, -2, 1, -2, 1 ], [ 3, -2, 2, -2, 0, -2, 1, -2, 3 ], [ 2, -2, 3, -2, 2, -2, 0, -2, 1 ], [ 20, -2, 20, -2, 20, -2, 20, -2, 20 ] ],
      step: 35,
      targetList: [ [ 2, 30 ], [ 3, 30 ], [ 20, 5 ], [ 38, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 4, 8 ], 1 ] ]
    }, {
      mapList: [ [ 1, 1, 1, 2, 2, 2, 1, 1, 1 ], [ 4, 4, 4, 3, 3, 3, 24, 24, 24 ], [ 0, 0, 0, 4, 2, 2, 0, 0, 0 ], [ 3, 3, 3, 4, 24, 24, 24, 21, 21 ], [ 24, 24, 24, 4, 0, 0, 0, 21, 21 ], [ 0, 0, 0, 21, 21, 21, 21, 21, 21 ], [ 1, 21, 24, 24, 24, 1, 1, 1, 2 ], [ 1, 21, 0, 0, 0, 1, 24, 24, 24 ], [ 21, 21, 21, 21, 21, 21, 0, 0, 0 ] ],
      step: 45,
      targetList: [ [ 21, 18 ], [ 25, 15 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 0 ], [ 4, 1 ] ], [ [ 1, 4 ], [ 4, 5 ] ], [ [ 5, 2 ], [ 8, 3 ] ], [ [ 5, 5 ], [ 8, 6 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 0, 0, 23, 0, 0, 0, 0 ], [ 0, 21, 21, 21, 23, 21, 21, 21, 0 ], [ 0, 1, 1, 21, 23, 1, 1, 21, 0 ], [ 23, 21, 21, 21, 23, 21, 21, 21, 23 ], [ 0, 21, 1, 1, 23, 21, 1, 1, 0 ], [ 0, 21, 21, 21, 23, 21, 21, 21, 0 ], [ 0, 0, 0, 0, 23, 0, 0, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 21, 22 ], [ 25, 9 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 1, 1 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 1, 4 ], [ 4, 5 ] ], [ [ 4, 1 ], [ 7, 2 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
    }, {
      mapList: [ [ 0, 27, 0, 1, 1, 1, 4, 27, 4 ], [ 0, 0, 0, 1, 1, 1, 4, 4, 4 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 0, 0, 0, 0, 1, 1, 1, 1, 21 ], [ 22, 22, 21, 21, 21, 21, 21, 21, 21 ], [ -2, 22, 22, 22, 1, 1, 1, 1, 21 ], [ -2, 2, 2, 22, 21, 21, 21, 21, 21 ], [ -2, 2, 2, 22, 22, 22, 22, 3, 21 ], [ -2, -2, -2, -2, -2, -2, 22, 3, 22 ] ],
      step: 40,
      targetList: [ [ 21, 24 ], [ 27, 2 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 4, 4 ], [ 5, 4 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 1, 0, 3, 1, 4, 3 ], [ -2, -2, -2, 1, 2, 4, 2, 3, 1 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ], [ 2, 2, 21, 3, 1, 1, 1, 3, 1 ], [ 1, 2, 21, 4, 3, 2, 1, 2, 2 ], [ 1, 3, 21, 3, 2, 3, 1, 1, 1 ], [ 1, 3, 21, 1, 2, 2, -2, -2, -2 ], [ 2, 2, 21, 2, 1, 1, -2, -2, -2 ], [ 2, 3, 21, 20, 20, 20, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 20 ], [ 2, 20 ], [ 20, 3 ], [ 21, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 0, 0, 0, -2, 3, -2, -2, -2, 3 ], [ 2, 1, 2, -2, 3, 22, 22, 22, 3 ], [ 1, 27, 1, 0, 3, 2, 27, 2, 3 ], [ 2, 1, 2, 0, 2, 2, 4, 2, 2 ], [ 3, 3, 3, 4, 1, 1, 4, 1, 1 ], [ 0, 0, 0, 4, 1, 0, 0, 0, 1 ], [ 4, 27, 4, 0, 2, 23, 23, 23, 2 ], [ 1, 1, 1, 0, 2, 20, 20, 20, 2 ], [ 2, 2, 2, -2, 2, -2, -2, -2, 2 ] ],
      step: 40,
      targetList: [ [ 20, 3 ], [ 25, 3 ], [ 27, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 2, 2, 1, 0, 3, -2, -2, -2 ], [ 3, 1, 1, 1, 2, 4, -2, -2, -2 ], [ 3, 3, 3, 0, 1, 2, -2, -2, -2 ], [ 2, 2, 2, 3, 1, 1, 1, 3, 1 ], [ 1, 2, 3, 4, 3, 2, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, -2, -2, 1, 2, 2, 3, 1, 3 ], [ -2, -2, -2, 2, 1, 1, 3, 3, 2 ], [ -2, -2, -2, 20, 20, 20, 20, 20, 20 ] ],
      step: 40,
      targetList: [ [ 2, 20 ], [ 4, 15 ], [ 20, 6 ], [ 38, 27 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, 1, 1, -2, -2, -2, 2, 2, -2 ], [ -2, 1, 1, -2, -2, -2, 2, 2, -2 ], [ 1, 27, 1, 0, 0, 0, 2, 27, 2 ], [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ], [ 0, 0, 4, 1, 1, 0, 0, 2, 2 ], [ 0, 21, 4, 21, 1, 21, 0, 21, 2 ], [ 25, 4, 25, 3, 25, 2, 25, 1, 25 ], [ 0, 22, 1, 22, 2, 22, 3, 22, 4 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 21, 4 ], [ 25, 5 ], [ 27, 2 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 3, 6 ], [ 6, 7 ] ] ]
    }, {
      mapList: [ [ 3, 3, 3, 3, 3, 3, 1, 4, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 2, 3, 2, 0, 2, 3, -2 ], [ 2, 2, 2, -2, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 3, 1, 2, 3, 0, -2, 1, 1, 3 ], [ 2, 3, 3, 2, 2, 2, 0, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 20, 20, 20, 20, 20, 20, 20, 20, 20 ] ],
      step: 35,
      targetList: [ [ 3, 25 ], [ 4, 20 ], [ 20, 9 ], [ 38, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ 2, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 1, 1, 1, 3, 0, 0, 3, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 1, 3, 4, 0, 0, 0, 0, 3 ], [ 1, 1, 3, 4, 0, 1, 1, 1, 3 ], [ 1, 0, 0, 4, 2, 0, 0, 1, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ] ],
      step: 40,
      targetList: [ [ 2, 20 ], [ 3, 20 ], [ 4, 10 ], [ 21, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 1, 0, 0, 25, 0, 0, 1, 0 ], [ 1, 1, 1, 25, 25, 25, 1, 1, 1 ], [ 2, 27, 25, 1, 1, 1, 25, 27, 2 ], [ 2, 25, 2, 2, 2, 2, 2, 25, 2 ], [ 2, 25, 2, 2, 2, 2, 2, 25, 2 ], [ 2, 25, 1, 1, 25, 1, 1, 25, 2 ], [ 2, 27, 25, 25, -2, 25, 25, 27, 2 ], [ 0, -2, 0, 0, -2, 0, 0, -2, 0 ] ],
      step: 30,
      targetList: [ [ 25, 17 ], [ 27, 4 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 3, 1 ], [ 6, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ -2, 2, 2, 2, 2, 2, 2, 2, -2 ], [ -2, 2, 1, 1, 1, 1, 1, 2, -2 ], [ 1, 2, 1, 0, 0, 0, 1, 2, 1 ], [ 1, 23, 23, 23, 27, 23, 23, 23, 1 ], [ 1, 23, 20, 23, 23, 23, 20, 23, 1 ], [ 1, 23, 23, 23, 27, 23, 23, 23, 1 ], [ 1, 2, 1, 0, 0, 0, 1, 2, 1 ], [ 1, 2, 1, 1, 1, 1, 1, 2, 1 ], [ -2, 2, 2, 2, 2, 2, 2, 2, -2 ] ],
      step: 40,
      targetList: [ [ 20, 2 ], [ 25, 17 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 3, 3, 0, 0, 0, 3, 3, -2 ], [ -2, 3, 3, 0, 0, 0, 3, 3, -2 ], [ 2, 24, 24, 24, 24, 24, 24, 24, 2 ], [ 1, 4, 0, 0, 4, 0, 0, 4, 1 ], [ 0, 27, 0, 1, 27, 0, 2, 27, 0 ], [ 2, 24, 24, 24, 24, 24, 24, 24, 2 ], [ 2, 0, 0, 3, 3, 0, 0, 0, 2 ], [ 2, 0, 0, 3, 3, 0, 0, 0, 2 ], [ -2, 20, 20, -2, -2, -2, 20, 20, -2 ] ],
      step: 45,
      targetList: [ [ 20, 4 ], [ 25, 14 ], [ 27, 3 ], [ 28, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 3 ], [ 7, 5 ] ] ]
    }, {
      mapList: [ [ 1, 3, 2, 1, 2, 2, 1, 4, 3 ], [ 1, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 3, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 2, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 1, 21, 21, -2, -2, -2, 21, 21, 1 ], [ 2, 2, 2, 2, 1, 3, 1, 1, 2 ], [ 2, 3, 3, 20, 20, 20, 3, 1, 2 ] ],
      step: 40,
      targetList: [ [ 4, 15 ], [ 20, 3 ], [ 21, 16 ], [ 38, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 1, 0 ], [ 2, 8 ], 1 ] ]
    }, {
      mapList: [ [ 0, 0, 0, 2, -2, 2, 0, 0, 0 ], [ 1, 1, 1, 2, -2, 2, 1, 1, 1 ], [ 0, 0, 26, 2, -2, 2, 26, 0, 5 ], [ 3, 0, 0, 0, 3, 0, 0, 0, 3 ], [ 4, 0, 4, 4, 3, 4, 4, 0, 4 ], [ 3, 3, 0, 0, 3, 0, 0, 3, 3 ], [ 0, 0, 26, 0, 3, 0, 26, 0, 5 ], [ 1, 1, 1, 0, -2, 0, 2, 2, 2 ], [ 2, 2, 2, 0, -2, 0, 1, 1, 1 ] ],
      step: 35,
      targetList: [ [ 26, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ 4, 4, 22, 4, 4, 4, 4, 22, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 3, 22, 3, 3, 3, 3, 22, 2 ], [ 22, 22, 26, 22, 22, 22, 22, 26, 22 ], [ 2, 2, 22, 2, 2, 2, 2, 22, 2 ], [ 22, 22, 26, 22, 22, 22, 22, 26, 22 ], [ 1, 1, 22, 1, 1, 1, 1, 22, 2 ], [ 22, 22, 26, 22, 22, 22, 22, 26, 22 ], [ 0, 0, 22, 0, 0, 0, 0, 22, 2 ] ],
      step: 50,
      targetList: [ [ 0, 10 ], [ 1, 10 ], [ 2, 10 ], [ 26, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 1, 22, 22, 22, 4, 22, 22, 22, 1 ], [ 1, 22, 0, 22, 4, 22, 0, 22, 1 ], [ 1, 22, 22, 22, 4, 22, 22, 22, 1 ], [ 1, 22, 0, 22, 4, 22, 0, 22, 1 ], [ 1, 22, 22, 22, 4, 22, 22, 22, 1 ], [ 25, 25, 25, 1, 1, 1, 25, 25, 25 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 15 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 1, 1 ], [ 7, 7 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 5, 5 ], [ 8, 6 ] ], [ [ 4, 1 ], [ 7, 2 ] ] ]
    }, {
      mapList: [ [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ 0, 22, 26, 22, 0, 22, 27, 22, 0 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ -2, 1, 1, 1, 2, 1, 1, 1, -2 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ 0, 22, 27, 22, 0, 22, 26, 22, 0 ], [ 0, 22, 22, 22, 0, 22, 22, 22, 0 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ] ],
      step: 40,
      targetList: [ [ 26, 2 ], [ 27, 2 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 1, 5 ], [ 4, 6 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 5 ], [ 8, 6 ] ] ]
    }, {
      mapList: [ [ 3, 0, 1, 0, 0, 0, 1, 0, 3 ], [ 3, 1, 26, 1, 0, 1, 26, 1, 3 ], [ 3, 0, 1, 0, 0, 0, 1, 0, 3 ], [ 1, 22, 22, 22, 1, 25, 25, 25, 1 ], [ 1, 22, 27, 22, 1, 25, 27, 25, 1 ], [ 1, 22, 22, 22, 1, 25, 25, 25, 1 ], [ 0, 0, 0, 0, -2, 0, 0, 0, 0 ], [ 0, 20, 20, 20, -2, 20, 20, 20, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 50,
      targetList: [ [ 20, 6 ], [ 26, 2 ], [ 27, 2 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ] ],
      stoneList: [ [ [ 0, 0 ], [ 3, 1 ] ], [ [ 0, 4 ], [ 1, 4 ] ], [ [ 4, 2 ], [ 7, 3 ] ], [ [ 4, 5 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ 0, 0, 0, 24, 2, 24, 1, 1, 1 ], [ 0, 0, 0, 24, 2, 24, 1, 1, 1 ], [ 0, 0, 0, 24, 2, 24, 1, 1, 1 ], [ 24, 24, 24, 4, 4, 4, 24, 24, 24 ], [ 1, 1, 1, 0, 0, 0, 3, 3, 3 ], [ 24, 24, 24, 4, 4, 4, 24, 24, 24 ], [ 2, 2, 2, 24, 2, 24, 3, 3, 3 ], [ 2, 2, 2, 24, 2, 24, 3, 3, 3 ], [ 2, 2, 2, 24, 2, 24, 3, 3, 3 ] ],
      step: 35,
      targetList: [ [ 25, 24 ], [ 4, 20 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, -2, -2, 1, 2, 0, -2, -2, 1 ], [ 3, -2, -2, 0, 1, 2, -2, -2, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 2, 0, 1, 3, 1 ], [ 1, 3, 3, 22, 22, 22, 22, 1, 1 ], [ 1, -2, -2, 1, 2, 3, -2, -2, 3 ], [ 2, -2, -2, 2, 1, 2, -2, -2, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 2 ] ],
      step: 40,
      targetList: [ [ 3, 20 ], [ 2, 20 ], [ 4, 10 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 25, 25, -2, -2, -2, -2, -2, 25, 25 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ -2, 1, 25, 0, 0, 0, 25, 1, -2 ], [ 22, 1, 0, 25, 21, 25, 0, 1, 22 ], [ 22, 1, 0, 21, 25, 21, 0, 1, 22 ], [ 22, 1, 0, 25, 21, 25, 0, 1, 22 ], [ -2, 1, 25, 0, 0, 0, 25, 1, -2 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ 25, 20, 20, -2, -2, -2, 20, 20, 25 ] ],
      step: 50,
      targetList: [ [ 2, 15 ], [ 20, 4 ], [ 21, 4 ], [ 25, 23 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, 0, 22, 22, 22, 0, -2, -2 ], [ -2, 0, 0, 22, 22, 22, 0, 0, -2 ], [ 22, 22, 1, 1, 1, 1, 1, 22, 22 ], [ 22, 22, 3, 4, 26, 4, 3, 22, 22 ], [ 22, 22, 3, 26, 26, 26, 3, 22, 22 ], [ 22, 22, 3, 4, 26, 4, 3, 22, 22 ], [ 22, 22, 1, 1, 1, 1, 1, 22, 22 ], [ -2, 0, 0, 22, 22, 22, 0, 0, -2 ], [ -2, -2, 0, 22, 22, 22, 0, -2, -2 ] ],
      step: 40,
      targetList: [ [ 26, 5 ], [ 38, 25 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 25, 25, 4, 4, 4, 25, 25, -2 ], [ -2, 25, 25, 1, 1, 1, 25, 25, -2 ], [ -2, 4, 0, 26, 1, 26, 3, 4, -2 ], [ -2, 4, 0, 0, 26, 3, 3, 4, -2 ], [ -2, 4, 0, 26, 2, 26, 3, 4, -2 ], [ -2, 25, 25, 2, 2, 2, 25, 25, -2 ], [ -2, 25, 25, 4, 4, 4, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 16 ], [ 26, 5 ], [ 38, 25 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ 22, 0, 0, 2, 2, 2, 0, 0, 22 ], [ 22, 4, 26, 3, 27, 3, 26, 4, 22 ], [ 22, 4, 1, 3, 3, 3, 1, 4, 22 ], [ 22, 1, 26, 1, 27, 1, 26, 1, 22 ], [ 22, 4, 1, 3, 3, 3, 1, 4, 22 ], [ 22, 4, 26, 3, 27, 3, 26, 4, 22 ], [ 22, 0, 0, 2, 2, 2, 0, 0, 22 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ] ],
      step: 40,
      targetList: [ [ 26, 6 ], [ 27, 3 ], [ 38, 25 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ 21, 21, 21, 21, 22, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 22, 21, 21, 21, 21 ], [ 1, 1, 1, 1, 22, 0, 0, 0, 0 ], [ 25, 25, 25, 25, 22, 25, 25, 25, 25 ], [ 22, 22, 26, 22, 22, 22, 26, 22, 22 ], [ 25, 25, 25, 25, 22, 25, 25, 25, 25 ], [ 1, 1, 1, 1, 22, 0, 0, 0, 0 ], [ 30, 30, 31, 31, 22, 29, 29, 30, 30 ], [ 0, 0, 0, 2, 22, 2, 0, 0, 1 ] ],
      step: 45,
      targetList: [ [ 21, 16 ], [ 25, 12 ], [ 26, 2 ], [ 38, 27 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ 3, -2, -2, 2, 0, 2, -2, -2, 1 ], [ 1, -2, -2, 1, 0, 3, -2, -2, 2 ], [ 1, -2, -2, -2, -2, -2, -2, 2, 1 ], [ 2, -2, -2, -2, -2, -2, -2, 3, 1 ], [ 1, 2, 3, 4, -2, -2, 3, 2, 1 ], [ 21, 21, 21, 21, -2, -2, 1, 2, 2 ], [ 1, 3, 3, 4, -2, -2, 21, 21, 21 ], [ 1, 1, 3, 4, -2, -2, 21, 21, 21 ], [ 4, 3, 2, 3, -2, -2, 21, 21, 21 ] ],
      step: 40,
      targetList: [ [ 3, 10 ], [ 4, 20 ], [ 0, 5 ], [ 21, 13 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 3, 2, 1, 2, 0, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 0, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 2, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 3, 2, 2, 3, 1 ], [ 1, 2, 3, 4, 3, 2, 3, 2, 1 ], [ 0, 4, 1, 4, 2, 1, 1, 2, 2 ], [ 1, 3, 3, 2, 3, 3, 2, 2, 2 ], [ 1, 1, 3, 4, 2, 2, 2, 2, 2 ], [ 4, 3, 2, 3, 1, 1, 2, 2, 2 ] ],
      step: 50,
      targetList: [ [ 0, 30 ], [ 3, 30 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ 2, 25, 26, 25, 25, 25, 26, 25, 2 ], [ 2, 25, 25, 3, 3, 3, 25, 25, 2 ], [ 3, 3, 26, 3, 26, 3, 26, 3, 3 ], [ 2, 25, 25, 3, 3, 3, 25, 25, 2 ], [ 2, 25, 26, 25, 25, 25, 26, 25, 2 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ] ],
      step: 40,
      targetList: [ [ 25, 26 ], [ 26, 7 ], [ 28, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 1, 4 ], [ 2, 4 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 4 ], [ 8, 5 ] ], [ [ 5, 7 ], [ 8, 8 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 2, 21, 3, -2, -2, -2 ], [ -2, -2, 1, 21, 0, 21, 2, -2, -2 ], [ -2, 2, 21, 3, 2, 2, 21, 2, -2 ], [ 2, 21, 1, 3, 3, 2, 2, 21, 1 ], [ 21, 21, 21, 4, 3, 2, 21, 21, 21 ], [ 0, 4, 21, 4, 2, 1, 21, 2, 2 ], [ 1, 3, 21, 2, 3, 3, 21, 2, 2 ], [ 1, 1, 21, 4, 2, 2, 21, 2, 2 ], [ 4, 3, 21, 21, 21, 21, 21, 2, 2 ] ],
      step: 50,
      targetList: [ [ 2, 20 ], [ 3, 20 ], [ 0, 20 ], [ 21, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 3, 2, 1, 2, 21, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 21, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 21, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 21, 2, 2, 3, 1 ], [ 22, 22, 22, 22, 21, 22, 22, 22, 22 ], [ 0, 4, 1, 4, 21, 1, 1, 2, 2 ], [ 1, 3, 3, 2, 21, 3, 2, 2, 2 ], [ 1, 1, 3, 4, 21, 2, 2, 2, 2 ], [ 20, 20, 20, 20, 21, 20, 20, 20, 20 ] ],
      step: 45,
      targetList: [ [ 3, 20 ], [ 4, 20 ], [ 20, 8 ], [ 21, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ], [ 0, 2, 2, 2, 25, 2, 2, 2, 0 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 3, 3, 25, 26, 26, 26, 25, 3, 3 ], [ 25, 25, 25, 26, 27, 26, 25, 25, 25 ], [ 3, 3, 25, 26, 26, 26, 25, 3, 3 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 1, 2, 2, 2, 25, 2, 2, 2, 1 ], [ 1, 1, 1, 1, 25, 1, 1, 1, 1 ] ],
      step: 40,
      targetList: [ [ 25, 24 ], [ 26, 8 ], [ 27, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 21, 2, 2, 2, 0, 2, 2, 2, 21 ], [ 21, 21, 2, 1, 0, 2, 2, 21, 21 ], [ 21, 21, 21, 2, 0, 2, 21, 21, 21 ], [ 21, 21, 21, 21, 2, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 2, 21, 21, 21, 21 ], [ 21, 21, 21, 3, 3, 3, 21, 21, 21 ], [ 21, 21, 3, 3, 4, 3, 3, 21, 21 ], [ 21, 2, 2, 2, 2, 4, 2, 2, 21 ] ],
      step: 50,
      targetList: [ [ 2, 20 ], [ 3, 15 ], [ 21, 49 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ], [ 0, 2, 2, 2, 25, 2, 2, 2, 0 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 3, 3, 25, 27, 25, 27, 25, 3, 3 ], [ 25, 25, 25, 25, 27, 25, 25, 25, 25 ], [ 3, 3, 25, 27, 25, 27, 25, 3, 3 ], [ 3, 3, 25, 25, 25, 25, 25, 3, 3 ], [ 1, 2, 2, 2, 25, 2, 2, 2, 1 ], [ 1, 1, 1, 1, 25, 1, 1, 1, 1 ] ],
      step: 45,
      targetList: [ [ 25, 28 ], [ 27, 5 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 0, 8 ], 1 ], [ [ 1, 0 ], [ 7, 8 ], 2 ], [ [ 8, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 5 ], [ 8, 6 ] ] ]
    }, {
      mapList: [ [ 3, 2, 1, 2, 21, 2, 2, 2, 1 ], [ 1, 2, 1, 1, 21, 3, 2, 2, 2 ], [ 1, 2, 1, 3, 21, 2, 1, 2, 1 ], [ 2, 2, 1, 3, 21, 2, 2, 3, 1 ], [ 1, 2, 3, 4, 21, 2, 3, 2, 1 ], [ 0, 4, 20, 22, 21, 22, 20, 2, 2 ], [ 1, 3, 22, 20, 21, 20, 22, 3, 2 ], [ 1, 1, 20, 21, 21, 21, 20, 2, 2 ], [ 4, 3, 20, 20, 21, 20, 20, 2, 2 ] ],
      step: 50,
      targetList: [ [ 2, 20 ], [ 3, 15 ], [ 20, 10 ], [ 21, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, 0, 1, 1, 2, 2, 1, 3 ], [ -2, -2, 0, 26, 2, 4, 26, 1, 3 ], [ -2, -2, 3, 3, 2, 4, 3, 0, 0 ], [ 3, 3, 37, 4, 4, 37, 3, -2, -2 ], [ 23, 23, 23, 23, 23, 23, 23, -2, -2 ], [ 3, 3, 37, 2, 2, 37, 3, -2, -2 ], [ -2, -2, 1, 1, 3, 4, 3, 3, 3 ], [ -2, -2, 0, 26, 3, 4, 26, 0, 5 ], [ -2, -2, 0, 1, 1, 2, 2, 3, 3 ] ],
      step: 45,
      targetList: [ [ 25, 7 ], [ 26, 4 ], [ 38, 35 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 1, 2 ], [ 7, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, -2, 22, 22, 22, -2 ], [ -2, 22, 2, 2, -2, 2, 2, 22, -2 ], [ -2, 22, 2, 26, 3, 26, 2, 22, -2 ], [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ], [ -2, 22, 2, 26, 3, 26, 2, 22, -2 ], [ -2, 22, 2, 2, -2, 2, 2, 22, -2 ], [ -2, 22, 22, 22, -2, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 26, 4 ], [ 38, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 3, 3 ], [ 5, 5 ], 1 ] ]
    }, {
      mapList: [ [ 1, 25, 25, 25, 25, 25, 25, 0, -2 ], [ 1, -2, -2, -2, -2, -2, -2, 0, -2 ], [ 0, 0, 25, 25, 25, 25, 25, 1, -2 ], [ 3, 3, -2, -2, -2, -2, -2, 1, -2 ], [ 3, 3, 3, 25, 25, 25, 25, 2, -2 ], [ 1, 1, 1, -2, -2, -2, -2, 2, -2 ], [ 1, 1, 1, 1, 25, 25, 25, 3, -2 ], [ 0, 0, 0, 0, -2, -2, -2, 3, -2 ], [ 0, 0, 0, 0, 0, 4, 4, 4, -2 ] ],
      step: 40,
      targetList: [ [ 25, 18 ], [ 38, 31 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ 2, 2, 3, 21, 37, 21, -2, 3, 3 ], [ 2, 2, 3, 21, 37, 21, -2, 3, 3 ], [ -2, -2, -2, 0, 3, 1, -2, 4, 4 ], [ 21, 21, 21, 0, 26, 1, 21, 21, 21 ], [ 21, 37, 37, 0, 3, 1, 37, 37, 21 ], [ 21, 21, 21, 21, 37, 21, 21, 21, 21 ], [ 4, 4, -2, 21, 37, 21, -2, -2, -2 ], [ 3, 3, -2, 1, 1, 4, 1, 4, 4 ], [ 3, 3, -2, 1, 1, 4, 1, 4, 4 ] ],
      step: 45,
      targetList: [ [ 21, 22 ], [ 26, 1 ], [ 38, 27 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 3, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ 25, 25, 2, 2, 2, 25, 25, -2, -2 ], [ 0, 0, 1, 2, 1, 0, 0, -2, -2 ], [ 0, 26, 1, 26, 1, 26, 0, 25, -2 ], [ 25, 1, 1, 25, 25, 3, 3, 25, 25 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 1, 1, 25, 25, 3, 3, 25, 25 ], [ 0, 26, 1, 26, 1, 26, 0, 25, -2 ], [ 0, 0, 1, 2, 1, 0, 0, -2, -2 ], [ 25, 25, 2, 2, 2, 25, 25, -2, -2 ] ],
      step: 45,
      targetList: [ [ 25, 20 ], [ 26, 6 ], [ 38, 34 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 2, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 1, 22, 22, 22, 1, 0, 0 ], [ 22, 26, 1, 37, 22, 37, 1, 26, 22 ], [ 22, 22, 4, 4, 22, 3, 3, 22, 22 ], [ 22, 37, 22, 26, 1, 26, 22, 37, 22 ], [ 22, 22, 4, 4, 1, 3, 3, 22, 22 ], [ 22, 26, 2, 37, 22, 37, 1, 26, 22 ], [ 1, 1, 2, 22, 22, 22, 1, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 26, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 37, 22, 22, 22, 22, 22, 37, -2 ], [ -2, 22, 2, 2, 2, 2, 3, 22, -2 ], [ -2, 22, 1, 23, 23, 23, 3, 22, -2 ], [ -2, 22, 1, 23, 27, 23, 3, 22, -2 ], [ -2, 22, 1, 23, 23, 23, 3, 22, -2 ], [ -2, 22, 1, 0, 0, 0, 0, 22, -2 ], [ -2, 37, 22, 22, 22, 22, 22, 37, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 50,
      targetList: [ [ 25, 8 ], [ 27, 1 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 7, 8 ], 1 ], [ [ 3, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 4, 1 ], [ 7, 2 ] ], [ [ 4, 4 ], [ 7, 5 ] ] ]
    }, {
      mapList: [ [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ], [ 0, 37, 1, 1, 37, 1, 1, 37, 0 ], [ 0, 22, 2, 2, 22, 2, 2, 22, 0 ], [ 22, 37, 3, 3, 37, 3, 3, 37, 22 ], [ 1, 1, 1, 26, 26, 26, 1, 1, 1 ], [ 22, 37, 3, 3, 37, 3, 3, 37, 22 ], [ 0, 22, 2, 2, 22, 2, 2, 22, 0 ], [ 0, 37, 1, 1, 37, 1, 1, 37, 0 ], [ 0, 22, 22, 22, 22, 22, 22, 22, 0 ] ],
      step: 40,
      targetList: [ [ 26, 3 ], [ 38, 54 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 1, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 1, 2, 2, 3, 2, 0, 1, 3, 1 ], [ 3, 2, 22, 3, 22, 0, 22, 3, 3 ], [ 1, 0, 0, 4, 2, 0, 0, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 1, 3, 1, 21, -2, 21, 1, 3, 1 ], [ 3, 2, 2, 21, -2, 21, 1, 3, 3 ] ],
      step: 35,
      targetList: [ [ 1, 10 ], [ 2, 15 ], [ 21, 12 ], [ 38, 27 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 1, 0 ], [ 3, 8 ], 1 ] ]
    }, {
      mapList: [ [ 2, 2, 2, 2, 25, 3, 3, 3, 3 ], [ 21, 21, 21, 21, 25, 21, 21, 21, 21 ], [ 4, 0, 1, 2, 25, 2, 1, 0, 4 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 0, 0, 0, 25, 1, 1, 1, 1 ], [ 22, 22, 22, 22, 25, 22, 22, 22, 22 ], [ 2, 2, 20, 20, 20, 20, 20, 2, 2 ], [ 2, 2, 20, -2, -2, -2, 20, 2, 2 ], [ 20, 20, 20, -2, -2, -2, 20, 20, 20 ] ],
      step: 50,
      targetList: [ [ 2, 20 ], [ 20, 13 ], [ 21, 8 ], [ 25, 14 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 3, 2, 2, 3, 2, 0, 1, -2, 3 ], [ 1, 2, 2, 3, 2, 0, -2, 3, 1 ], [ 2, 22, 22, 3, 1, -2, 22, 22, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 3, 2, 2, -2, 2, 0, 3, 1, 3 ], [ 2, 2, -2, 3, 1, 3, 1, 3, 1 ], [ 1, -2, 2, 3, 1, 0, 1, 3, 1 ], [ 2, 2, 20, 20, 20, 20, 1, 3, 3 ] ],
      step: 35,
      targetList: [ [ 3, 20 ], [ 2, 20 ], [ 20, 4 ], [ 38, 32 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 1, 0 ], [ 4, 8 ], 1 ] ]
    }, {
      mapList: [ [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ], [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ], [ 1, 1, 22, 22, 22, 22, 22, 1, 1 ], [ 1, 1, 22, 26, 26, 26, 22, 1, 1 ], [ -2, -2, 22, 26, 26, 26, 22, -2, -2 ], [ 1, 1, 22, 22, 22, 22, 22, 1, 1 ], [ 1, 1, 4, 4, 3, 4, 4, 1, 1 ], [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ], [ 3, 3, 2, 2, 3, 2, 2, 3, 3 ] ],
      step: 50,
      targetList: [ [ 26, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 2, 2, 2, 3, 3, 3, 2, 2, 2 ], [ 0, 1, 1, 1, 24, 1, 1, 1, 0 ], [ 0, 1, 26, 1, 24, 1, 26, 1, 0 ], [ 0, 26, 24, 24, 24, 24, 24, 26, 0 ], [ 4, 3, 26, 1, 24, 2, 26, 3, 4 ], [ 4, 3, 3, 1, 24, 2, 3, 3, 4 ], [ 4, 2, 2, 2, 26, 1, 1, 1, 4 ], [ -2, -2, 3, 3, 3, 3, 3, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 25, 9 ], [ 26, 7 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 4, -2, 1, 1, 1, 1, 1, -2, 4 ], [ 2, 25, 25, 25, 25, 25, 25, 25, 2 ], [ 2, 25, 27, 22, 22, 22, 27, 25, 2 ], [ 2, 25, 1, 22, 26, 22, 1, 25, 2 ], [ 3, 25, 1, 22, 26, 22, 1, 25, 3 ], [ 3, 25, 27, 22, 22, 22, 27, 25, 3 ], [ 3, 25, 25, 25, 25, 25, 25, 25, 3 ], [ 4, 4, 4, 21, 21, 21, 4, 4, 4 ], [ 0, -2, 0, 0, 0, 0, 0, -2, 0 ] ],
      step: 40,
      targetList: [ [ 21, 3 ], [ 25, 22 ], [ 26, 2 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 4, 4, 4, 3, 3, -2 ], [ -2, 0, 1, 0, 0, 0, 2, 0, -2 ], [ -2, 1, 26, 1, 0, 2, 26, 2, -2 ], [ -2, 0, 1, 0, 0, 0, 2, 0, -2 ], [ -2, 3, 27, 3, 1, 3, 27, 3, -2 ], [ -2, 4, 1, 4, 1, 4, 1, 4, -2 ], [ -2, 3, 4, 3, 1, 3, 4, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 26, 2 ], [ 27, 2 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 1, 1 ], [ 4, 7 ], 1 ], [ [ 5, 1 ], [ 7, 7 ], 2 ] ],
      stoneList: [ [ [ 2, 2 ], [ 3, 5 ] ], [ [ 1, 1 ], [ 2, 1 ] ] ]
    }, {
      mapList: [ [ 1, 1, -2, 1, 1, 1, -2, 1, 1 ], [ 1, 22, 22, 22, 26, 22, 22, 22, 1 ], [ 0, 22, 1, 1, 0, 1, 1, 22, 0 ], [ 0, 26, 0, 27, 0, 27, 0, 26, 0 ], [ 25, 22, 1, 1, 0, 1, 1, 22, 25 ], [ 25, 22, 22, 22, 26, 22, 22, 22, 25 ], [ 0, 25, 3, 3, 25, 0, 3, 25, 0 ], [ 0, 25, 3, 3, 25, 0, 3, 25, 0 ], [ 0, 25, 1, 1, 25, 0, 3, 25, 0 ] ],
      step: 45,
      targetList: [ [ 25, 13 ], [ 26, 4 ], [ 27, 2 ], [ 28, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 4 ], 1 ], [ [ 0, 5 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 4, 0 ], [ 7, 1 ] ], [ [ 4, 5 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ 0, 0, 0, -2, 0, 0, 0, -2, -2 ], [ 2, 2, 2, -2, 2, 2, 2, -2, -2 ], [ 0, 0, 0, 3, 3, 3, 3, 1, 1 ], [ 4, 4, 4, 4, 3, 4, 4, 4, 4 ], [ 1, 1, 1, 0, 0, 0, 2, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 25, 26, 25, 25, 26, 25, 25, 26, 25 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 2, 2, 4, 4, 4, 4, 4, 2, 2 ] ],
      step: 40,
      targetList: [ [ 25, 24 ], [ 26, 3 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 1, 8 ], 1 ], [ [ 1, 0 ], [ 2, 8 ], 2 ], [ [ 3, 0 ], [ 4, 8 ], 1 ], [ [ 5, 0 ], [ 6, 8 ], 2 ], [ [ 7, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 4, 2 ] ], [ [ 2, 4 ], [ 3, 4 ] ], [ [ 5, 4 ], [ 6, 7 ] ] ]
    }, {
      mapList: [ [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 21, 2, 2, 21, -2, 21, 3, 3, 21 ], [ 21, 2, 2, 21, 21, 21, 3, 3, 21 ], [ 21, 4, 2, 20, 22, 20, 2, 4, 21 ], [ 21, 4, 0, 22, 22, 22, 0, 4, 21 ], [ 21, 4, 0, 20, 22, 20, 0, 4, 21 ], [ 21, 0, 0, 21, 21, 21, 1, 1, 21 ], [ 21, 0, 0, 21, -2, 21, 1, 1, 21 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ] ],
      step: 40,
      targetList: [ [ 4, 20 ], [ 5, 10 ], [ 20, 4 ], [ 21, 40 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, -2 ], [ 3, 2, 2, 3, 2, 0, 1, -2, 3 ], [ 1, 2, 2, 3, 2, 0, -2, 3, 1 ], [ 2, 4, 4, 3, 1, -2, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 3, 2, 2, -2, 2, 0, 3, 1, 3 ], [ 22, 22, -2, 22, 22, 22, 22, 22, 22 ], [ 1, -2, 2, 3, 1, 0, 1, 3, 1 ], [ -2, 2, 20, 20, 20, 20, 1, 3, 3 ] ],
      step: 35,
      targetList: [ [ 3, 20 ], [ 2, 20 ], [ 20, 4 ], [ 38, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 2, 0 ], [ 4, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 1, 1, 1, 1, 1, 1, 1, 2 ], [ 2, 2, 2, 2, 1, 2, 2, 2, 2 ], [ 0, 0, 0, 26, 26, 26, 0, 0, 0 ], [ 23, 23, 23, 23, 23, 23, 23, 23, 23 ], [ 23, 23, 23, 23, 23, 23, 23, 23, 23 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 2, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 2, 2, 2, 2, 2 ] ],
      step: 40,
      targetList: [ [ 25, 18 ], [ 26, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, -2, 2, 3, 21, 0, 1, -2, 3 ], [ 3, -2, 2, 3, 21, 1, 1, -2, 3 ], [ 1, -2, 2, 3, 21, 0, 2, -2, 1 ], [ 2, -2, 2, 0, 21, 3, 1, -2, 1 ], [ 1, -2, 22, 22, 21, 22, 22, -2, 1 ], [ 3, -2, 2, 4, 21, 3, 1, -2, 3 ], [ 2, -2, 3, 2, 21, 2, 0, -2, 1 ], [ 1, -2, 2, 1, 21, 1, 1, -2, 1 ], [ 1, -2, 3, 21, 21, 21, 1, -2, 1 ] ],
      step: 40,
      targetList: [ [ 3, 20 ], [ 4, 20 ], [ 0, 20 ], [ 21, 11 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, 25, 0, 0, 0, 0, 0, 25, -2 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ 0, 1, 27, 2, 2, 2, 27, 1, 0 ], [ 0, 1, 2, 23, 23, 23, 2, 1, 0 ], [ 0, 1, 2, 23, 26, 23, 2, 1, 0 ], [ 0, 1, 2, 23, 23, 23, 2, 1, 0 ], [ 0, 1, 27, 2, 2, 2, 27, 1, 0 ], [ 25, 25, 1, 1, 1, 1, 1, 25, 25 ], [ -2, 25, 0, 0, 0, 0, 0, 25, -2 ] ],
      step: 40,
      targetList: [ [ 25, 20 ], [ 26, 1 ], [ 27, 4 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 2 ], [ 1, 3 ] ], [ [ 2, 3 ], [ 5, 4 ] ], [ [ 6, 1 ], [ 7, 1 ] ], [ [ 5, 7 ], [ 8, 8 ] ] ]
    }, {
      mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, -2, 2, -2, 1, -2, 1, -2, 1 ], [ 3, -2, 2, -2, 0, -2, 1, -2, 3 ], [ 2, -2, 3, -2, 2, -2, 0, -2, 1 ], [ 20, -2, 20, -2, 20, -2, 20, -2, 20 ] ],
      step: 35,
      targetList: [ [ 2, 30 ], [ 3, 30 ], [ 20, 5 ], [ 21, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ], [ 0, 1, 1, 1, 25, 1, 1, 1, 0 ], [ 0, 1, 2, 2, 25, 2, 2, 1, 0 ], [ 0, 1, 2, 26, 25, 26, 2, 1, 0 ], [ 25, 25, 25, 25, 23, 25, 25, 25, 25 ], [ 0, 1, 2, 26, 25, 26, 2, 1, 0 ], [ 0, 1, 2, 2, 25, 2, 2, 1, 0 ], [ 0, 1, 1, 1, 25, 1, 1, 1, 0 ], [ 0, 0, 0, 0, 25, 0, 0, 0, 0 ] ],
      step: 45,
      targetList: [ [ 25, 17 ], [ 26, 4 ], [ 28, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 1, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 5, 1 ], [ 8, 2 ] ], [ [ 5, 5 ], [ 8, 6 ] ], [ [ 7, 7 ], [ 8, 7 ] ] ]
    }, {
      mapList: [ [ 1, 3, 2, 3, -2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, -2, 0, 2, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 3, -2, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 3, 1 ], [ 1, 3, 2, 3, -2, 2, 1, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 4, 0, 2, 4, -2, 2, 4, 0, 1 ], [ 0, 3, 1, 0, -2, 3, 0, 4, 2 ] ],
      step: 45,
      targetList: [ [ 2, 25 ], [ 3, 25 ], [ 4, 30 ], [ 0, 30 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ 1, 3, 2, 3, 2, 0, 1, 4, 3 ], [ 1, 1, 2, 3, 3, 0, 2, 3, 1 ], [ 3, 3, 1, 3, 2, 0, 0, 0, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 2, 0, 1, 3, 1 ], [ 1, 3, -2, 3, 2, 2, -2, 1, 1 ], [ 2, 1, -2, 3, 2, 3, -2, 3, 1 ], [ 2, 2, -2, 1, 1, 1, -2, 3, 1 ], [ 1, 1, -2, 3, 1, 2, -2, 3, 1 ] ],
      step: 40,
      targetList: [ [ 2, 25 ], [ 4, 25 ], [ 1, 30 ], [ 38, 36 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      bubbleList: [ [ [ 1, 0 ], [ 4, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, 2, 2, 2, -2, -2, -2 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ 0, 27, 0, 1, 27, 1, 2, 27, 2 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ 2, 2, 2, 23, 23, 23, 1, 1, 1 ], [ 2, 27, 2, 23, 27, 23, 1, 27, 1 ], [ 2, 2, 2, 23, 23, 23, 1, 1, 1 ], [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ], [ 0, 27, 0, 1, 27, 1, 2, 27, 2 ] ],
      step: 35,
      targetList: [ [ 25, 8 ], [ 27, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 0, 0, 25, 25, 37, 25, 25, 0, 0 ], [ 25, 3, 2, 1, 25, 1, 2, 3, 25 ], [ -2, 23, 27, 2, 1, 2, 27, 23, -2 ], [ -2, 23, 2, 2, 1, 2, 2, 23, -2 ], [ -2, 23, 1, 1, 37, 1, 1, 23, -2 ], [ -2, 23, 2, 2, 1, 2, 2, 23, -2 ], [ -2, 23, 27, 2, 1, 2, 27, 23, -2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 0, 0, 25, 25, 37, 25, 25, 0, 0 ] ],
      step: 45,
      targetList: [ [ 25, 30 ], [ 27, 4 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 4, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 3 ], [ 4, 8 ] ], [ [ 5, 4 ], [ 6, 7 ] ], [ [ 7, 6 ], [ 7, 7 ] ] ]
    }, {
      mapList: [ [ 1, 3, 2, -2, -2, -2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 0, 0, 1 ], [ 21, 21, 21, 3, 1, 3, 21, 21, 21 ], [ 21, 21, 21, 1, 2, 0, 21, 21, 21 ], [ 21, 21, 21, 3, 2, 2, 21, 21, 21 ], [ -2, -2, -2, 3, 2, 3, -2, -2, -2 ], [ -2, -2, -2, 1, 1, 1, -2, -2, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ] ],
      step: 30,
      targetList: [ [ 3, 20 ], [ 4, 10 ], [ 20, 3 ], [ 21, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 0, 2, 0, 3, 0, -2 ], [ -2, 0, 0, 0, 2, 0, 3, 2, -2 ], [ -2, 0, 0, 0, 39, 1, 1, 0, -2 ], [ -2, 1, 1, 1, 39, 1, 1, 1, -2 ], [ -2, 2, 2, 2, 39, 3, 3, 3, -2 ], [ -2, 3, 3, 3, 2, 1, 2, 1, -2 ], [ -2, 2, 2, 1, 2, 1, 2, 2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 39, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, 22, 22, 0 ], [ -2, 22, 1, 1, 22, 2, 2, 22, 0 ], [ -2, 22, 1, 1, 3, 2, 2, 22, -2 ], [ -2, 22, 3, 3, 39, 3, 3, 22, -2 ], [ -2, 22, 3, 39, 39, 39, 3, 22, -2 ], [ -2, 22, 3, 3, 39, 3, 3, 22, -2 ], [ -2, 22, 2, 2, 3, 1, 1, 22, -2 ], [ 0, 22, 2, 2, 22, 1, 1, 22, -2 ], [ 0, 22, 22, 22, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 3, 20 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 0, 0, 2, 2, 0, 2, 2, 3, 3 ], [ 0, 0, 2, 2, 0, 2, 2, 3, 3 ], [ 2, -2, -2, -2, -2, -2, -2, -2, 2 ], [ 2, 2, 39, 2, 39, 2, 39, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ 3, 3, 2, 2, 4, 2, 2, 0, 0 ], [ 3, 3, 2, 2, 4, 2, 2, 0, 0 ] ],
      step: 40,
      targetList: [ [ 25, 9 ], [ 39, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, 3, -2, -2, -2, -2 ], [ -2, 39, -2, 39, 3, 39, -2, 39, -2 ], [ 2, 2, 2, 3, 37, 3, 2, 2, 2 ], [ -2, 3, 3, 3, 4, 3, 3, 3, -2 ], [ -2, -2, 1, 1, 4, 1, 1, -2, -2 ], [ -2, 1, 1, 37, 4, 37, 1, 1, -2 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ -2, 39, -2, 39, 3, 39, -2, 39, -2 ], [ -2, -2, -2, -2, 3, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 28, 3 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 2 ], [ [ 3, 0 ], [ 5, 8 ], 1 ], [ [ 6, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 3 ], [ 5, 4 ] ], [ [ 5, 3 ], [ 6, 6 ] ], [ [ 6, 1 ], [ 6, 2 ] ] ]
    }, {
      mapList: [ [ 3, 3, 4, 21, 21, 21, 1, 3, 1 ], [ 1, 3, 4, 21, 21, 21, 3, 1, 2 ], [ 2, 3, 3, 21, 21, 21, 2, 2, 1 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 3, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 3, 4, 20, 2, 2, 1, 1 ], [ 2, 2, 2, 20, -2, 20, 3, 1, 3 ], [ 1, 1, 20, -2, -2, -2, 20, 1, 2 ], [ 20, 20, -2, -2, -2, -2, -2, 20, 20 ] ],
      step: 50,
      targetList: [ [ 3, 30 ], [ 4, 15 ], [ 20, 9 ], [ 21, 15 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 2e4, 4e4, 6e4 ]
    }, {
      mapList: [ [ -2, -2, 0, 0, 0, 0, 0, -2, -2 ], [ -2, -2, 0, 22, 22, 22, 0, -2, -2 ], [ 2, 2, 1, 1, 1, 1, 1, 2, 2 ], [ 2, 2, 22, 22, 27, 22, 22, 2, 2 ], [ 23, 23, 0, 0, 3, 0, 0, 23, 23 ], [ 0, 0, 0, 0, 3, 0, 0, 0, 5 ], [ 0, 23, 23, 23, 27, 23, 23, 23, 5 ], [ 2, 2, 2, 1, 1, 1, 2, 2, 2 ], [ 2, 2, 2, -2, -2, -2, 2, 2, 2 ] ],
      step: 40,
      targetList: [ [ 25, 10 ], [ 27, 2 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 1 ], [ 3, 1 ] ], [ [ 2, 2 ], [ 5, 3 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
    }, {
      mapList: [ [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 2, 2, 27, 23, 23, 23, 27, 2, 2 ], [ 2, 2, 23, 3, 3, 3, 23, 2, 2 ], [ 3, 3, 27, 3, 26, 3, 27, 3, 3 ], [ 2, 2, 23, 3, 3, 3, 23, 2, 2 ], [ 2, 2, 27, 23, 23, 23, 27, 2, 2 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ] ],
      step: 35,
      targetList: [ [ 25, 10 ], [ 26, 1 ], [ 27, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 3, -2, -2, 2, 0, 2, -2, -2, 1 ], [ 1, -2, -2, 1, 0, 3, -2, -2, 2 ], [ 1, 2, 3, 4, 0, 4, 3, 2, 1 ], [ 2, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 3, 4, 0, 4, 3, 2, 1 ], [ 1, 2, 3, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 3, 4, 2, 2, 2, 1, 1 ], [ 1, 1, 3, -2, -2, -2, 2, 1, 1 ], [ 4, 3, 2, -2, -2, -2, 1, 2, 2 ] ],
      step: 40,
      targetList: [ [ 3, 30 ], [ 4, 30 ], [ 0, 30 ], [ 21, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 3, -2, -2, 2, 0, 2, 1, 2, 1 ], [ 1, -2, -2, 1, 0, 3, 3, 4, 2 ], [ 1, -2, -2, -2, -2, -2, 3, 2, 1 ], [ 2, -2, -2, -2, -2, -2, 1, 3, 1 ], [ 1, 2, 3, 4, -2, -2, 3, 2, 1 ], [ 22, 22, 22, 22, -2, -2, 1, 2, 2 ], [ 1, 3, 3, 4, -2, -2, 21, 21, 21 ], [ 1, 1, 3, 4, -2, -2, 21, 21, 21 ], [ 4, 3, 2, 3, -2, -2, 21, 21, 21 ] ],
      step: 50,
      targetList: [ [ 4, 20 ], [ 0, 20 ], [ 2, 30 ], [ 21, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 2, 2, 26, 22, 22, 22, 26, 2, 2 ], [ 2, 2, 22, 3, 3, 3, 22, 2, 2 ], [ 3, 3, 26, 3, 26, 3, 26, 3, 3 ], [ 2, 2, 22, 3, 3, 3, 22, 2, 2 ], [ 2, 2, 26, 22, 22, 22, 26, 2, 2 ], [ 0, 0, 2, 2, 3, 2, 2, 0, 0 ], [ 1, 1, 2, 2, 3, 2, 2, 1, 1 ] ],
      step: 40,
      targetList: [ [ 26, 7 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 1, 3, 21, 21, 21, 21, 21, 2, 1 ], [ 2, 2, 1, 21, 21, 21, 2, 3, 1 ], [ 1, 2, 3, 4, 21, 2, 3, 2, 1 ], [ 0, 4, 1, 21, 21, 21, 1, 2, 2 ], [ 1, 3, 21, 21, 21, 21, 21, 2, 2 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ] ],
      step: 50,
      targetList: [ [ 3, 20 ], [ 4, 20 ], [ 21, 49 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ], [ 3, 27, 1, 1, 23, 1, 1, 27, 3 ], [ 3, 25, 1, 25, 25, 25, 1, 25, 3 ], [ 2, 25, 1, 25, 26, 25, 1, 25, 2 ], [ 2, 25, 23, 25, 26, 25, 23, 25, 2 ], [ 2, 25, 1, 25, 26, 25, 1, 25, 2 ], [ 2, 25, 1, 25, 25, 25, 1, 25, 2 ], [ 3, 27, 1, 1, 23, 1, 1, 27, 3 ], [ 3, 3, 3, 2, 2, 2, 3, 3, 3 ] ],
      step: 45,
      targetList: [ [ 25, 26 ], [ 26, 3 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ], [ 21, 2, 2, 21, -2, 21, 3, 3, 21 ], [ 21, 2, 2, 21, 21, 21, 3, 3, 21 ], [ 21, 4, 2, 20, 22, 20, 2, 4, 21 ], [ 21, 4, 0, 22, 22, 22, 0, 4, 21 ], [ 21, 4, 0, 20, 22, 20, 0, 4, 21 ], [ 21, 0, 0, 21, 21, 21, 1, 1, 21 ], [ 21, 0, 0, 21, -2, 21, 1, 1, 21 ], [ 21, 21, 21, 21, -2, 21, 21, 21, 21 ] ],
      step: 40,
      targetList: [ [ 4, 20 ], [ 0, 30 ], [ 20, 4 ], [ 21, 40 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 3, 37, 1, 1, 1, -2 ], [ -2, 23, 0, 23, 0, 23, 0, 23, -2 ], [ -2, 1, 1, 1, 37, 2, 2, 2, -2 ], [ -2, 37, 26, 37, 26, 37, 26, 37, -2 ], [ -2, 0, 0, 0, 37, 3, 3, 3, -2 ], [ -2, 23, 1, 23, 0, 23, 0, 23, -2 ], [ -2, 4, 4, 4, 37, 0, 0, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 8 ], [ 26, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 27, 22, 22, 27, 22, 22, 27, 22 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 37, 1, 1, 37, 1, 1, 37, 0 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 22, 27, 22, 22, 27, 22, 22, 27, 22 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 0, 0, 1, 1, 3, 1, 1, 0, 0 ], [ 3, 3, 3, -2, -2, -2, 3, 3, 3 ] ],
      step: 40,
      targetList: [ [ 27, 6 ], [ 37, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 0, 0, 23, -2, -2, -2, 23, 0, 0 ], [ 0, 37, 1, 23, 23, 23, 1, 37, 0 ], [ 23, 1, 1, 4, 4, 4, 1, 1, 23 ], [ -2, 3, 23, 4, 4, 4, 23, 3, -2 ], [ -2, 3, 23, 23, 37, 23, 23, 3, -2 ], [ -2, 3, 23, 4, 4, 4, 23, 3, -2 ], [ 23, 1, 1, 4, 4, 4, 1, 1, 23 ], [ 0, 37, 1, 23, 23, 23, 1, 37, 0 ], [ 0, 0, 23, -2, -2, -2, 23, 0, 0 ] ],
      step: 40,
      targetList: [ [ 25, 22 ], [ 28, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 4, 8 ], 2 ], [ [ 5, 0 ], [ 7, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 2 ], [ 6, 3 ] ], [ [ 6, 1 ], [ 6, 2 ] ], [ [ 6, 2 ], [ 7, 5 ] ], [ [ 7, 2 ], [ 7, 3 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, 22, 22, 0 ], [ -2, 22, 1, 1, 22, 2, 2, 22, 0 ], [ -2, 22, 1, 1, 3, 2, 2, 22, -2 ], [ -2, 22, 3, 3, 39, 3, 3, 22, -2 ], [ -2, 22, 3, 39, 39, 39, 3, 22, -2 ], [ -2, 22, 3, 3, 39, 3, 3, 22, -2 ], [ -2, 22, 2, 2, 3, 1, 1, 22, -2 ], [ 0, 22, 2, 2, 22, 1, 1, 22, -2 ], [ 0, 22, 22, 22, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 3, 20 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 0, 0, 2, 2, 0, 2, 2, 3, 3 ], [ 0, 0, 2, 2, 0, 2, 2, 3, 3 ], [ 2, -2, -2, -2, -2, -2, -2, -2, 2 ], [ 2, 2, 39, 2, 39, 2, 39, 2, 2 ], [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 1, -2, -2, -2, -2, -2, -2, -2, 1 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ 3, 3, 2, 2, 4, 2, 2, 0, 0 ], [ 3, 3, 2, 2, 4, 2, 2, 0, 0 ] ],
      step: 40,
      targetList: [ [ 25, 9 ], [ 39, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 4, 4, 4, 0, 0, 0, 4, 4, 4 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 2, 37, 2, 37, 2, 37, 2, 37, 2 ], [ 2, 4, 2, 4, 2, 4, 2, 4, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 39, 23, 39, 23, 39, 0, -2 ], [ -2, 0, 0, 1, 1, 1, 0, 0, -2 ], [ -2, 0, 39, 23, 39, 23, 39, 0, -2 ], [ -2, 3, 2, 1, 4, 1, 2, 3, -2 ] ],
      step: 40,
      targetList: [ [ 25, 4 ], [ 39, 6 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, 3, 3, -2, 4, 4, -2, -2 ], [ -2, 3, 3, -2, -2, -2, 4, 4, -2 ], [ 21, 3, 21, 39, -2, 39, 21, 4, 21 ], [ 0, 0, 0, -2, -2, -2, 0, 0, 0 ], [ 21, 4, 21, 39, -2, 39, 21, 4, 21 ], [ 21, 4, 21, -2, -2, -2, 21, 4, 21 ], [ 21, 0, 21, 39, -2, 39, 21, 1, 21 ], [ -2, 0, 0, -2, -2, -2, 1, 1, -2 ], [ -2, -2, 0, 0, -2, 1, 1, -2, -2 ] ],
      step: 40,
      targetList: [ [ 21, 16 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 5e3, 1e4, 15e3 ]
    }, {
      mapList: [ [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, 25, 25, 3, 3, 3, 25, 25, -2 ], [ 39, 1, 1, 25, 25, 26, 1, 1, 39 ], [ -2, 25, 1, 26, 25, 25, 1, 25, -2 ], [ -2, -2, 25, 3, 3, 3, 25, -2, -2 ], [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ 39, 25, 2, 2, 25, 2, 2, 25, 39 ] ],
      step: 40,
      targetList: [ [ 25, 28 ], [ 26, 1 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 2, 37, 2, 37, 3, -2, 3, 37, 2 ], [ 2, 22, 2, 22, 3, -2, 3, 2, 2 ], [ 37, 39, 37, 39, 37, -2, 23, 39, 39 ], [ 1, 1, 3, 1, 1, -2, 2, 2, 2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 3, 2, 2, -2, 2, 2, 2 ], [ 22, 22, 22, 22, 22, -2, 22, 22, 22 ], [ 23, 39, 2, 39, 3, -2, 3, 39, 39 ], [ 1, 1, 2, 3, 3, -2, 3, 3, 3 ] ],
      step: 45,
      targetList: [ [ 25, 2 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, 39, -2, -2, -2, -2 ], [ -2, -2, -2, 39, 0, 39, -2, -2, -2 ], [ -2, -2, 39, 0, 0, 0, 39, -2, -2 ], [ -2, 39, 0, 4, 4, 4, 0, 39, -2 ], [ 39, 0, 0, 4, 4, 4, 0, 0, 39 ], [ -2, 39, 0, 3, 3, 3, 0, 39, -2 ], [ -2, -2, 39, 3, 3, 3, 39, -2, -2 ], [ -2, -2, -2, 39, 4, 39, -2, -2, -2 ], [ -2, -2, -2, -2, 39, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 39, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 3, 22, 2, 2, 3, 2, 2, 22, 3 ], [ 3, 26, 2, 2, 3, 2, 2, 26, 3 ], [ 3, 22, 1, 1, 1, 1, 1, 22, 3 ], [ 2, 22, 0, 0, 0, 0, 0, 22, 2 ], [ 2, 22, 1, 1, 1, 1, 1, 22, 2 ], [ 2, 26, 2, 2, 2, 2, 2, 26, 2 ], [ 3, 22, 3, 3, 3, 3, 3, 22, 3 ], [ 3, 22, 4, 4, 4, 4, 4, 22, 3 ], [ 3, 22, 3, 3, 3, 3, 3, 22, 3 ] ],
      step: 40,
      targetList: [ [ 3, 25 ], [ 26, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, -2, -2, -2, -2, -2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 0, 0, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 2, 0, 1, 3, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 1, 3, 1, 1, 2, 3, 2, 2, 1 ], [ 2, 2, -2, -2, -2, -2, -2, 1, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 2 ] ],
      step: 50,
      targetList: [ [ 0, 10 ], [ 1, 20 ], [ 3, 20 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 1, 22, 25, 25, 25, 25, 25, 22, 1 ], [ 1, 22, 25, 21, 21, 21, 25, 22, 1 ], [ 0, 22, 25, 21, 26, 21, 25, 22, 0 ], [ 1, 22, 25, 21, 21, 21, 25, 22, 1 ], [ 1, 22, 25, 25, 25, 25, 25, 22, 1 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ] ],
      step: 40,
      targetList: [ [ 21, 8 ], [ 25, 16 ], [ 26, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 3, 3, 3, 0, 0, 0, 3, 3, 3 ], [ 1, 1, 1, 0, 26, 0, 1, 1, 1 ], [ 2, 2, 24, 24, 24, 24, 24, 2, 2 ], [ 0, 0, 24, 21, 21, 21, 24, 0, 0 ], [ 0, 26, 24, 21, 20, 21, 24, 26, 0 ], [ 0, 0, 24, 21, 21, 21, 24, 0, 0 ], [ 2, 2, 24, 24, 24, 24, 24, 2, 2 ], [ 1, 1, 1, 0, 26, 0, 1, 1, 1 ], [ 3, 3, 3, 0, 0, 0, 3, 3, 3 ] ],
      step: 40,
      targetList: [ [ 20, 1 ], [ 21, 8 ], [ 25, 16 ], [ 26, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ], [ -2, -2, 25, 0, 0, 0, 25, -2, -2 ], [ -2, 25, 25, 0, 0, 0, 25, 25, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, 25, 25, 1, 1, 1, 25, 25, -2 ], [ -2, -2, 25, 1, 1, 1, 25, -2, -2 ], [ -2, -2, -2, 25, 25, 25, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 32 ], [ 39, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 0, 0, 0, 0, 0, 0, 0, -2 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ 1, 1, 3, 3, 3, 3, 3, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 3, 3, 3, 3, 3, 2, 2 ], [ 24, 24, 24, 24, 24, 24, 24, 24, 24 ], [ -2, 0, 0, 0, 0, 0, 0, 0, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ] ],
      step: 40,
      targetList: [ [ 25, 25 ], [ 39, 7 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 0, 0, 2, 2, 26, 2, 2, 0, 0 ], [ 0, 0, 2, 2, 26, 2, 2, 0, 0 ], [ 25, 25, 4, 4, 0, 4, 4, 25, 25 ], [ 3, 25, 4, 4, 0, 4, 4, 25, 3 ], [ 3, 25, 25, 1, 1, 1, 25, 25, 3 ], [ 1, 27, 25, 1, 1, 1, 25, 27, 1 ], [ 1, 1, 25, 25, 26, 25, 25, 1, 1 ], [ 0, 0, 0, 25, 26, 25, 0, 0, 0 ], [ 0, 0, 0, 25, 25, 25, 0, 0, 0 ] ],
      step: 40,
      targetList: [ [ 25, 20 ], [ 26, 4 ], [ 27, 2 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 2, 8 ], 1 ], [ [ 3, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 4 ], [ 3, 7 ] ], [ [ 5, 1 ], [ 8, 2 ] ] ]
    }, {
      mapList: [ [ -2, 4, 4, 2, 2, 2, 4, 4, -2 ], [ -2, 4, 27, 2, 2, 2, 27, 4, -2 ], [ 3, 3, 25, 23, 23, 23, 25, 3, 3 ], [ 1, 1, 25, 4, 0, 4, 25, 1, 1 ], [ 1, 1, 25, 4, 0, 4, 25, 1, 1 ], [ 3, 3, 25, 23, 23, 23, 25, 3, 3 ], [ 0, 0, 27, 3, 3, 3, 27, 0, 0 ], [ 0, 0, 1, 3, 3, 3, 1, 0, 0 ], [ -2, -2, 1, 1, 1, 1, 1, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 14 ], [ 27, 4 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 8, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 2, 4 ], [ 5, 5 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ 3, 3, 3, 3, 3, 3, 3, 4, 3 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 1, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 1, 2, 3, 0, 0, 1, 1, 3 ], [ 2, 3, 3, 2, 2, 2, 0, 3, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 21, 20, 20, 20, 20, 20, 21, 21 ] ],
      step: 45,
      targetList: [ [ 3, 25 ], [ 4, 20 ], [ 20, 5 ], [ 21, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 1, 22, 0, 26, 0, 26, 0, 22, 1 ], [ 1, 22, 26, 26, 26, 26, 26, 22, 1 ], [ 1, 22, 0, 26, 0, 26, 0, 22, 1 ], [ 1, 22, 22, 22, 22, 22, 22, 22, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 26, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 3, 2, -2, -2, -2, 1, 4, 3 ], [ 1, 1, 2, -2, -2, -2, 2, 3, 1 ], [ 3, 3, 1, -2, -2, -2, 0, 0, 1 ], [ 22, 22, 22, 21, 21, 21, 1, 3, 1 ], [ 1, 2, 2, 21, 21, 21, 1, 3, 1 ], [ 1, 3, 3, 21, 21, 21, 22, 22, 22 ], [ 1, 3, 1, -2, -2, -2, 2, 2, 1 ], [ 2, 2, 2, -2, -2, -2, 1, 1, 2 ], [ 2, 3, 3, -2, -2, -2, 3, 1, 2 ] ],
      step: 40,
      targetList: [ [ 4, 25 ], [ 0, 25 ], [ 2, 25 ], [ 21, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ], [ 0, 0, 0, 4, 4, 4, 0, 0, 0 ], [ 22, 23, 1, 23, 0, 23, 2, 23, 22 ], [ 3, 23, 1, 23, 0, 23, 2, 23, 3 ], [ 3, 23, 1, 23, 26, 23, 2, 23, 3 ], [ 3, 23, 1, 23, 0, 23, 2, 23, 3 ], [ 22, 23, 1, 23, 0, 23, 2, 23, 22 ], [ 0, 0, 0, 4, 4, 4, 0, 0, 0 ], [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ] ],
      step: 45,
      targetList: [ [ 25, 20 ], [ 26, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 21, 21, 21, 21, 21, 21, 21, 1 ], [ 2, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 2, 2, 20, 2, 20, 3, 20, 1, 2 ], [ 2, 3, 20, 1, 20, 1, 20, 1, 2 ] ],
      step: 50,
      targetList: [ [ 0, 30 ], [ 2, 30 ], [ 20, 6 ], [ 21, 20 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 2, 2, 22, 2, 2, 22, -2 ], [ -2, 22, 37, 22, 4, 22, 37, 22, -2 ], [ -2, 22, -2, -2, 4, -2, -2, 22, -2 ], [ -2, 22, 3, 3, 27, 3, 3, 22, -2 ], [ -2, 22, 37, 22, 4, 22, 37, 22, -2 ], [ -2, 22, -2, -2, 4, -2, -2, 22, -2 ], [ -2, 22, 1, 1, 22, 1, 1, 22, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ] ],
      step: 45,
      targetList: [ [ 27, 1 ], [ 38, 14 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ],
      bubbleList: [ [ [ 4, 0 ], [ 5, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, 1, 1, -2, 1, 1, -2, -2 ], [ 3, 2, 0, 0, 1, 0, 0, 2, 3 ], [ 3, 37, 26, 2, 26, 2, 26, 37, 3 ], [ -2, 1, -2, -2, -2, -2, -2, 1, -2 ], [ -2, 1, 39, 1, 39, 1, 39, 1, -2 ], [ -2, 37, -2, -2, -2, -2, -2, 37, -2 ], [ 4, 3, 26, 1, 26, 1, 26, 3, 4 ], [ 4, 3, 0, 0, 1, 0, 0, 3, 4 ], [ -2, -2, 1, 1, -2, 1, 1, -2, -2 ] ],
      step: 50,
      targetList: [ [ 26, 6 ], [ 38, 15 ], [ 39, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ 22, 2, 2, 25, 25, 25, 2, 2, 22 ], [ 22, 1, 1, 3, 3, 3, 1, 1, 22 ], [ 22, 1, -2, 39, -2, 39, -2, 1, 22 ], [ 22, 21, -2, 39, -2, 39, -2, 21, 22 ], [ 22, 21, -2, 39, -2, 39, -2, 21, 22 ], [ 22, 1, -2, 39, -2, 39, -2, 1, 22 ], [ 22, 1, 1, 3, 3, 3, 1, 1, 22 ], [ 22, 2, 2, 25, 25, 25, 2, 2, 22 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 50,
      targetList: [ [ 21, 4 ], [ 25, 6 ], [ 38, 8 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 5, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, 3, 22, -2, -2 ], [ -2, -2, -2, 1, 1, 1, 22, 4, -2 ], [ -2, 3, 22, 3, 3, 3, 22, 4, -2 ], [ -2, 3, 22, 26, 26, 26, 22, 4, -2 ], [ -2, 1, 22, 26, 26, 26, 22, 1, 1 ], [ 1, 1, 22, 4, 4, 4, 22, 1, 1 ], [ 22, 22, 39, 39, 39, 39, 39, 22, 22 ], [ -2, 2, 2, 1, 1, 2, 2, -2, -2 ], [ -2, -2, -2, 1, 1, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 26, 6 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, 39, 39, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 3, 3, 2, 2, 39 ], [ -2, 2, 2, 26, 26, 26, 2, 2, 39 ], [ -2, 3, 26, 22, 22, 22, 26, 3, -2 ], [ -2, 3, 26, 22, 27, 22, 26, 3, -2 ], [ -2, 3, 26, 22, 22, 22, 26, 3, -2 ], [ 39, 2, 2, 26, 26, 26, 2, 2, -2 ], [ 39, 2, 2, 3, 3, 3, 2, 2, -2 ], [ -2, -2, -2, -2, -2, -2, 39, 39, -2 ] ],
      step: 50,
      targetList: [ [ 26, 12 ], [ 27, 1 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, 39, 39, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 3, 3, 2, 2, 39 ], [ -2, 2, 2, 26, 26, 26, 2, 2, 39 ], [ -2, 3, 26, 22, 22, 22, 26, 3, -2 ], [ -2, 3, 26, 22, 27, 22, 26, 3, -2 ], [ -2, 3, 26, 22, 22, 22, 26, 3, -2 ], [ 39, 2, 2, 26, 26, 26, 2, 2, -2 ], [ 39, 2, 2, 3, 3, 3, 2, 2, -2 ], [ -2, -2, -2, -2, -2, -2, 39, 39, -2 ] ],
      step: 50,
      targetList: [ [ 26, 12 ], [ 27, 1 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 1, 2, 2, 3, 2, 0, 1, 3, 3 ], [ 3, 2, 2, 3, 2, 0, 1, 1, 3 ], [ 1, 2, 2, 3, 2, 0, 2, 3, 1 ], [ 2, 4, 4, 3, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 3, -2, 0, 1, 2, 2 ], [ 3, 2, 2, -2, -2, -2, 1, 3, 3 ], [ 2, 2, -2, -2, -2, -2, -2, 3, 1 ], [ 1, -2, 21, 21, 21, 21, 21, -2, 1 ], [ -2, -2, 21, 20, 20, 20, 21, -2, -2 ] ],
      step: 35,
      targetList: [ [ 2, 25 ], [ 3, 20 ], [ 20, 3 ], [ 21, 7 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, -2, -2, 1, 2, 0, -2, -2, 1 ], [ 3, -2, -2, 0, 1, 2, -2, -2, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 22, 22, 22, 22, 22, 21, 21 ], [ 1, -2, -2, 1, 2, 3, -2, -2, 3 ], [ 2, -2, -2, 2, 1, 2, -2, -2, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 2 ] ],
      step: 50,
      targetList: [ [ 3, 15 ], [ 4, 10 ], [ 20, 5 ], [ 21, 13 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 1, 2, 1, 2, 0, 2, 3, 1 ], [ 3, 3, 1, 0, 1, 2, 0, 0, 1 ], [ 2, 2, 2, 3, 1, 3, 1, 3, 1 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 2, 21, 21, 21, 21, 21, 21, 21, 2 ], [ 2, 20, 3, 20, 20, 20, 3, 20, 2 ] ],
      step: 40,
      targetList: [ [ 1, 20 ], [ 3, 15 ], [ 21, 18 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 22, 3, 2, 1, 0, 0, 1, 4, 3 ], [ 1, 22, -2, -2, -2, -2, -2, 3, 1 ], [ 3, 3, 22, 0, 1, 2, 0, 0, 1 ], [ 2, 2, 2, 22, 1, 3, 1, 3, 1 ], [ 1, 2, 2, 1, 22, 0, 1, 3, 1 ], [ 3, 3, 4, 0, 1, 22, 3, 4, 1 ], [ 1, 3, 1, 1, 2, 3, 22, 2, 1 ], [ 2, 2, -2, -2, -2, -2, -2, 22, 2 ], [ 2, 3, 20, 20, 20, 20, 20, 1, 22 ] ],
      step: 50,
      targetList: [ [ 0, 10 ], [ 1, 20 ], [ 3, 20 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 3, 3, 24, 3, 3, 3, 24, 3, 3 ], [ 0, 0, 24, 0, 0, 0, 24, 0, 0 ], [ 1, 1, 24, 1, 1, 1, 24, 1, 1 ], [ 24, 24, 24, 2, 2, 2, 24, 24, 24 ], [ 0, 0, 1, 27, 26, 27, 1, 0, 0 ], [ 0, 0, 1, 1, 26, 1, 1, 0, 0 ], [ 24, 24, 24, 27, 26, 27, 24, 24, 24 ], [ 0, 0, 0, 2, 2, 2, 0, 0, 0 ], [ 1, 1, 1, -2, -2, -2, 1, 1, 1 ] ],
      step: 30,
      targetList: [ [ 25, 18 ], [ 26, 3 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ -2, 4, 4, 4, 1, 4, 4, 4, -2 ], [ 0, 23, 23, 23, 1, 23, 23, 23, 5 ], [ 0, 23, 26, 23, 0, 23, 26, 23, 5 ], [ 0, 23, 23, 23, 0, 23, 23, 23, 5 ], [ 2, 4, 4, 4, 0, 4, 4, 4, 2 ], [ 0, 23, 23, 23, 0, 23, 23, 23, 5 ], [ 0, 23, 27, 23, 0, 23, 27, 23, 5 ], [ 0, 23, 23, 23, 1, 23, 23, 23, 5 ], [ -2, 4, 4, 4, 1, 4, 4, 4, -2 ] ],
      step: 45,
      targetList: [ [ 25, 32 ], [ 26, 2 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, 1, 0, 3, 1, 4, 3 ], [ -2, -2, -2, 1, 2, 4, 2, 3, 1 ], [ -2, -2, -2, 0, 0, 4, 1, 3, 1 ], [ 2, 2, 4, 3, 1, 1, 21, 21, 21 ], [ 1, 2, 2, 4, 3, 2, 21, 21, 21 ], [ 1, 3, 3, 3, 2, 3, 21, 21, 21 ], [ 1, 3, 1, 1, 2, 2, -2, -2, -2 ], [ 2, 2, 2, 2, 1, 1, -2, -2, -2 ], [ 20, 20, 20, 20, 20, 20, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 1, 20 ], [ 3, 20 ], [ 20, 6 ], [ 21, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 1, 2, 2, 1, 0, 3, -2, -2, -2 ], [ 3, 1, 1, 1, 2, 4, -2, -2, -2 ], [ 3, 3, 3, 0, 1, 2, -2, -2, -2 ], [ 2, 2, 2, 3, 1, 1, 1, 3, 1 ], [ 1, 2, 3, 4, 3, 2, 1, 2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ], [ -2, -2, -2, 21, 21, 21, 21, 21, 21 ] ],
      step: 40,
      targetList: [ [ 2, 20 ], [ 4, 15 ], [ 21, 18 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, 0, 0, 0, -2, 0, 0, 0, -2 ], [ -2, 29, 29, 29, -2, 29, 29, 29, -2 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ -2, 30, 30, 30, -2, 30, 30, 30, -2 ], [ -2, 2, 2, 2, -2, 2, 2, 2, -2 ], [ -2, 31, 31, 31, -2, 31, 31, 31, -2 ], [ -2, 3, 3, 3, -2, 3, 3, 3, -2 ], [ -2, 32, 32, 32, -2, 32, 32, 32, -2 ], [ -2, 4, 4, 4, -2, 4, 4, 4, -2 ] ],
      step: 15,
      targetList: [ [ 29, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e3, 2e3, 3e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 3, 3, 3, 3, 3, 3, 4, -2 ], [ -2, 3, 30, 30, 30, 30, 30, 4, -2 ], [ -2, 4, 30, 29, 29, 29, 30, 4, -2 ], [ -2, 4, 30, 29, 26, 29, 30, 4, -2 ], [ -2, 4, 30, 29, 29, 29, 30, 4, -2 ], [ -2, 4, 30, 30, 30, 30, 30, 3, -2 ], [ -2, 4, 4, 3, 3, 3, 3, 3, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 26, 1 ], [ 29, 24 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ], [ 32, 32, 32, 32, 32, 32, 32, 32, 32 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 1, 27, 1, 0, 27, 0, 1, 27, 1 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 2, 26, 2, -2, 0, -2, 2, 26, 2 ], [ 2, 2, 2, -2, 0, -2, 2, 2, 2 ], [ 29, 1, 30, 2, 31, 3, 32, 4, 33 ], [ 0, 0, 1, 1, 2, 2, 3, 3, 4 ] ],
      step: 45,
      targetList: [ [ 26, 2 ], [ 27, 3 ], [ 29, 14 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 1, 4, 2, 2, -2 ], [ -2, 2, 37, 0, 1, 0, 37, 2, -2 ], [ -2, 3, 0, 0, 1, 0, 0, 4, -2 ], [ -2, 1, 1, 1, 37, 1, 1, 1, -2 ], [ -2, 3, 0, 0, 1, 2, 2, 4, -2 ], [ -2, 2, 37, 0, 1, 2, 37, 0, -2 ], [ -2, 2, 2, 3, 1, 4, 0, 0, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 20,
      targetList: [ [ 1, 15 ], [ 2, 15 ], [ 37, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 3, 3, -2, -2, -2, 3, 3, -2 ], [ 2, 30, 30, 0, 37, 2, 29, 29, 0 ], [ 2, 30, 30, 0, 4, 2, 29, 29, 0 ], [ 0, 1, 1, 4, 4, 4, 1, 1, 2 ], [ 0, 2, 2, 0, 37, 0, 3, 3, 2 ], [ 37, 1, 1, 4, 4, 4, 0, 0, 37 ], [ 0, 29, 29, 0, 4, 1, 30, 30, 1 ], [ 0, 29, 29, 0, 37, 1, 30, 30, 1 ], [ -2, 3, 3, -2, -2, -2, 3, 3, -2 ] ],
      step: 35,
      targetList: [ [ 0, 20 ], [ 29, 16 ], [ 37, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, 2, 2, 2, 0, 2, 2, 2, -2 ], [ 1, 23, 23, 0, 0, 0, 23, 23, 0 ], [ 1, 23, 23, 1, 0, 1, 23, 23, 0 ], [ 1, 2, 1, 37, 3, 37, 2, 1, 0 ], [ 2, 2, 2, 3, 3, 3, 1, 1, 1 ], [ 1, 2, 1, 37, 3, 37, 2, 1, 0 ], [ 1, 23, 23, 1, 0, 1, 23, 23, 0 ], [ 1, 23, 23, 0, 0, 0, 23, 23, 0 ], [ -2, 2, 2, 2, 0, 2, 2, 2, -2 ] ],
      step: 40,
      targetList: [ [ 0, 15 ], [ 1, 20 ], [ 25, 16 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 1, 3, 3, 33, 3, 3, 1, 1 ], [ 0, 37, 2, 2, 33, 2, 2, 37, 0 ], [ 0, 4, 31, 31, 31, 31, 31, 4, 0 ], [ 4, 4, 29, 2, 2, 1, 30, 4, 4 ], [ 32, 32, 29, 0, 37, 1, 30, 31, 31 ], [ 4, 4, 29, 0, 3, 3, 30, 4, 4 ], [ 0, 4, 32, 32, 32, 32, 32, 4, 0 ], [ 0, 37, 2, 2, 1, 2, 2, 37, 0 ], [ 1, 1, 3, 3, 1, 3, 3, 1, 1 ] ],
      step: 40,
      targetList: [ [ 29, 22 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 3, 3, -2, 2, 2, 2, -2, 3, 3 ], [ 4, 4, -2, 4, 4, 4, -2, 4, 4 ], [ 2, 0, 0, 0, 0, 0, 0, 0, 2 ], [ 2, 2, 2, 2, 0, 2, 2, 2, 2 ], [ 23, 0, 0, 0, 2, 0, 0, 0, 23 ], [ 3, 23, 23, 23, 23, 23, 23, 23, 4 ], [ 3, 23, 20, 23, 23, 20, 23, 23, 4 ], [ 3, 23, 26, 27, 23, 27, 26, 23, 4 ], [ 3, 3, 3, 2, 2, 2, 4, 4, 4 ] ],
      step: 40,
      targetList: [ [ 20, 2 ], [ 25, 17 ], [ 26, 2 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 2, 2, 1, 4, 3, 1, 2, 1 ], [ 3, 1, 1, 1, 1, 4, 3, 3, 2 ], [ 3, 3, 3, 0, 3, 2, 2, 2, 1 ], [ 2, 2, 2, 3, 3, 1, 1, 3, 1 ], [ 1, 2, 21, 21, 21, 21, 21, 1, 2 ], [ 1, 21, -2, -2, -2, -2, -2, 21, 1 ], [ 21, -2, -2, 21, 21, 21, -2, -2, 21 ], [ -2, -2, 21, 2, 1, 1, 21, -2, -2 ], [ -2, 21, 20, 20, 20, 20, 20, 21, -2 ] ],
      step: 40,
      targetList: [ [ 2, 30 ], [ 3, 20 ], [ 20, 5 ], [ 21, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 2e4, 4e4, 6e4 ]
    }, {
      mapList: [ [ 1, 2, 4, -2, 0, 1, -2, 2, 1 ], [ 3, 1, 2, -2, 2, 2, -2, 3, 2 ], [ 3, 3, 3, -2, 1, 2, -2, 2, 1 ], [ 2, 2, 2, -2, 1, 4, -2, 3, 1 ], [ 3, 4, 0, -2, 1, 2, -2, 2, 2 ], [ 1, 3, 1, -2, 2, 2, -2, 1, 1 ], [ 2, 3, 3, -2, 2, 4, -2, 1, 3 ], [ 21, 21, 21, 21, 21, 21, 21, 21, 21 ], [ 21, 21, 21, 20, 20, 20, 21, 21, 1 ] ],
      step: 40,
      targetList: [ [ 2, 20 ], [ 4, 10 ], [ 20, 3 ], [ 21, 14 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 1, 3, -2, 4, 0, 3, 1, 2, 1 ], [ 3, 4, -2, 4, 2, 4, 3, 3, 2 ], [ 3, 4, -2, 0, 0, 2, 2, 2, 1 ], [ 2, 3, -2, 3, 1, 0, 0, 3, 1 ], [ 1, 4, -2, 2, 3, 2, 1, 2, 2 ], [ 1, 3, -2, 1, 4, 3, 1, 2, 2 ], [ 2, 3, -2, -2, -2, -2, -2, -2, -2 ], [ 3, 3, 4, 4, 0, 4, 4, 1, 4 ], [ 2, 2, 1, 1, 2, 2, 2, 2, 1 ] ],
      step: 45,
      targetList: [ [ 0, 30 ], [ 4, 30 ], [ 1, 30 ], [ 2, 30 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, 4, 4, 4, 3, 4, 4, 4, -2 ], [ -2, 1, 3, 3, 3, 3, 3, 1, -2 ], [ -2, 1, 29, 30, 31, 32, 33, 1, -2 ], [ -2, 1, 0, 0, 26, 0, 0, 1, -2 ], [ -2, 1, 0, 0, 26, 0, 0, 1, -2 ], [ -2, 3, 0, 1, 2, 1, 0, 3, -2 ], [ -2, 3, 33, 32, 31, 30, 29, 3, -2 ], [ -2, 3, 0, 0, 0, 0, 0, 3, -2 ], [ -2, 2, 2, 2, 0, 2, 2, 2, -2 ] ],
      step: 35,
      targetList: [ [ 26, 2 ], [ 29, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 4, 4, 4, 2, 2, 2 ], [ 2, 25, 25, 25, 25, 25, 25, 25, 2 ], [ 3, 25, 0, 0, 29, 0, 0, 25, 3 ], [ 3, 25, 29, 29, 27, 29, 29, 25, 3 ], [ 3, 25, 29, 29, 26, 29, 29, 25, 3 ], [ 3, 25, 0, 0, 29, 0, 0, 25, 3 ], [ 1, 25, 25, 25, 25, 25, 25, 25, 1 ], [ 1, 1, 1, 4, 4, 4, 1, 1, 1 ] ],
      step: 35,
      targetList: [ [ 25, 22 ], [ 26, 1 ], [ 27, 1 ], [ 29, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 2, 2, 2, 4, 4, 4, 2, 2, 2 ], [ 2, 23, 23, 23, 23, 23, 23, 23, 2 ], [ 3, 23, 1, 1, 30, 1, 1, 23, 3 ], [ 3, 23, 30, 30, 26, 30, 30, 23, 3 ], [ 3, 23, 30, 30, 26, 30, 30, 23, 3 ], [ 3, 23, 1, 1, 30, 1, 1, 23, 3 ], [ 3, 23, 23, 23, 23, 23, 23, 23, 1 ], [ 3, 3, 4, 4, 4, 4, 1, 1, 1 ] ],
      step: 40,
      targetList: [ [ 25, 22 ], [ 26, 2 ], [ 29, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 2, 2, 3, 3, 3, 3, 2, -2 ], [ -2, 1, 29, 32, 32, 32, 32, 2, -2 ], [ -2, 1, 29, 21, 21, 21, 31, 0, -2 ], [ -2, 1, 29, 21, 27, 21, 31, 0, -2 ], [ -2, 1, 29, 21, 21, 21, 31, 0, -2 ], [ -2, 0, 30, 30, 30, 30, 31, 0, -2 ], [ -2, 0, 1, 1, 1, 1, 1, 1, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 21, 8 ], [ 27, 1 ], [ 29, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 1, 3, 2, 3, 3, 3, 1, 3, 2 ], [ 0, 27, 5, 25, 25, 25, 0, 27, 3 ], [ 3, 3, 3, 25, 26, 25, 4, 4, 4 ], [ 3, 1, 3, 25, 26, 25, 4, 2, 4 ], [ 0, 1, 2, 25, 26, 25, 1, 2, 3 ], [ 0, 27, 2, 25, 25, 25, 1, 27, 3 ], [ 29, 29, 29, 1, 1, 1, 30, 30, 30 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 25, 12 ], [ 26, 3 ], [ 27, 4 ], [ 29, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 1, 1, 3, 3, -2, 3, 3, 1, 1 ], [ 0, 37, 2, 2, -2, 2, 2, 37, 0 ], [ 0, 4, 23, 23, 23, 23, 23, 4, 0 ], [ 4, 4, 23, 2, 2, 1, 23, 4, 4 ], [ -2, -2, 23, 0, 37, 1, 23, -2, -2 ], [ 4, 4, 23, 0, 3, 3, 23, 4, 4 ], [ 0, 4, 23, 23, 23, 23, 23, 4, 0 ], [ 0, 37, 2, 2, -2, 2, 2, 37, 0 ], [ 1, 1, 3, 3, -2, 3, 3, 1, 1 ] ],
      step: 40,
      targetList: [ [ 25, 16 ], [ 37, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 0, 0, 0, 0, 4, 1, 1, 1, 1 ], [ 0, 29, 29, 29, 4, 30, 30, 30, 1 ], [ 0, 29, 26, 29, 37, 30, 26, 30, 1 ], [ 0, 29, 29, 29, 2, 30, 30, 30, 1 ], [ 4, 4, 37, 2, 2, 2, 37, 4, 4 ], [ 2, 31, 31, 31, 2, 32, 32, 32, 3 ], [ 2, 31, 26, 31, 37, 32, 26, 32, 3 ], [ 2, 31, 31, 31, 4, 32, 32, 32, 3 ], [ 2, 2, 2, 2, 4, 3, 3, 3, 3 ] ],
      step: 40,
      targetList: [ [ 26, 4 ], [ 29, 32 ], [ 37, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 29, 29, 0, 0, 3, 32, 32, -2 ], [ -2, 29, 0, 0, 37, 3, 3, 32, -2 ], [ -2, 0, 0, 23, 23, 23, 3, 3, -2 ], [ -2, 1, 37, 23, 27, 23, 37, 3, -2 ], [ -2, 1, 1, 23, 23, 23, 2, 2, -2 ], [ -2, 30, 1, 1, 37, 2, 2, 31, -2 ], [ -2, 30, 30, 1, 2, 2, 31, 31, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 8 ], [ 27, 1 ], [ 28, 3 ], [ 29, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 4, 8 ], 1 ], [ [ 5, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 1 ], [ 5, 2 ] ], [ [ 6, 1 ], [ 7, 4 ] ], [ [ 6, 2 ], [ 7, 5 ] ] ]
    }, {
      mapList: [ [ 1, 1, 1, -2, -2, -2, 2, 2, 2 ], [ 1, 22, 37, 22, 37, 22, 37, 22, 2 ], [ 1, 37, 22, 0, 22, 2, 22, 37, 2 ], [ -2, 22, 0, 29, 30, 31, 2, 22, -2 ], [ -2, 37, 22, 31, 27, 32, 22, 37, -2 ], [ -2, 22, 1, 30, 31, 33, 4, 22, -2 ], [ 0, 37, 22, 1, 22, 4, 22, 37, 3 ], [ 0, 22, 37, 22, 37, 22, 37, 22, 3 ], [ 0, 0, 0, -2, -2, -2, 3, 3, 3 ] ],
      step: 40,
      targetList: [ [ 27, 1 ], [ 28, 2 ], [ 29, 8 ], [ 37, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 3 ], [ 4, 4 ] ], [ [ 5, 2 ], [ 8, 3 ] ] ]
    }, {
      mapList: [ [ 21, 3, 3, 21, 4, 4, 21, 0, 21 ], [ 21, 32, 32, 21, 33, 33, 21, 29, 21 ], [ 21, 32, 32, 21, 33, 33, 21, 29, 21 ], [ 21, 3, 3, 21, 4, 4, 21, 0, 21 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 21, 0, 0, 21, 1, 1, 21, 2, 21 ], [ 21, 29, 29, 21, 30, 30, 21, 31, 21 ], [ 21, 29, 29, 21, 30, 30, 21, 31, 21 ], [ 21, 0, 0, 21, 1, 1, 21, 2, 21 ] ],
      step: 45,
      targetList: [ [ 21, 32 ], [ 29, 20 ], [ 38, 36 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 3, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 0, 0, 0, 0, 1, 1, 4, 4, 4 ], [ 1, 32, 32, 1, 37, 1, 31, 31, 0 ], [ 1, 32, 32, 23, 23, 23, 31, 31, 0 ], [ 1, 1, 37, 23, 27, 23, 37, 1, 1 ], [ 1, 31, 31, 23, 23, 23, 32, 32, 1 ], [ 1, 31, 31, 1, 37, 1, 32, 32, 1 ], [ 4, 4, 4, 1, 1, 0, 0, 0, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 27, 1 ], [ 29, 16 ], [ 37, 4 ], [ 38, 28 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      bubbleList: [ [ [ 0, 3 ], [ 8, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, 4, 4, -2, -2, -2, 3, 3, -2 ], [ 4, 33, 33, 4, 0, 3, 32, 32, 3 ], [ 4, 33, 33, 4, 0, 3, 32, 32, 3 ], [ -2, 39, 39, 2, 2, 2, 39, 39, -2 ], [ -2, 39, 39, 27, 3, 27, 39, 39, -2 ], [ -2, 39, 39, 4, 4, 4, 39, 39, -2 ], [ 0, 29, 29, 0, 0, 1, 30, 30, 1 ], [ 0, 29, 29, 0, 0, 1, 30, 30, 1 ], [ -2, 0, 0, -2, -2, -2, 1, 1, -2 ] ],
      step: 45,
      targetList: [ [ 27, 2 ], [ 29, 16 ], [ 39, 12 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 39, 30, 30, 30, 1, 1, 30, 30, 39 ], [ -2, 39, 30, 1, 30, 1, 30, 39, -2 ], [ -2, -2, 39, 1, 1, 30, 39, -2, -2 ], [ -2, -2, -2, 39, 30, 39, -2, -2, -2 ], [ -2, -2, -2, -2, 20, -2, -2, -2, -2 ], [ -2, -2, -2, 20, 20, 20, -2, -2, -2 ], [ -2, -2, 0, 0, 0, 0, 0, -2, -2 ], [ -2, 29, 0, 4, 4, 4, 0, 29, -2 ], [ 3, 29, 0, 4, 4, 4, 0, 29, 3 ] ],
      step: 40,
      targetList: [ [ 20, 4 ], [ 29, 14 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 4, -2, 4, -2, 4, -2, -2 ], [ -2, 22, 4, 22, 4, 22, 4, 22, -2 ], [ 4, 4, 39, 2, 39, 2, 39, 4, 4 ], [ -2, 22, 37, 2, 37, 2, 37, 22, -2 ], [ 4, 4, 39, 2, 39, 2, 39, 4, 4 ], [ -2, 22, 4, 22, 4, 22, 4, 22, -2 ], [ -2, -2, 4, -2, 4, -2, 4, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 28, 2 ], [ 37, 3 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 3 ], [ 4, 4 ] ], [ [ 5, 3 ], [ 6, 6 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 2, 2, 2, -2, -2, -2 ], [ -2, 23, 39, 0, 0, 1, 39, 23, -2 ], [ -2, 1, -2, 0, 1, 1, -2, 1, -2 ], [ 1, 1, -2, 2, 2, 3, -2, 1, 1 ], [ 1, 3, -2, 2, 2, 3, -2, 3, 1 ], [ 1, 1, -2, 3, 2, 2, -2, 1, 1 ], [ -2, 3, -2, 1, 3, 2, -2, 3, -2 ], [ -2, 23, 39, 1, 1, 3, 39, 23, -2 ], [ -2, -2, -2, 0, 0, 0, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 38, 14 ], [ 39, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      bubbleList: [ [ [ 1, 0 ], [ 1, 8 ], 1 ], [ [ 7, 0 ], [ 7, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, 2, 2, 0, 0, 0, 2, 2, -2 ], [ -2, 2, 4, 4, 0, 4, 4, 2, -2 ], [ 4, 0, 0, 0, 1, 0, 0, 0, 4 ], [ 4, 3, 3, 1, 3, 1, 3, 3, 4 ], [ 0, 0, 1, 1, 1, 1, 1, 0, 0 ], [ 0, 3, 3, 1, 3, 1, 3, 3, 0 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ -2, 20, -2, 20, -2, 20, -2, 20, -2 ] ],
      step: 45,
      targetList: [ [ 20, 4 ], [ 38, 40 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 2, 0 ], [ 6, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 23, 23, 23, -2, -2, 23, 23 ], [ -2, 3, 23, 2, 2, 23, 2, 2, 23 ], [ -2, 3, 27, 2, 2, 27, 2, 2, 3 ], [ 23, 37, 23, 37, 23, 37, 23, 37, 3 ], [ 0, 0, 2, 2, 4, 2, 2, 0, -2 ], [ 25, 25, 27, 2, 4, 27, 2, 2, -2 ], [ -2, -2, 25, 39, 25, 39, 25, 39, -2 ], [ -2, -2, 39, 25, 39, 25, 39, -2, -2 ] ],
      step: 45,
      targetList: [ [ 25, 19 ], [ 27, 4 ], [ 37, 4 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, 0, -2, -2, -2, 0, -2, -2 ], [ 0, 0, 0, -2, -2, -2, 0, 0, 5 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 3, 3, 23, 39, 39, 39, 23, 3, 3 ], [ 3, 3, 23, 26, 26, 26, 23, 3, 3 ], [ 3, 3, 23, 39, 39, 39, 23, 3, 3 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 0, 0, 0, -2, -2, -2, 0, 0, 0 ], [ -2, -2, 0, -2, -2, -2, 0, -2, -2 ] ],
      step: 50,
      targetList: [ [ 25, 16 ], [ 26, 3 ], [ 38, 25 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ 2, 3, 3, 2, 2, 3, 3, 2, -2 ], [ 2, -2, -2, -2, -2, 3, 3, 2, -2 ], [ 2, 30, 30, 30, 30, 4, 4, 2, -2 ], [ 3, 31, 31, 31, 31, 33, 33, 33, 4 ], [ 0, 2, 2, 3, 3, 2, 2, 2, 4 ], [ 0, -2, -2, -2, -2, -2, -2, 30, 0 ], [ 0, 30, 1, 1, 30, 1, 1, 30, 0 ], [ -2, 39, 22, 22, 39, 22, 22, 39, 22 ], [ -2, 3, 3, 2, 2, 3, 3, 2, 2 ] ],
      step: 45,
      targetList: [ [ 29, 15 ], [ 38, 20 ], [ 39, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, 1, 1, 1, 1, 1, 1, 1, -2 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ 22, 22, 37, 22, 37, 22, 37, 22, 22 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ 22, 22, 37, 22, 37, 22, 37, 22, 22 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ -2, 1, 1, 1, 1, 1, 1, 1, -2 ] ],
      step: 45,
      targetList: [ [ 21, 14 ], [ 38, 36 ], [ 37, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      bubbleList: [ [ [ 1, 0 ], [ 2, 8 ], 1 ], [ [ 6, 0 ], [ 7, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, 25, 2, 25, 2, 25, -2, -2 ], [ -2, 25, 25, 2, 25, 2, 25, 25, -2 ], [ 2, 2, -2, -2, 1, -2, -2, 2, 2 ], [ 2, 2, -2, 39, 1, 39, -2, 2, 2 ], [ 25, 25, 1, 1, 39, 1, 1, 25, 25 ], [ 0, 0, -2, 39, 1, 39, -2, 0, 0 ], [ 0, 0, -2, -2, 1, -2, -2, 0, 0 ], [ -2, 25, 25, 1, 25, 1, 25, 25, -2 ], [ -2, -2, 25, 1, 25, 1, 25, -2, -2 ] ],
      step: 50,
      targetList: [ [ 38, 13 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      bubbleList: [ [ [ 2, 2 ], [ 6, 6 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, 25, 4, 4, 4, 25, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, 3, 3, 2, -2, 2, 3, 3, -2 ], [ -2, 25, 37, 2, -2, 2, 37, 25, -2 ], [ -2, 1, 1, 39, -2, 39, 1, 1, -2 ], [ -2, 25, 39, 25, -2, 25, 39, 25, -2 ], [ -2, 39, 37, 39, -2, 39, 37, 39, -2 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ -2, -2, 2, 2, 3, 2, 2, -2, -2 ] ],
      step: 50,
      targetList: [ [ 25, 19 ], [ 37, 4 ], [ 39, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, 3, 3, 2, 2, 2, 3, 3, -2 ], [ 2, 3, 3, 2, 2, 2, 3, 3, 2 ], [ 2, 1, 23, 23, 23, 23, 23, 1, 2 ], [ -2, 1, 2, 2, 27, 2, 2, 1, -2 ], [ -2, 4, 23, 23, 23, 23, 23, 4, -2 ], [ -2, 2, 2, 2, 27, 2, 2, 2, -2 ], [ 2, 2, 23, 23, 23, 23, 23, 2, 2 ], [ 2, 3, 39, 39, 39, 39, 39, 3, 2 ], [ -2, 3, 3, 39, 39, 39, 3, 3, -2 ] ],
      step: 45,
      targetList: [ [ 25, 15 ], [ 27, 2 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ 39, 1, 1, 2, 2, 2, 0, 0, 39 ], [ -2, 1, 1, 3, 2, 3, 0, 0, -2 ], [ 39, 2, 2, 3, 3, 3, 2, 2, 39 ], [ -2, 0, 0, 3, 2, 3, 1, 1, -2 ], [ 39, 0, 0, 2, 2, 2, 1, 1, 39 ], [ -2, 39, -2, 39, -2, 39, -2, 39, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 39, 14 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 1, 2, 2, -2, 1, 2, 1, 2 ], [ 1, 1, 1, 2, -2, 4, 4, 1, 1 ], [ 1, 1, 1, 2, -2, 2, 4, 1, 1 ], [ 0, 2, 2, 2, -2, 3, 4, 4, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 20, 1, 21, 20, -2, 20, 2, 21, 20 ], [ 21, 1, 21, 21, -2, 21, 2, 21, 21 ], [ 21, 2, 21, 21, -2, 21, 1, 21, 21 ], [ 20, 2, 21, 20, -2, 20, 1, 21, 20 ] ],
      step: 30,
      targetList: [ [ 20, 8 ], [ 21, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 25, 25, 2, 2, 0, 0, 4, 1, 1 ], [ 4, 4, 25, 25, 3, 3, 2, 1, 4 ], [ 1, 1, 1, 1, 25, 25, 0, 0, 1 ], [ 22, 22, 22, 22, 22, 22, 25, 25, 1 ], [ 21, 21, 21, 21, 21, 1, 4, 4, 25 ], [ 0, 21, 21, 0, 3, 3, 25, 25, 21 ], [ 3, 3, 2, 2, 25, 25, 21, 21, 21 ], [ 1, 1, 25, 25, 3, 3, 21, 21, 21 ], [ 25, 25, 0, 0, 20, 20, 20, 20, 20 ] ],
      step: 45,
      targetList: [ [ 4, 10 ], [ 20, 5 ], [ 21, 14 ], [ 25, 17 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 2, 2, 2, 3, 3, 3, 1, 1, 1 ], [ 4, 4, 4, 1, 1, 1, 4, 4, 4 ], [ 1, 1, 1, 23, 23, 23, 1, 1, 1 ], [ 0, 2, 3, 23, 26, 23, 3, 2, 0 ], [ 0, 2, 3, 23, 26, 23, 3, 2, 0 ], [ 0, 2, 3, 23, 23, 23, 3, 2, 0 ], [ 1, 1, 1, 4, 4, 4, 1, 1, 1 ], [ 4, 4, 4, 2, 2, 2, 4, 4, 4 ], [ 1, 1, 1, 3, 3, 3, 2, 2, 2 ] ],
      step: 45,
      targetList: [ [ 25, 10 ], [ 26, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ -2, 0, 0, 4, 4, 4, 0, 0, -2 ], [ -2, 1, 26, 26, 26, 26, 26, 3, -2 ], [ -2, 1, 26, 27, 2, 27, 26, 3, -2 ], [ -2, 1, 26, 2, 2, 2, 26, 3, -2 ], [ -2, 1, 26, 27, 2, 27, 26, 3, -2 ], [ -2, 1, 26, 26, 26, 26, 26, 3, -2 ], [ -2, 3, 3, 2, 2, 2, 1, 1, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 50,
      targetList: [ [ 26, 16 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ], [ -2, 22, 1, 0, 0, 0, 1, 22, -2 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ 22, 0, 21, 2, 2, 2, 21, 0, 22 ], [ 22, 0, 21, -2, -2, -2, 21, 0, 22 ], [ 22, 0, 21, 39, 39, 39, 21, 0, 22 ], [ -2, 1, 21, 21, 21, 21, 21, 1, -2 ], [ -2, 22, 1, 0, 0, 0, 1, 22, -2 ], [ -2, -2, -2, 22, 22, 22, -2, -2, -2 ] ],
      step: 35,
      targetList: [ [ 21, 16 ], [ 39, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 0, 39, 27, 0, -2, 0, 27, 39, 0 ], [ 0, 1, 1, 0, -2, 0, 1, 1, 0 ], [ 22, 22, 22, 1, -2, 22, 22, 22, 1 ], [ 0, 39, 27, 0, -2, 0, 27, 39, 0 ], [ 0, 1, 1, 0, -2, 0, 1, 1, 0 ], [ 22, 22, 22, 1, -2, 22, 22, 22, 1 ], [ 0, 39, 27, 0, -2, 0, 27, 39, 0 ], [ 0, 1, 1, 0, -2, 0, 1, 1, 0 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 27, 6 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 4, 2, 1, 1, 4, 1, 1, 2, 4 ], [ 4, 2, 0, 0, 4, 0, 0, 2, 4 ], [ 4, 2, 29, 39, 29, 39, 29, 2, 4 ], [ -2, -2, 2, 2, 0, 2, 2, -2, -2 ], [ -2, -2, 2, 2, 0, 2, 2, -2, -2 ], [ -2, -2, 30, 0, 30, 0, 30, -2, -2 ], [ 0, 0, 3, 3, 1, 3, 3, 0, 0 ], [ 0, 0, 3, 3, 1, 3, 3, 0, 0 ], [ -2, -2, 39, 39, 39, 39, 39, -2, -2 ] ],
      step: 40,
      targetList: [ [ 28, 2 ], [ 29, 6 ], [ 39, 7 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 3, 3 ], [ 4, 6 ] ], [ [ 1, 4 ], [ 2, 7 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, 0, 0, 0, -2, -2, -2 ], [ 1, 1, 1, 0, 0, 0, 1, 1, 1 ], [ 1, 26, 1, 0, 26, 0, 1, 26, 1 ], [ 2, 2, 3, 3, 0, 3, 3, 2, 2 ], [ 21, 39, 21, 21, 39, 21, 21, 39, 21 ], [ 21, 39, 21, 21, 39, 21, 21, 39, 21 ], [ 2, 2, 3, 3, 0, 3, 3, 2, 2 ], [ 0, 26, 0, 0, 26, 0, 0, 26, 0 ], [ 0, 0, 0, -2, -2, -2, 0, 0, 0 ] ],
      step: 45,
      targetList: [ [ 21, 10 ], [ 26, 6 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ]
    }, {
      mapList: [ [ 2, 2, 1, 1, 3, 3, 3, 2, 2 ], [ 2, 2, 1, 1, 3, 3, 3, 2, 2 ], [ 3, 3, 29, 29, 29, 29, 29, 1, 1 ], [ 3, 3, 29, 27, 26, 27, 29, 1, 1 ], [ 3, 3, 29, 27, 26, 27, 29, 3, 3 ], [ 1, 1, 29, 27, 26, 27, 29, 3, 3 ], [ 1, 1, 29, 29, 29, 29, 29, 3, 3 ], [ 2, 2, 3, 3, 3, 1, 1, 2, 2 ], [ 2, 2, 3, 3, 3, 1, 1, 2, 2 ] ],
      step: 40,
      targetList: [ [ 26, 3 ], [ 27, 6 ], [ 29, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 25, 25, 25, 25, 25, 25, 25, 25, 25 ], [ 3, 3, 3, 21, 21, 21, 21, 21, 25 ], [ 2, 2, 2, 31, 31, 31, 4, 4, 25 ], [ 2, 2, 21, 21, 21, 21, 3, 4, 25 ], [ 1, 1, 30, 30, 30, 30, 3, 4, 25 ], [ 1, 21, 21, 21, 21, 2, 3, 4, 25 ], [ 0, 29, 29, 29, 29, 2, 3, 4, 25 ], [ 0, 21, 21, 21, 21, 2, 3, 2, 25 ], [ 0, 0, 1, 1, 1, 1, 3, 2, 25 ] ],
      step: 40,
      targetList: [ [ 21, 17 ], [ 25, 17 ], [ 29, 11 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 2, 2, 0, 2, 2, 2, 0, 1, 1 ], [ 2, 2, 0, 0, 2, 0, 0, 1, 1 ], [ 0, 0, 33, 33, 33, 33, 33, 0, 0 ], [ 2, 0, 33, 23, 23, 23, 33, 0, 2 ], [ 2, 2, 33, 23, 20, 23, 33, 2, 2 ], [ 2, 0, 33, 23, 23, 23, 33, 0, 2 ], [ 0, 0, 33, 33, 33, 33, 33, 0, 0 ], [ 0, 0, 0, 0, 2, 0, 0, 3, 3 ], [ 0, 0, 0, 2, 2, 2, 0, 3, 3 ] ],
      step: 40,
      targetList: [ [ 20, 1 ], [ 25, 8 ], [ 29, 16 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 4, 4, 3, 3, 3, 2, 2, 0, 0 ], [ 4, 31, 31, 31, 3, 2, 2, 0, 0 ], [ 0, 0, 1, 1, 1, 0, 0, 3, 3 ], [ 3, 3, 1, 1, 1, 30, 30, 30, 0 ], [ 1, 2, 2, 4, 2, 2, 1, 0, 0 ], [ 1, 2, 29, 29, 29, 2, 1, 1, 1 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 0, 0, 2, 2, 2, 1, 1, -2 ], [ -2, 0, 0, 2, 2, 2, 1, 1, -2 ] ],
      step: 40,
      targetList: [ [ 28, 3 ], [ 29, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 3 ], [ 5, 4 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
    }, {
      mapList: [ [ 4, 4, 2, 2, 2, 2, -2, -2, -2 ], [ -2, -2, 3, 3, 2, 1, 1, -2, -2 ], [ 2, -2, 3, 37, 4, 37, 1, 2, -2 ], [ 2, -2, 2, 4, 4, 2, 3, 3, 2 ], [ 1, -2, -2, 39, 39, 39, 3, 37, 4 ], [ 1, 2, -2, -2, -2, -2, 2, 4, 4 ], [ 37, 2, 39, 39, 39, -2, -2, -2, -2 ], [ 23, 23, 23, 23, 23, 23, 23, 23, -2 ], [ 0, 0, 37, 0, 0, 37, 2, 2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 8 ], [ 37, 6 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, -2, 4, -2, 4, -2, 4, -2, -2 ], [ -2, 22, 4, 22, 4, 22, 4, 22, -2 ], [ 4, 4, 39, 2, 39, 2, 39, 4, 4 ], [ -2, 22, 37, 2, 37, 2, 37, 22, -2 ], [ 4, 4, 39, 2, 39, 2, 39, 4, 4 ], [ -2, 22, 4, 22, 4, 22, 4, 22, -2 ], [ -2, -2, 4, -2, 4, -2, 4, -2, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 28, 2 ], [ 37, 3 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 3 ], [ 4, 4 ] ], [ [ 5, 3 ], [ 6, 6 ] ] ]
    }, {
      mapList: [ [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ 0, 1, 1, 2, 2, 2, 1, 1, 0 ], [ 0, 26, 0, 2, 39, 2, 0, 26, 0 ], [ 0, 0, 0, 2, 39, 2, 0, 0, 0 ], [ -2, 4, 39, 39, 39, 39, 39, 4, -2 ], [ 0, 0, 0, 2, 39, 2, 0, 0, 0 ], [ 0, 26, 0, 2, 39, 2, 0, 26, 0 ], [ 0, 1, 1, 2, 2, 2, 1, 1, 0 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ] ],
      step: 45,
      targetList: [ [ 26, 4 ], [ 28, 3 ], [ 39, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      grassList: [ [ [ 0, 0 ], [ 1, 8 ], 2 ], [ [ 2, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 5, 8 ], 2 ], [ [ 6, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 2, 3 ], [ 3, 6 ] ], [ [ 5, 3 ], [ 6, 6 ] ], [ [ 1, 3 ], [ 4, 4 ] ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ], [ -2, 39, 39, 39, 39, 39, 39, 39, -2 ], [ -2, 3, 3, 3, 4, 4, 4, 2, -2 ], [ -2, 1, 3, 0, 0, 4, 2, 2, -2 ], [ 0, 1, 1, 0, 0, 1, 1, 1, 0 ], [ 0, 0, -2, 3, 3, 3, -2, 0, 0 ], [ -2, -2, -2, 3, 3, 3, -2, -2, -2 ] ],
      step: 45,
      targetList: [ [ 38, 21 ], [ 39, 21 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      bubbleList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, 1, 1, 1, 1, 1, 1, 1, -2 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ 22, 22, 37, 22, 37, 22, 37, 22, 22 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ -2, 2, 2, -2, -2, -2, 2, 2, -2 ], [ -2, 1, 1, -2, -2, -2, 1, 1, -2 ], [ 22, 22, 37, 22, 37, 22, 37, 22, 22 ], [ 1, 21, 21, 21, 21, 21, 21, 21, 1 ], [ -2, 1, 1, 1, 1, 1, 1, 1, -2 ] ],
      step: 45,
      targetList: [ [ 21, 14 ], [ 37, 6 ], [ 38, 36 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ],
      bubbleList: [ [ [ 1, 0 ], [ 2, 8 ], 1 ], [ [ 6, 0 ], [ 7, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, 25, 4, 4, 4, 25, -2, -2 ], [ 39, 25, 25, 25, 25, 25, 25, 25, 39 ], [ -2, 3, 3, 2, -2, 2, 3, 3, -2 ], [ -2, 25, 37, 2, -2, 2, 37, 25, -2 ], [ -2, 1, 1, 39, -2, 39, 1, 1, -2 ], [ -2, 25, 39, 25, -2, 25, 39, 25, -2 ], [ -2, 39, 37, 39, -2, 39, 37, 39, -2 ], [ 0, 0, 25, 25, 3, 25, 25, 0, 0 ], [ -2, -2, 2, 2, 3, 2, 2, -2, -2 ] ],
      step: 50,
      targetList: [ [ 25, 19 ], [ 37, 4 ], [ 39, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ 3, -2, -2, -2, -2, -2, -2, -2, 3 ], [ 3, 2, 3, 3, 4, 3, 3, 2, 3 ], [ -2, 2, -2, -2, 37, -2, -2, 2, -2 ], [ -2, 1, -2, 39, 39, 39, -2, 1, -2 ], [ -2, 1, 37, 39, 39, 39, 37, 1, -2 ], [ -2, 1, -2, 39, 39, 39, -2, 1, -2 ], [ -2, 2, -2, -2, 37, -2, -2, 2, -2 ], [ 3, 2, 3, 3, 4, 3, 3, 2, 3 ], [ 3, -2, -2, -2, -2, -2, -2, -2, 3 ] ],
      step: 35,
      targetList: [ [ 37, 4 ], [ 39, 9 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 6e3, 12e3, 18e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 23, 23, 39, 23, 23, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 3, 3, 23, 3, 3, 22, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 8 ], [ 39, 1 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ 2, 2, 2, 2, 4, 4, 2, 2, 4 ], [ 4, 3, 3, 4, -2, -2, -2, -2, 4 ], [ 1, 1, 0, 0, -2, -2, -2, -2, 2 ], [ 4, 2, 2, 4, -2, -2, -2, -2, 2 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 4, 1, 1, 4, 3, 3, 4, 2, 2 ], [ 3, 3, -2, -2, -2, -2, -2, 3, 3 ], [ 3, 3, -2, -2, -2, -2, -2, 3, 3 ], [ 2, 20, 39, 39, 20, 39, 39, 20, 2 ] ],
      step: 40,
      targetList: [ [ 20, 3 ], [ 39, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, 4, 4, 3, 4, 4, -2, -2, -2 ], [ -2, 4, 4, 3, 4, 4, 4, 2, 2 ], [ -2, 22, 3, 3, 3, 3, 4, 22, 2 ], [ 3, 22, 26, -2, -2, -2, 26, 22, 2 ], [ 22, 22, 22, -2, -2, -2, 22, 22, 22 ], [ 3, 22, 26, -2, -2, -2, 26, 22, 3 ], [ 3, 22, 1, -2, -2, -2, 1, 22, -2 ], [ 1, 1, 3, 3, 3, 3, 1, 1, -2 ], [ 3, 3, 39, 39, 39, 39, 39, 3, -2 ] ],
      step: 40,
      targetList: [ [ 26, 4 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 8e3, 16e3, 24e3 ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 21, 0, 0, 0, 39, 0, 0, 0, 21 ], [ -2, 4, 4, 4, -2, 4, 4, 4, -2 ], [ 21, 0, 0, 0, 39, 0, 0, 0, 21 ], [ -2, 3, 3, 3, -2, 3, 3, 3, -2 ], [ 21, 0, 0, 0, 39, 0, 0, 0, 21 ], [ -2, 1, 1, 1, -2, 1, 1, 1, -2 ], [ 21, 2, 2, 2, 39, 2, 2, 2, 21 ], [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 21, 8 ], [ 39, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ -2, -2, -2, 2, 2, -2, -2, -2, -2 ], [ -2, 2, 1, 1, 1, -2, -2, -2, -2 ], [ -2, 2, 1, 2, 2, 2, 2, -2, -2 ], [ 2, 23, 23, 37, 3, 3, 2, -2, -2 ], [ 23, 23, 23, 23, 3, 3, 2, 2, -2 ], [ 2, 3, 3, 23, 23, 23, 23, 1, -2 ], [ 2, 3, 3, 37, 23, 23, 2, 1, -2 ], [ 2, 2, 39, 39, 39, 2, 2, 2, -2 ], [ -2, -2, 39, 39, 39, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 12 ], [ 37, 2 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ]
    }, {
      mapList: [ [ 1, 2, 2, 1, 0, 3, 1, 2, 1 ], [ 3, 1, 1, 1, 2, 4, 3, 3, 2 ], [ -2, -2, -2, -2, 1, 2, 2, 2, 1 ], [ 21, 21, 21, -2, 1, 1, 1, 3, 1 ], [ 1, 2, 21, -2, 3, 2, 1, 2, 2 ], [ 1, 3, 21, -2, -2, -2, -2, 1, 1 ], [ 2, 3, 21, 21, 21, 21, -2, 1, 3 ], [ 3, 2, 2, 2, 1, 21, -2, 3, 2 ], [ 2, 20, 1, 20, 20, 20, -2, 20, 1 ] ],
      step: 45,
      targetList: [ [ 4, 20 ], [ 0, 20 ], [ 20, 5 ], [ 21, 10 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 2e4, 4e4, 6e4 ]
    }, {
      mapList: [ [ 1, 2, 2, 1, -2, 3, 1, 2, 1 ], [ 3, 1, 1, 1, -2, 4, 3, 3, 2 ], [ 3, 3, 3, 0, -2, 2, 2, 2, 1 ], [ 22, 22, 22, 22, -2, 22, 22, 22, 22 ], [ 1, 2, 3, 4, -2, 2, 1, 2, 2 ], [ 1, 3, -2, -2, -2, -2, -2, 1, 1 ], [ 2, -2, -2, 1, 2, 2, -2, -2, 3 ], [ -2, -2, 20, 20, 20, 20, 20, -2, -2 ], [ -2, 2, 1, 1, 2, 2, 2, 2, -2 ] ],
      step: 40,
      targetList: [ [ 3, 20 ], [ 4, 20 ], [ 0, 20 ], [ 20, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 2e4, 4e4, 6e4 ]
    }, {
      mapList: [ [ 0, 0, 0, 1, 1, 1, 0, 0, 0 ], [ 2, 26, 2, 26, 3, 26, 2, 26, 2 ], [ 4, 4, 4, 0, 0, 0, 4, 4, 4 ], [ 22, 22, 22, 22, 22, 22, 22, 22, 22 ], [ 3, 3, 3, 23, 3, 3, 3, 23, 3 ], [ 1, 27, 1, 27, 1, 27, 1, 27, 1 ], [ 1, 2, 1, 2, 1, 2, 1, 2, 1 ], [ 0, 26, 0, 26, 0, 26, 0, 26, 0 ], [ 0, 1, 0, 1, 0, 1, 0, 1, 0 ] ],
      step: 35,
      targetList: [ [ 25, 2 ], [ 26, 8 ], [ 27, 4 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 3, 3, 0, 0, 2, 2, 2, 3, 3 ], [ 3, 3, 1, 1, 1, 3, 23, 3, 3 ], [ 0, 0, 22, 22, 22, 0, 23, 0, 0 ], [ 2, 2, 22, 26, 22, 2, 27, 2, 2 ], [ 2, 2, 22, 26, 22, 2, 27, 2, 2 ], [ 1, 1, 22, 22, 22, 1, 23, 1, 1 ], [ 0, 0, 1, 1, 1, 4, 23, 2, 2 ], [ 0, 0, 2, 2, 2, 4, 4, 2, 2 ], [ 2, 2, 3, 3, 3, 2, 2, 3, 3 ] ],
      step: 40,
      targetList: [ [ 25, 4 ], [ 26, 2 ], [ 27, 2 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 2 ], [ [ 3, 0 ], [ 8, 8 ], 1 ] ],
      stoneList: [ [ [ 1, 1 ], [ 2, 1 ] ], [ [ 2, 3 ], [ 5, 4 ] ], [ [ 5, 4 ], [ 8, 5 ] ] ]
    }, {
      mapList: [ [ 0, 0, 1, 1, 4, 1, 1, 0, 0 ], [ 0, 0, 1, 1, 4, 1, 1, 0, 0 ], [ 1, 1, 24, 21, 24, 21, 24, 1, 1 ], [ 1, 1, 21, 21, 21, 21, 21, 1, 1 ], [ 2, 2, 23, 21, 23, 21, 23, 2, 2 ], [ 2, 2, 21, 21, 21, 21, 21, 2, 2 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ 1, 1, 0, 0, 4, 0, 0, 1, 1 ], [ -2, -2, 3, 3, 4, 3, 3, -2, -2 ] ],
      step: 40,
      targetList: [ [ 21, 14 ], [ 25, 6 ], [ 28, 3 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 4 ], [ 5, 5 ] ], [ [ 3, 1 ], [ 7, 2 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ -2, 1, 1, 3, 2, 3, 1, 1, -2 ], [ -2, 1, 1, 3, 2, 3, 1, 1, -2 ], [ -2, 3, -2, -2, -2, 2, 2, 2, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 3, 3, 3, -2, -2, -2, 3, -2 ], [ -2, 25, 25, 25, 25, 25, 25, 25, -2 ], [ -2, 39, 4, 4, 4, 39, 39, 39, -2 ], [ -2, 3, 3, 3, 3, 3, 3, 3, -2 ], [ -2, 39, 39, 39, 39, -2, -2, -2, -2 ] ],
      step: 40,
      targetList: [ [ 25, 14 ], [ 38, 18 ], [ 39, 8 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 1e4, 2e4, 3e4 ],
      bubbleList: [ [ [ 3, 1 ], [ 5, 7 ], 1 ] ]
    }, {
      mapList: [ [ -2, -2, -2, -2, -2, -2, -2, -2, -2 ], [ 25, 3, 25, 25, 3, 25, 25, 3, 25 ], [ 25, 3, 25, 25, 3, 25, 25, 3, 25 ], [ -2, -2, 25, 1, 1, 1, 25, -2, -2 ], [ -2, -2, 25, 25, 3, 25, 25, -2, -2 ], [ -2, -2, -2, 25, 3, 25, -2, -2, -2 ], [ -2, -2, -2, 39, 39, 39, -2, -2, -2 ], [ 0, 0, 39, 39, 39, 39, 39, 0, 0 ], [ 0, 0, 39, 39, 39, 39, 39, 0, 0 ] ],
      step: 45,
      targetList: [ [ 25, 20 ], [ 39, 13 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 9e3, 18e3, 27e3 ]
    }, {
      mapList: [ [ -2, 21, 1, 21, 21, 21, 1, 21, -2 ], [ -2, 21, 1, 21, 21, 21, 1, 21, -2 ], [ -2, -2, -2, -2, 21, -2, -2, -2, -2 ], [ -2, 21, 21, 21, 27, 21, 21, 21, -2 ], [ -2, -2, -2, -2, 21, -2, -2, -2, -2 ], [ -2, 21, 21, 21, 27, 21, 21, 21, -2 ], [ -2, -2, -2, -2, 21, -2, -2, -2, -2 ], [ -2, 21, 1, 21, 21, 21, 1, 21, -2 ], [ -2, 21, 1, 21, 21, 21, 1, 21, -2 ] ],
      step: 35,
      targetList: [ [ 21, 35 ], [ 27, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 0, 1, 1, 0, 1, 1, 0, 1, 0 ], [ 1, 3, 1, 1, 2, 2, 1, 3, 1 ], [ 1, 3, 32, 32, 32, 32, 32, 3, 1 ], [ -2, 3, 0, 0, 26, 0, 0, 3, -2 ], [ -2, 1, 37, -2, 26, -2, 37, 1, -2 ], [ 0, 1, 0, 0, 26, 0, 0, 1, 0 ], [ 0, 2, 33, 33, 33, 33, 33, 2, 1 ], [ 1, 2, 2, 4, 4, 4, 2, 2, 0 ], [ 0, 0, 1, 0, 0, 1, 0, 0, 1 ] ],
      step: 40,
      targetList: [ [ 26, 3 ], [ 28, 3 ], [ 29, 10 ], [ 37, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ],
      grassList: [ [ [ 0, 0 ], [ 3, 8 ], 1 ], [ [ 4, 0 ], [ 7, 8 ], 2 ] ],
      stoneList: [ [ [ 2, 4 ], [ 5, 5 ] ], [ [ 3, 1 ], [ 7, 2 ] ], [ [ 6, 6 ], [ 7, 6 ] ] ]
    }, {
      mapList: [ [ 22, 1, 1, 22, 22, 22, 1, 1, 22 ], [ -2, -2, 22, 22, -2, 22, 22, -2, -2 ], [ -2, 22, 1, 22, 3, 22, 1, 22, -2 ], [ -2, 22, 1, 22, 3, 22, 1, 22, -2 ], [ -2, -2, 22, -2, -2, -2, 22, -2, -2 ], [ -2, -2, 22, -2, -2, -2, 22, -2, -2 ], [ -2, 22, 1, 39, 39, 39, 1, 22, -2 ], [ -2, 22, 1, 39, 39, 39, 1, 22, -2 ], [ -2, 22, 20, -2, -2, -2, 20, 22, -2 ] ],
      step: 35,
      targetList: [ [ 20, 2 ], [ 38, 14 ], [ 39, 6 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 12e3, 24e3, 36e3 ],
      bubbleList: [ [ [ 2, 0 ], [ 3, 8 ], 1 ] ]
    }, {
      mapList: [ [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ], [ -2, 3, 2, 2, 4, 2, 2, 3, -2 ], [ -2, 3, 23, 23, 23, 23, 23, 3, -2 ], [ -2, 22, 1, 22, 26, 22, 1, 22, -2 ], [ -2, 22, 1, 22, 26, 22, 1, 22, -2 ], [ -2, 22, 1, 22, 26, 22, 1, 22, -2 ], [ -2, 0, 39, 23, 23, 23, 39, 0, -2 ], [ -2, 0, 1, 1, 22, 1, 1, 0, -2 ], [ -2, 22, 22, 22, 22, 22, 22, 22, -2 ] ],
      step: 35,
      targetList: [ [ 25, 8 ], [ 26, 3 ], [ 39, 2 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    }, {
      mapList: [ [ 23, 23, 23, 23, 23, 23, 23, 23, 23 ], [ 2, 3, 4, 2, 2, 2, 4, 3, 2 ], [ 2, 27, 22, 22, 22, 22, 22, 27, 2 ], [ -2, 23, -2, -2, -2, -2, -2, 23, -2 ], [ -2, 23, -2, -2, -2, -2, -2, 23, -2 ], [ -2, 23, -2, -2, -2, -2, -2, 23, -2 ], [ 22, 1, 39, 39, 39, 39, 39, 1, 22 ], [ 22, 1, 23, 22, 22, 22, 23, 1, 22 ], [ 23, 23, 23, 2, 2, 2, 23, 23, 23 ] ],
      step: 45,
      targetList: [ [ 25, 23 ], [ 27, 2 ], [ 39, 5 ] ],
      hinderList: [ 0, 0, 0 ],
      scoreStandard: [ 15e3, 3e4, 45e3 ]
    } ];
    var _default = NewLevelResource;
    exports["default"] = _default;
    module.exports = exports["default"];
    cc._RF.pop();
  }, {} ],
  plantAnimaNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89b1d6z45dPjYrBiWpFLLoG", "plantAnimaNode");
    "use strict";
    var plantViewList = cc.Class({
      name: "plantViewList",
      properties: {
        viewList: [ cc.SpriteFrame ]
      }
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        plantSpriteList: [ plantViewList ]
      },
      start: function start() {},
      startPlantAnimation: function startPlantAnimation() {
        var children = this.node.children;
        for (var i = children.length - 1; i >= 0; i--) {
          children[i].active = true;
          this.plantMoveAnimation(children[i], .5 + .1 * i);
        }
      },
      endPlantAnimation: function endPlantAnimation() {
        var children = this.node.children;
        for (var i = children.length - 1; i >= 0; i--) {
          children[i].active = false;
          children[i].stopAllActions();
        }
      },
      endPlantAnimation1: function endPlantAnimation1() {
        var children = this.node.children;
        var _loop = function _loop(i) {
          var action = cc.sequence(cc.fadeOut(.8), cc.callFunc(function() {
            children[i].active = false;
            children[i].stopAllActions();
          }));
          children[i].runAction(action);
        };
        for (var i = children.length - 1; i >= 0; i--) _loop(i);
      },
      plantMoveAnimation: function plantMoveAnimation(node, time) {
        var action2 = cc.sequence(cc.scaleTo(time, 1.05), cc.scaleTo(time, .95), cc.scaleTo(time, 1)).repeatForever();
        node.runAction(action2);
      },
      changePlantTexture: function changePlantTexture(type, statue, index) {
        !index || (this.index = index);
        if ("undefined" == typeof this.statue) {
          console.log(this.statue, statue);
          this.statue = -1;
        } else if (this.statue >= 0 && this.statue == statue) return;
        this.statue = statue;
        this.node.active = true;
        var children = this.node.children;
        for (var i = children.length - 1; i >= 0; i--) {
          children[i].active = true;
          children[i].stopAllActions();
          children[i].getComponent(cc.Sprite).spriteFrame = this.plantSpriteList[type].viewList[statue];
          this.fadeInFromSmall(children[i]);
        }
        this.scheduleOnce(function() {
          this.startPlantAnimation();
        }, 1.5);
      },
      fadeInFromSmall: function fadeInFromSmall(node) {
        node.opacity = 0;
        node.scale = .1;
        var action = cc.spawn(cc.fadeIn(.8), cc.scaleTo(.8, 1));
        node.runAction(action);
        console.log("11111111111111111");
      },
      hideView: function hideView() {
        this.endPlantAnimation();
        this.node.active = false;
      },
      fadeOut: function fadeOut() {
        this.endPlantAnimation1();
        this.scheduleOnce(function() {
          this.node.active = false;
        }, 1.5);
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var event = new cc.Event.EventCustom("colliderEvent", true);
        event.detail = {
          index: this.index
        };
        this.node.dispatchEvent(event);
      }
    });
    cc._RF.pop();
  }, {} ],
  powerPool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e5f0FMc6ZOYrymDkowsTD7", "powerPool");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var lifeCost = 60;
    var lifeInterval = 3600;
    var MaxLife = 6;
    cc.Class({
      extends: cc.Component,
      properties: {
        l_TimeCount: cc.Label,
        heart: cc.Node,
        fill_pic: cc.Node,
        timeNode: cc.Node,
        btn_viode: cc.Node,
        btn_share: cc.Node
      },
      timeCount: function timeCount() {
        if (GameData.lifeNumber < MaxLife) {
          this.fill_pic.active = false;
          this.timeNode.active = true;
          var endTime = cc.sys.localStorage.getItem("costTime");
          if (!endTime) {
            endTime = Math.floor(new Date().getTime() / 1e3) + lifeInterval;
            cc.sys.localStorage.setItem("costTime", endTime);
          } else endTime = parseInt(endTime) + lifeInterval;
          this.time = endTime;
          this.timeDowmCount();
          this.schedule(this.timeDowmCount, 1);
        } else this.lifeFull();
      },
      lifeFull: function lifeFull() {
        this.fill_pic.active = true;
        this.timeNode.active = false;
      },
      timeDowmCount: function timeDowmCount() {
        var label = Utils.countDonwTime(this.time);
        if (!label) {
          this.unschedule(this.timeDowmCount);
          if (GameData.lifeNumber < MaxLife) {
            cc.sys.localStorage.removeItem("restTime");
            cc.systemEvent.emit("UPDATE_LIFE");
          }
          this.timeCount();
          return;
        }
        this.l_TimeCount.string = label;
      },
      showView: function showView() {
        this.node.active = true;
        this.timeCount();
        Utils.showPromptWithScale(this.node);
      },
      hideView: function hideView() {
        this.node.active = false;
        this.unschedule(this.timeDowmCount);
      },
      controlBtnShow: function controlBtnShow() {
        var hasVideo = window.NativeManager.hasRewardVideo();
        if (hasVideo) {
          this.btn_viode.active = true;
          this.btn_share.active = false;
        } else if (cc.sys.os == cc.sys.OS_ANDROID) {
          this.btn_viode.active = false;
          this.btn_share.active = true;
        } else {
          this.btn_viode.active = true;
          this.btn_share.active = false;
        }
      },
      addLifeNumberByVideo: function addLifeNumberByVideo() {
        var self = this;
        if (GameData.lifeNumber >= MaxLife) {
          cc.systemEvent.emit("TIPS_SUCCESS", {
            wordIndex: 1
          });
          return;
        }
        cc.director.SoundManager.playSound("btnEffect");
        var callback = function callback(res) {
          if (!!res) {
            GameData.lifeNumber < 0 && (GameData.lifeNumber = 0);
            GameData.lifeNumber += 1;
            GameData.storeGameData();
            if (GameData.lifeNumber <= MaxLife) {
              var wp = self.heart.parent.convertToWorldSpaceAR(self.heart);
              window.NativeManager.reportLifeChanged(GameData.lifeNumber);
              cc.systemEvent.emit("HEART_ANIMA", {
                pos: wp,
                type: 2
              });
              GameData.lifeNumber == MaxLife && self.scheduleOnce(function() {
                self.lifeFull();
              }, .5);
            }
          }
        };
        var hasVideo = window.NativeManager.hasRewardVideo();
        hasVideo ? window.NativeManager.showRewardVideo(callback) : cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 0
        });
      },
      fullLifeNumberByShare: function fullLifeNumberByShare() {
        var self = this;
        if (GameData.lifeNumber >= MaxLife) {
          cc.systemEvent.emit("TIPS_SUCCESS", {
            wordIndex: 1
          });
          return;
        }
        cc.director.SoundManager.playSound("btnEffect");
        var callback = function callback(res) {
          if (!!res) {
            var wp = self.heart.parent.convertToWorldSpaceAR(self.heart);
            GameData.lifeNumber = MaxLife;
            GameData.storeGameData();
            window.NativeManager.reportLifeChanged(GameData.lifeNumber);
            cc.systemEvent.emit("HEART_ANIMA", {
              pos: wp,
              type: 2
            });
          }
        };
        window.NativeManager.goShare(callback);
      },
      buyLifeByCoins: function buyLifeByCoins() {
        var self = this;
        if (GameData.starCount >= 100) if (GameData.lifeNumber < MaxLife) {
          GameData.lifeNumber < 0 && (GameData.lifeNumber = 0);
          GameData.starCount -= 100;
          GameData.lifeNumber += 1;
          window.NativeManager.reportLifeChanged(GameData.lifeNumber);
          GameData.storeGameData();
          cc.systemEvent.emit("UPDATE_COINS");
          cc.director.SoundManager.playSound("btnEffect");
          var wp = this.heart.parent.convertToWorldSpaceAR(this.heart);
          cc.systemEvent.emit("HEART_ANIMA", {
            pos: wp,
            type: 2
          });
          GameData.lifeNumber == MaxLife && self.scheduleOnce(function() {
            self.lifeFull();
          }, .5);
        } else cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 1
        }); else GameData.lifeNumber >= MaxLife ? cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 1
        }) : cc.director.screenDialog.showCoinsPanel();
      },
      fillLifeNumber: function fillLifeNumber() {
        cc.director.SoundManager.playSound("btnEffect");
        if (GameData.lifeNumber < MaxLife) {
          var wp = this.heart.parent.convertToWorldSpaceAR(this.heart);
          cc.systemEvent.emit("HEART_ANIMA", {
            pos: wp,
            type: 1
          });
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  progressBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e9db3X6uJPP7snR1VjVtJl", "progressBar");
    "use strict";
    var GameData = require("../gameData");
    var levelRes = require("../levelResource");
    cc.Class({
      extends: cc.Component,
      properties: {
        starList: [ cc.Node ],
        progressBar: cc.ProgressBar,
        starView: [ cc.SpriteFrame ],
        star_boom: cc.Prefab,
        header: cc.Node,
        container: cc.Node
      },
      onLoad: function onLoad() {
        this.scoreValue = 0;
        this.starLevel = 0;
        this.passRate = -1;
      },
      start: function start() {
        this.judgeHasHair();
      },
      initProgressBar: function initProgressBar() {
        this.progressBar.progress = 0;
        this.scoreValue = 0;
        this.starStandard = levelRes["lv" + GameData.bestLevel].scoreStandard;
        this.initStarView();
      },
      initStarView: function initStarView() {
        for (var i = 0; i < this.starList.length; i++) {
          var inner = this.starList[i].getChildByName("inner");
          inner.active = false;
        }
      },
      judgeStepScore: function judgeStepScore(num) {
        if (num > 0) {
          this.scoreValue += num;
          GameData.currScore = this.scoreValue;
          this.starLight(this.scoreValue);
          var progress = num / this.starStandard[2];
          this.slowAddEffect(progress);
        }
      },
      slowAddEffect: function slowAddEffect(progress) {
        var bit = progress / 10;
        for (var i = 0; i < 10; i++) this.scheduleOnce(function() {
          this.progressBar.progress += bit;
        }, .05 * i);
      },
      addEffect: function addEffect(num) {
        var effect = cc.instantiate(this.star_boom);
        effect.parent = this.node;
        effect.position = this.starList[num].position;
        effect.getComponent(cc.ParticleSystem).resetSystem();
      },
      starLight: function starLight(scoreValue) {
        if (scoreValue < this.starStandard[0]) {
          GameData.passRate = -1;
          return;
        }
        if (scoreValue >= this.starStandard[0] && scoreValue < this.starStandard[1]) {
          this.starList[0].getChildByName("inner").active = true;
          if (1 == this.passRate) {
            !cc.director.container.target.isGameEnd || !cc.director.container.target.isPass || (GameData.passRate = this.passRate);
            return;
          }
          this.passRate = 1;
          cc.director.SoundManager.playSound("starCollect");
          this.addEffect(0);
          this.starList[0].runAction(cc.sequence(cc.delayTime(.2), cc.scaleTo(.1, .9), cc.scaleTo(.3, 2), cc.scaleTo(.1, 1)));
        }
        if (scoreValue >= this.starStandard[1] && scoreValue < this.starStandard[2]) {
          this.starList[0].getChildByName("inner").active = true;
          this.starList[1].getChildByName("inner").active = true;
          if (2 == this.passRate) {
            !cc.director.container.target.isGameEnd || !cc.director.container.target.isPass || (GameData.passRate = this.passRate);
            return;
          }
          this.passRate = 2;
          cc.director.SoundManager.playSound("starCollect");
          this.addEffect(1);
          this.starList[1].runAction(cc.sequence(cc.delayTime(.2), cc.scaleTo(.1, .9), cc.scaleTo(.3, 2), cc.scaleTo(.1, 1)));
        }
        if (scoreValue >= this.starStandard[2]) {
          this.starList[0].getChildByName("inner").active = true;
          this.starList[1].getChildByName("inner").active = true;
          this.starList[2].getChildByName("inner").active = true;
          if (3 == this.passRate) {
            !cc.director.container.target.isGameEnd || !cc.director.container.target.isPass || (GameData.passRate = this.passRate);
            return;
          }
          this.passRate = 3;
          cc.director.SoundManager.playSound("starCollect");
          this.addEffect(2);
          this.starList[2].runAction(cc.sequence(cc.delayTime(.2), cc.scaleTo(.1, .9), cc.scaleTo(.3, 2), cc.scaleTo(.1, 1)));
        }
      },
      judgeHasHair: function judgeHasHair() {
        var hasHair = window.NativeManager.hasPhoneHair();
        !hasHair || this.moveNeedMoveArea();
      },
      moveNeedMoveArea: function moveNeedMoveArea() {
        var widget1 = this.header.getComponent(cc.Widget);
        widget1.top = 80;
        var widget2 = this.container.getComponent(cc.Widget);
        widget2.verticalCenter -= 60;
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../levelResource": "levelResource"
  } ],
  progressNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e198126aodPfoCr6vEK1xSF", "progressNode");
    "use strict";
    var FarmUtils = require("./framUtils");
    var FarmData = require("./FarmData");
    var progressLength = 135;
    var unitTime = FarmData.costTime.ONE_MIN;
    cc.Class({
      extends: cc.Component,
      properties: {
        number: cc.Label,
        unfinishedSpriteList: [ cc.SpriteFrame ],
        finishedSpriteList: [ cc.SpriteFrame ],
        speed: 0,
        accumulateExpNumber: 0,
        mask: cc.Node,
        expIcon: cc.Node
      },
      computedSpeedUpTimeExp: function computedSpeedUpTimeExp(isMature, time) {
        var tempExp;
        var lastTime;
        var secondExp = this.getSecondExp();
        if (isMature) {
          var acculmulateList = FarmUtils.getLocalData("accumulateList");
          !acculmulateList || (lastTime = acculmulateList[this.info.index]);
          var period = FarmData.plantInfo[this.info.type].cycle * unitTime;
          tempExp = -1 != lastTime && lastTime ? Math.floor((this.info.plantTime + period - lastTime) / secondExp) : Math.floor(period / secondExp);
        } else tempExp = Math.floor(time / secondExp);
        return tempExp;
      },
      addSpeedUpTimeExpToAccumulateExpNumber: function addSpeedUpTimeExpToAccumulateExpNumber(isMature, time) {
        var tempExp = this.computedSpeedUpTimeExp(isMature, time);
        this.accumulateExpNumber += tempExp;
        this.changeAccumulateExpNumberDisplay(this.accumulateExpNumber);
        console.log(tempExp, "\u52a0\u901f\u589e\u52a0\u7684\u7ecf\u9a8c");
      },
      getSecondExp: function getSecondExp() {
        console.log(this.speed, "\u901f\u5ea6\u662f\u6ca1\u7b97\u4e48\uff1f");
        var time = Math.floor(.2 * progressLength / this.speed);
        console.log("\u589e\u52a0\u4e00\u70b9\u7ecf\u9a8c\u9700\u8981\u7684\u65f6\u95f4\uff0c", time);
        return time;
      },
      initProgressNode: function initProgressNode(time, type, info) {
        this.info = info;
        console.log(info, "progressNode ,37");
        this.recordPlantStartTime(this.info.index, this.info.plantTime);
        this.computedProgressMoveSpeed(time);
        1 == type ? this.growUpMoveAnimation() : 2 == type && this.finishedMoveAnimation();
        var exp = this.computedAccumulateExp();
        if (!exp) this.changeAccumulateExpNumberDisplay(0); else {
          this.accumulateExpNumber = exp;
          this.changeAccumulateExpNumberDisplay(exp);
        }
      },
      computedProgressMoveSpeed: function computedProgressMoveSpeed(time) {
        this.speed = 50 / time;
      },
      recordAccumulateStartTime: function recordAccumulateStartTime() {
        var serverTime = FarmUtils.getServerTime();
        var acculmulateList = FarmUtils.getLocalData("accumulateList");
        if (!acculmulateList) {
          acculmulateList = [];
          for (var i = 0; i < 9; i++) acculmulateList.push(-1);
          acculmulateList[this.info.index] = serverTime;
        } else -1 == acculmulateList[this.info.index] && (acculmulateList[this.info.index] = serverTime);
        FarmUtils.setLocalData(acculmulateList, "accumulateList");
      },
      resetAccumulateStartTime: function resetAccumulateStartTime() {
        var acculmulateList = FarmUtils.getLocalData("accumulateList");
        if (!!acculmulateList) {
          acculmulateList[this.info.index] = -1;
          this.accumulateExpNumber = 0;
          FarmUtils.setLocalData(acculmulateList, "accumulateList");
          this.changeAccumulateExpNumberDisplay(this.accumulateExpNumber);
        }
      },
      computedAccumulateExp: function computedAccumulateExp() {
        var acculmulateList = FarmUtils.getLocalData("accumulateList");
        var secondExp = this.getSecondExp();
        if (!acculmulateList) return 0;
        var lastTime = acculmulateList[this.info.index];
        var serverTime = FarmUtils.getServerTime();
        var plantTime = this.getSinglePlantTime(this.info.index);
        var exp;
        var period = FarmData.plantInfo[this.info.type].cycle * unitTime;
        if (-1 == lastTime) {
          console.log("\u4e0d\u5b58\u5728\u4e0a\u6b21\u7d2f\u79ef\u65f6\u95f4\u7684");
          return 0;
        }
        if (serverTime >= plantTime + period) exp = Math.floor((plantTime + period - lastTime) / secondExp); else if (1 == this.info.healthStatue.reap) exp = Math.floor((plantTime + period - lastTime) / secondExp); else {
          var propsAddTime = plantTime - this.info.plantTime;
          exp = Math.floor((serverTime - lastTime + propsAddTime) / secondExp);
        }
        console.log(plantTime, period, lastTime, exp, "\u5b58\u5728\u4e0a\u6b21\u7d2f\u79ef\u65f6\u95f4");
        return exp;
      },
      finishedMoveAnimation: function finishedMoveAnimation() {
        this.node.active = true;
        this.mask.width = progressLength;
        this.unschedule(this.changeMaskWidth);
        this.progressUnlimitedMove(this.finishedSpriteList);
      },
      growUpMoveAnimation: function growUpMoveAnimation() {
        this.node.active = true;
        this.progressUnlimitedMove(this.unfinishedSpriteList);
        this.mask.width = 0;
        this.schedule(this.changeMaskWidth, .2);
      },
      changeMaskWidth: function changeMaskWidth() {
        this.mask.width += this.speed;
        if (this.mask.width >= progressLength) {
          this.mask.width = 0;
          this.recordAccumulateStartTime();
          this.accumulateExpNumber += 1;
          this.changeAccumulateExpNumberDisplay(this.accumulateExpNumber);
        }
      },
      changeAccumulateExpNumberDisplay: function changeAccumulateExpNumberDisplay(number) {
        this.number.string = new String(number);
      },
      progressUnlimitedMove: function progressUnlimitedMove(list) {
        var p1 = this.mask.getChildByName("progress1");
        var p2 = this.mask.getChildByName("progress2");
        p1.getComponent(cc.Sprite).spriteFrame = list[0];
        p2.getComponent(cc.Sprite).spriteFrame = list[1];
        this.tempProgress = p2;
        this.schedule(this.unlimitedMove, .2);
        this.progressCount = 0;
      },
      unlimitedMove: function unlimitedMove() {
        this.progressCount++;
        if (!!this.tempProgress) {
          this.progressCount >= 100 && (this.progressCount = 0);
          this.progressCount % 2 != 0 ? this.tempProgress.active = false : this.tempProgress.active = true;
        }
      },
      hideProgressNode: function hideProgressNode() {
        this.unschedule(this.unlimitedMove);
        this.unschedule(this.changeMaskWidth);
        this.node.active = false;
        this.accumulateExpNumber = 0;
      },
      collectExp: function collectExp() {
        if (this.accumulateExpNumber > 0) {
          console.log(this.accumulateExpNumber);
          cc.systemEvent.emit("UPDATE_FARM", {
            exp: this.accumulateExpNumber,
            coins: 0,
            worldPos: this.iconWorldPos
          });
          this.resetAccumulateStartTime();
          this.changeAccumulateExpNumberDisplay(this.accumulateExpNumber);
        }
      },
      getAccumulateExpNumber: function getAccumulateExpNumber() {
        return this.accumulateExpNumber;
      },
      recordPlantStartTime: function recordPlantStartTime(index, plantTime) {
        var plantStartTimeList = FarmUtils.getLocalData("plantStartTimeList");
        if (!plantStartTimeList) {
          plantStartTimeList = [];
          for (var i = 0; i < 9; i++) plantStartTimeList.push(-1);
          plantStartTimeList[index] = plantTime;
        } else {
          var time = plantStartTimeList[index];
          if (-1 != time) return;
          plantStartTimeList[index] = plantTime;
        }
        FarmUtils.setLocalData(plantStartTimeList, "plantStartTimeList");
      },
      resetPlantStartTime: function resetPlantStartTime(index) {
        var plantStartTimeList = FarmUtils.getLocalData("plantStartTimeList");
        !plantStartTimeList || (plantStartTimeList[index] = -1);
        FarmUtils.setLocalData(plantStartTimeList, "plantStartTimeList");
      },
      getSinglePlantTime: function getSinglePlantTime(index) {
        var plantStartTimeList = FarmUtils.getLocalData("plantStartTimeList");
        return plantStartTimeList ? plantStartTimeList[index] : -1;
      },
      start: function start() {
        this.iconWorldPos = this.node.convertToWorldSpaceAR(this.expIcon.position);
      }
    });
    cc._RF.pop();
  }, {
    "./FarmData": "FarmData",
    "./framUtils": "framUtils"
  } ],
  prompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fcd52SSXhDwr4JLmpjQcXx", "prompt");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        bound: [ cc.Node ],
        angle: [ cc.Node ]
      },
      bounderControl: function bounderControl(list) {
        for (var i = 0; i < list.length; i++) 1 == list[i] ? this.bound[i].active = true : this.bound[i].active = false;
        this.isAngleShow(this.bound);
      },
      isAngleShow: function isAngleShow(list) {
        list[0].active && list[2].active && (this.angle[0].active = true);
        list[0].active && list[3].active && (this.angle[1].active = true);
        list[1].active && list[2].active && (this.angle[3].active = true);
        list[1].active && list[3].active && (this.angle[2].active = true);
      },
      angleControl: function angleControl(list) {
        for (var i = 0; i < list.length; i++) this.angle[i].active && (!list[i] || (this.angle[i].active = false));
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../utils": "utils"
  } ],
  psconfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78b41dtdvVJKbwSkTC5gQAI", "psconfig");
    "use strict";
    var cellSize = 75;
    var matrixRow = 9;
    var matrixCol = 9;
    var totalColors = [ 0, 1, 2, 3, 4 ];
    var extraScore = 2e3;
    var rType = 8;
    var bType = 9;
    var dType = 10;
    var continueCostList = [ 100, 250, 350, 450, 750, 1050 ];
    var REWARD_COINS_NUM = 15;
    var MAX_LIFE = 6;
    var direction = cc.Enum({
      UP: 1,
      DOWN: 2,
      LEFT: 3,
      RIGHT: 4
    });
    var playerTooLCostList = [ {
      type: 0,
      price: 150
    }, {
      type: 1,
      price: 120
    }, {
      type: 2,
      price: 100
    }, {
      type: 3,
      price: 80
    } ];
    var giftNumber = [ {
      coins: 200,
      life: 0,
      gameTool: {
        rocket: 1,
        bomb: 1,
        disco: 1
      },
      playerTool: {
        boxing: 1,
        anvil: 1,
        hammer: 1,
        dice: 1
      }
    }, {
      coins: 500,
      life: 0,
      gameTool: {
        rocket: 1,
        bomb: 1,
        disco: 1
      },
      playerTool: {
        boxing: 1,
        anvil: 1,
        hammer: 1,
        dice: 1
      }
    }, {
      coins: 1e3,
      life: 0,
      gameTool: {
        rocket: 3,
        bomb: 3,
        disco: 3
      },
      playerTool: {
        boxing: 3,
        anvil: 3,
        hammer: 3,
        dice: 3
      }
    }, {
      coins: 2e3,
      life: 6,
      gameTool: {
        rocket: 5,
        bomb: 5,
        disco: 5
      },
      playerTool: {
        boxing: 5,
        anvil: 5,
        hammer: 5,
        dice: 5
      }
    }, {
      coins: 4e3,
      life: 12,
      gameTool: {
        rocket: 12,
        bomb: 12,
        disco: 12
      },
      playerTool: {
        boxing: 12,
        anvil: 12,
        hammer: 12,
        dice: 12
      }
    }, {
      coins: 8e3,
      life: 24,
      gameTool: {
        rocket: 25,
        bomb: 25,
        disco: 25
      },
      playerTool: {
        boxing: 25,
        anvil: 25,
        hammer: 25,
        dice: 25
      }
    } ];
    var coinsList = [ 150, 500, 1e3, 2e3, 4e3, 8e3 ];
    var gameToolCost = 120;
    var hinderType = cc.Enum({
      pine: 20,
      balloon: 21,
      vine: 22,
      ironLineBox: 23,
      woodBox: 25,
      flower: 26,
      windmill: 27,
      stoneStatue: 28,
      colorCube: 29,
      ladybug: 37,
      waterBubble: 38,
      rockStone: 39
    });
    module.exports = {
      cellSize: cellSize,
      matrixRow: matrixRow,
      matrixCol: matrixCol,
      totalColors: totalColors,
      extraScore: extraScore,
      rType: rType,
      bType: bType,
      dType: dType,
      direction: direction,
      continueCostList: continueCostList,
      REWARD_COINS_NUM: REWARD_COINS_NUM,
      MAX_LIFE: MAX_LIFE,
      playerTooLCostList: playerTooLCostList,
      gameToolCost: gameToolCost,
      giftNumber: giftNumber,
      coinsList: coinsList
    };
    cc._RF.pop();
  }, {} ],
  quitTips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f81bU+oQBASKZOoUCgJUm2", "quitTips");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {},
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        cc.director.SoundManager.playSound("btnEffect");
      },
      hideView: function hideView() {
        this.node.active = false;
        cc.director.SoundManager.playSound("btnEffect");
      },
      jumpToInterface: function jumpToInterface() {
        cc.director.SoundManager.playSound("btnEffect");
        GameData.passRate = -1;
        GameData.lifeNumber -= 1;
        window.NativeManager.reportLifeChanged(GameData.lifeNumber);
        var costTime = cc.sys.localStorage.getItem("costTime");
        if (!costTime) {
          var current = Math.floor(new Date().getTime() / 1e3);
          cc.sys.localStorage.setItem("costTime", JSON.stringify(current));
        }
        GameData.storeGameData();
        cc.systemEvent.emit("UPDATE_DATA_GAME");
        cc.director.loadScene("interface");
        cc.director.jumpCode = 2;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  rank_farm: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "29935j0AOlECYPrbWxtrn3a", "rank_farm");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        node_worldContainer: cc.Node,
        node_teamContainer: cc.Node,
        myRankArea: cc.Node,
        item_rank_farm: cc.Prefab,
        node_worldRank: cc.Node,
        node_teamRank: cc.Node,
        btn_world: cc.Node,
        btn_team: cc.Node,
        btn_world_viewList: [ cc.SpriteFrame ],
        btn_team_viewList: [ cc.SpriteFrame ]
      },
      addChildToContainer: function addChildToContainer(data, node) {
        for (var i = 0; i < data.length; i++) {
          var item = void 0;
          item = this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.item_rank_farm);
          item.parent = node;
          data[i].index = i;
          item.getComponent("item_farm_rank").initItemDetail(data[i]);
        }
      },
      initWorldLeaderboard: function initWorldLeaderboard() {
        var data = this.worldList;
        this.addChildToContainer(data, this.node_worldContainer);
      },
      initTeamLeaderboard: function initTeamLeaderboard() {
        var data = this.teamList;
        this.addChildToContainer(data, this.node_teamContainer);
      },
      addChildToMyRank: function addChildToMyRank() {
        var item;
        item = this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.item_rank_farm);
        item.parent = this.myRankArea;
      },
      showWorldRank: function showWorldRank() {
        this.node_worldRank.active = true;
        this.node_teamRank.active = false;
        this.btn_world.getComponent(cc.Sprite).spriteFrame = this.btn_world_viewList[0];
        this.btn_team.getComponent(cc.Sprite).spriteFrame = this.btn_team_viewList[1];
        cc.director.SoundManager.playSound("farm_btn");
      },
      showTeamRank: function showTeamRank() {
        this.node_worldRank.active = false;
        this.node_teamRank.active = true;
        this.btn_world.getComponent(cc.Sprite).spriteFrame = this.btn_world_viewList[1];
        this.btn_team.getComponent(cc.Sprite).spriteFrame = this.btn_team_viewList[0];
        cc.director.SoundManager.playSound("farm_btn");
      },
      start: function start() {},
      recycleRankItem: function recycleRankItem(node) {
        var children = node.children;
        this.itemPool || (this.itemPool = new cc.NodePool("item_rank"));
        if (children.length > 0) {
          var len = children.length;
          for (var i = len - 1; i >= 0; i--) {
            var child = children[i];
            "item_rank" == child.name ? this.itemPool.put(child) : child.removeFromParent();
          }
        }
      },
      hideView: function hideView() {
        this.node.active = false;
        this.recycleRankItem(this.node_worldContainer);
        this.recycleRankItem(this.node_teamContainer);
        cc.systemEvent.emit("HIDE_CACHE_ANIMA");
      },
      showView: function showView() {
        this.node.active = true;
        this.showPromptWithScale(this.node);
        this.getRankData();
        this.scheduleOnce(function() {
          cc.systemEvent.emit("HIDE_CACHE_ANIMA");
          this.initWorldLeaderboard();
          this.initTeamLeaderboard();
        }, 3);
        this.showWorldRank();
      },
      showPromptWithScale: function showPromptWithScale(node) {
        node.scale = .2;
        var action = cc.sequence(cc.scaleTo(.3, 1).easing(cc.easeBackOut(3)), cc.callFunc(function() {
          cc.systemEvent.emit("SHOW_CACHE_ANIMA");
        }));
        node.runAction(action);
      },
      getRankData: function getRankData() {
        var self = this;
        var type = 2;
        var uid;
        var localData = cc.sys.localStorage.getItem("localData");
        if (localData) {
          localData = JSON.parse(localData);
          uid = "" == localData.uid ? window.NativeManager.getUid() : localData.uid;
        } else {
          uid = window.NativeManager.getUid();
          console.log("localData is not exist");
        }
        var callback = function callback(res) {
          console.log(res);
          self.worldList = res.world;
          self.teamList = res.team;
        };
      }
    });
    cc._RF.pop();
  }, {} ],
  rank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95e26lfgx1DzoARNTKGcYVk", "rank");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        rank_world: cc.Node,
        rank_world_itemContainer: cc.Node,
        rank_world_myRank: cc.Node,
        rank_team: cc.Node,
        rank_team_container: cc.Node,
        rank_item: cc.Prefab,
        loadingIcon: cc.Node,
        rank_btnArea: cc.Node,
        btn_world: cc.Sprite,
        btn_team: cc.Sprite,
        worldBtnList: [ cc.SpriteFrame ],
        teamBtnList: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        var self = this;
        var uid = "109";
        var callback = function callback(res) {
          console.log(res);
          if (!!res) {
            self.rankData = res.world;
            self.teamData = res.team;
          }
        };
      },
      loadingData: function loadingData() {
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
      },
      loadedData: function loadedData() {
        cc.systemEvent.emit("LOAD_TIPS_HIDE");
      },
      initRankContainer: function initRankContainer() {
        var data = this.rankData;
        if (!!data && data.length > 0) {
          this.loadedData();
          var listData = data;
          var len = listData.length;
          for (var i = 0; i < len; i++) {
            var item = void 0;
            item = this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.rank_item);
            item.parent = this.rank_world_itemContainer;
            item.getComponent("item_rank").init(i, listData[i]);
          }
        } else this.scheduleOnce(function() {
          this.loadedData();
        }, 3);
      },
      initMyRankContainer: function initMyRankContainer(data) {
        var item = cc.instantiate(this.rank_item);
        item.getComponent("item_rank").init(data, true);
        item.parent = this.rank_world_myRank;
      },
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.loadingData();
        this.scheduleOnce(function() {
          this.initRankContainer();
          this.initMyRankContainer(this.myRankData);
          this.initTeamRank();
          this.showWorldRank();
        }, 2);
      },
      hideView: function hideView() {
        this.node.active = false;
        this.recycleRankItem(this.rank_world_itemContainer);
        this.recycleRankItem(this.rank_team_container);
        this.rank_world_myRank.removeAllChildren();
      },
      recycleRankItem: function recycleRankItem(node) {
        var children = node.children;
        this.itemPool || (this.itemPool = new cc.NodePool("item_rank"));
        if (children.length > 0) {
          var len = children.length;
          for (var i = len - 1; i >= 0; i--) {
            var child = children[i];
            "item_rank" == child.name ? this.itemPool.put(child) : child.removeFromParent();
          }
        }
      },
      showWorldRank: function showWorldRank() {
        this.rank_world.active = true;
        this.rank_team.active = false;
        this.btn_world.spriteFrame = this.worldBtnList[0];
        this.btn_team.spriteFrame = this.teamBtnList[1];
      },
      showTeamRank: function showTeamRank() {
        this.rank_world.active = false;
        this.rank_team.active = true;
        this.btn_world.spriteFrame = this.worldBtnList[1];
        this.btn_team.spriteFrame = this.teamBtnList[0];
      },
      initTeamRank: function initTeamRank() {
        var teamData = this.teamData;
        var len = teamData.length;
        if (!!teamData && teamData.length > 0) for (var i = 0; i < len; i++) {
          var item = void 0;
          item = this.itemPool && this.itemPool.size() > 0 ? this.itemPool.get() : cc.instantiate(this.rank_item);
          item.parent = this.rank_team_container;
          item.getComponent("item_rank").init(i, teamData[i]);
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../utils": "utils"
  } ],
  resultPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10c145DZUlLILr959RYwyPm", "resultPrompt");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        level: cc.Label,
        score: cc.Label,
        nodeList: [ cc.Node ],
        targetContainer: cc.Node,
        twinkle: cc.Node,
        targetDisplayList: [ cc.Node ],
        blockView: [ cc.SpriteFrame ],
        toolView: [ cc.SpriteFrame ],
        shadowClip: cc.AnimationClip
      },
      excuteStarLevelAnimation: function excuteStarLevelAnimation(num) {
        var _this = this;
        var _loop = function _loop(i) {
          _this.scheduleOnce(function() {
            var item = this.nodeList[i];
            var inner = item.getChildByName("star_inner");
            this.starAnimation(inner);
            i == num - 1 && cc.director.SoundManager.playSound("victory");
          }, .3 * i);
        };
        for (var i = 0; i < num; i++) _loop(i);
        this.scheduleOnce(function() {
          var _this2 = this;
          var _loop2 = function _loop2(_i) {
            _this2.scheduleOnce(function() {
              var item = this.nodeList[_i];
              var inner = item.getChildByName("star_inner");
              this.addStarShadowAnima(inner);
            }, .3 * _i);
          };
          for (var _i = 0; _i < num; _i++) _loop2(_i);
        }, 1.2);
      },
      starAnimation: function starAnimation(node) {
        var self = this;
        var action1 = node.getActionByTag(1);
        if (!!action1 && !action1.isDone()) return;
        node.active = true;
        node.position = cc.v2(0, 200);
        node.scale = .01;
        var action = cc.spawn(cc.scaleTo(.3, 1), cc.moveTo(.3, cc.v2(0, 0)), cc.callFunc(function() {
          cc.director.SoundManager.playSound("starEffect");
        }));
        action.tag = 1;
        node.runAction(action);
      },
      addStarShadowAnima: function addStarShadowAnima(node) {
        node.addComponent(cc.Animation);
        var anima = node.getComponent(cc.Animation);
        anima.addClip(this.shadowClip);
        anima.play("starShadowAnima");
      },
      updateLevelScore: function updateLevelScore() {
        this.score.string = GameData.currScore + "";
      },
      toolTargetDisPlay: function toolTargetDisPlay(list) {
        var gap = Utils.computedNodeGap(list.length, this.targetContainer, this.targetDisplayList[0]);
        for (var i = 0; i < list.length; i++) {
          var item = this.targetDisplayList[i];
          item.active = true;
          var icon = item.getChildByName("icon");
          item.position = cc.v2(gap * (i + 1) + item.width * i + item.width / 2, 0);
          var index = list[i][0];
          if (index >= 20) if (38 == index) icon.getComponent(cc.Sprite).spriteFrame = this.toolView[10]; else if (39 == index) icon.getComponent(cc.Sprite).spriteFrame = this.toolView[11]; else if (37 == index) icon.getComponent(cc.Sprite).spriteFrame = this.toolView[12]; else {
            index -= 20;
            icon.getComponent(cc.Sprite).spriteFrame = this.toolView[index];
          } else icon.getComponent(cc.Sprite).spriteFrame = this.blockView[index];
        }
      },
      hideToolTargetList: function hideToolTargetList() {
        for (var i = 0; i < this.targetDisplayList.length; i++) this.targetDisplayList[i].active = false;
      },
      lightRotation: function lightRotation(node) {
        var action = cc.rotateBy(2, 180).repeatForever();
        action.tag = 1;
        node.runAction(action);
      },
      showView: function showView(list) {
        this.node.active = true;
        GameData.passRate = cc.director.dialogScript.progressBar.passRate;
        this.hideToolTargetList();
        this.lightRotation(this.twinkle);
        this.excuteStarLevelAnimation(GameData.passRate);
        this.updateLevelScore();
        this.toolTargetDisPlay(list);
        this.updatePlayerSuccessLevel();
        this.updateLevelNumber();
      },
      hideView: function hideView() {
        this.hideToolTargetList();
        this.node.active = false;
      },
      updateLevelNumber: function updateLevelNumber() {
        this.level.string = GameData.bestLevel + "";
      },
      updatePlayerSuccessLevel: function updatePlayerSuccessLevel() {
        GameData.totalStar += GameData.passRate;
        GameData.bestLevel += 1;
        GameData.level += 1;
        GameData.storeGameData();
        var data = GameData.getGameData();
        Utils.updateGameInfo(data);
      },
      start: function start() {},
      jumpToMainScreen: function jumpToMainScreen() {
        cc.director.SoundManager.playSound("btnEffect");
        window.NativeManager.reportLevelEvent(GameData.bestLevel);
        cc.sys.localStorage.removeItem("isGet");
        cc.director.loadScene("interface");
        cc.director.jumpCode = 2;
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  resultTips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4bf09vNYlVBlohwh+vlu8N9", "resultTips");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        light: cc.Node,
        success: cc.Node,
        fail: cc.Node,
        targetNode: cc.Node
      },
      onLoad: function onLoad() {
        this.targetScript = this.targetNode.getComponent("target");
      },
      successView: function successView() {
        cc.director.SoundManager.playSound("tips_success");
        this.success.active = true;
        this.light.active = true;
        this.fail.active = false;
        this.success.scale = this.light.scale = .2;
        this.success.runAction(cc.scaleTo(1, 1).easing(cc.easeBackOut()));
        this.light.runAction(cc.spawn(cc.scaleTo(1, 1), cc.rotateBy(5, 360)));
      },
      failView: function failView() {
        cc.director.SoundManager.playSound("tips_fail");
        this.fail.scale = this.light.scale = .2;
        this.success.active = false;
        this.fail.active = true;
        this.light.active = false;
        this.fail.runAction(cc.scaleTo(1, 1).easing(cc.easeBackOut()));
      },
      showView: function showView(type) {
        this.node.active = true;
        1 == type ? this.successView() : this.failView();
        this.scheduleOnce(function() {
          cc.director.dialogScript.hideResultTipsView(type);
        }, 3);
      },
      hideView: function hideView(type) {
        this.node.active = false;
        this.light.stopAllActions();
        this.light.active = false;
        this.success.active = false;
        this.fail.active = false;
        if (1 == type) {
          var stepReward = Utils.randomGetGrid(this.targetScript.stepCount, GameData.starMatrix);
          var startPosition = this.targetScript.step.node.parent.convertToWorldSpaceAR(this.targetScript.step.node);
          this.targetScript.changeStepToRocket(stepReward, startPosition);
          this.targetScript.submitPlayerUsedStep();
        } else cc.director.dialogScript.showVideoRewardView();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  retryPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5dd1azyYEZJZodLdXZR+Cz3", "retryPrompt");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        level: cc.Label,
        toolList: require("../mainScreen/toolChoose"),
        viewReward: require("./viewReward"),
        selectArea: cc.Node
      },
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.toolList.updateGameToolNumber(GameData.gameToolList);
        this.updateLevelString();
      },
      hideView: function hideView() {
        this.toolList.resumeData();
        this.node.active = false;
      },
      jumpToMainScreen: function jumpToMainScreen() {
        GameData.passRate = -1;
        GameData.storeGameData();
        var data = GameData.getGameData();
        Utils.updateGameInfo(data);
        cc.director.loadScene("interface");
        cc.director.jumpCode = 2;
      },
      tryAgain: function tryAgain() {
        if (GameData.lifeNumber > 1) {
          GameData.lifeNumber -= 1;
          window.NativeManager.reportLifeChanged(GameData.lifeNumber);
          GameData.storeGameData();
          this.viewReward.continueTimes = 0;
          var costTime = cc.sys.localStorage.getItem("costTime");
          if (!costTime) {
            var current = Math.floor(new Date().getTime() / 1e3);
            cc.sys.localStorage.setItem("costTime", JSON.stringify(current));
          }
          cc.director.dialogScript.hideRetryPrompt();
          cc.director.container.startNewGame();
        } else {
          GameData.lifeNumber -= 1;
          window.NativeManager.reportLifeChanged(GameData.lifeNumber);
          this.jumpToMainScreen();
        }
      },
      updateLevelString: function updateLevelString() {
        this.level.string = GameData.bestLevel + 1 + "";
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../mainScreen/toolChoose": "toolChoose",
    "../utils": "utils",
    "./viewReward": "viewReward"
  } ],
  reviewUs: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5efcc3ZlrxKLpmJU3dbU2mE", "reviewUs");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        starList: [ cc.Node ],
        container: cc.Node,
        submit_btn: cc.Node
      },
      onTouchEnd: function onTouchEnd(event) {
        var location = event.getLocation();
        var nodePosition = this.container.convertToNodeSpaceAR(location);
        var number = this.judgeStar(nodePosition);
        this.starNumber = number;
        this.showStarDisplay(number);
        this.judgeSubmitBtnEnable();
      },
      judgeStar: function judgeStar(position) {
        var starWidth = this.starList[0].width + 6;
        return Math.ceil(position.x / starWidth);
      },
      showStarDisplay: function showStarDisplay(number) {
        for (var i = 0; i < this.starList.length; i++) {
          var item = this.starList[i].getChildByName("star_inner");
          item.active = i < number;
        }
      },
      submitGameEvaluation: function submitGameEvaluation() {
        cc.sys.localStorage.setItem("gameEvaluation", "yes");
        window.NativeManager.reportReview(this.starNumber);
        cc.director.screenDialog.hideGameEvaluation();
      },
      showView: function showView(type) {
        this.showType = type;
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.starNumber = 0;
        this.showStarDisplay(this.starNumber);
        this.judgeSubmitBtnEnable();
      },
      hideView: function hideView() {
        this.node.active = false;
        1 == this.showType && 0 == this.starNumber && window.NativeManager.reportReview(0);
      },
      judgeSubmitBtnEnable: function judgeSubmitBtnEnable() {
        this.starNumber > 0 ? this.submit_btn.getComponent(cc.Button).interactable = true : this.submit_btn.getComponent(cc.Button).interactable = false;
      },
      start: function start() {
        this.container.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
      }
    });
    cc._RF.pop();
  }, {
    "../utils": "utils"
  } ],
  rocket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b37c3WaNyNBSpZS4j4H693C", "rocket");
    "use strict";
    var Config = require("../psconfig");
    var Utils = require("../utils");
    var debugDis = 30;
    cc.Class({
      extends: cc.Component,
      properties: {},
      setRocketPosition: function setRocketPosition(pos, dir, posList) {
        this.grid = pos;
        this.birthPosition = Utils.grid2Pos(pos.x, pos.y);
        this.direction = dir;
        this.tempLength = 0;
        this.tempList = posList;
        this.updateIndex = 0;
        this.copyList = [];
        this.isFinish = false;
      },
      start: function start() {},
      judgeNodePosition: function judgeNodePosition() {
        var len = this.tempList.length;
        for (var i = this.updateIndex; i < len; i++) {
          var item = this.tempList[i];
          if (this.direction == Config.direction.UP) {
            if (!(this.node.y >= item.position.y)) break;
            cc.director.container.handleSingleGrid(item.grid);
            this.updateIndex = i + 1;
          } else if (this.direction == Config.direction.DOWN) {
            if (!(this.node.y <= item.position.y)) break;
            cc.director.container.handleSingleGrid(item.grid);
            this.updateIndex = i + 1;
          } else if (this.direction == Config.direction.LEFT) {
            if (!(this.node.x <= item.position.x)) break;
            cc.director.container.handleSingleGrid(item.grid);
            this.updateIndex = i + 1;
          } else if (this.direction == Config.direction.RIGHT) {
            if (!(this.node.x >= item.position.x)) break;
            cc.director.container.handleSingleGrid(item.grid);
            this.updateIndex = i + 1;
          }
        }
        this.updateIndex >= len && (this.isFinish = true);
      },
      update: function update(dt) {
        this.isFinish || this.judgeNodePosition();
      }
    });
    cc._RF.pop();
  }, {
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  screenDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5702cPQCaFMQrYBC4pkSjLP", "screenDialog");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        mask: cc.Node,
        startPrompt: require("./startPrompt"),
        boxPanel: require("./boxPanel"),
        setting: require("./setting"),
        gameToolShop: require("./gameToolShop"),
        freeCoinsPanel: require("./freeCoinsPanel"),
        dailyBouns: require("./dailyBouns"),
        reviewUs: require("./reviewUs"),
        lottery: require("./lottery"),
        hinderPreview: require("./hinderPreview"),
        rank: require("./rank"),
        tips: cc.Node,
        tipsViewList: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("TIPS_SUCCESS", this.showTips, this);
        cc.director.screenDialog = this;
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.keyBackDown, this);
      },
      keyBackDown: function keyBackDown(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.back:
          var isSubmit = cc.sys.localStorage.getItem("gameEvaluation");
          isSubmit ? window.NativeManager.reportReview(0) : this.showGameEvaluation(1);
        }
      },
      hideAllChild: function hideAllChild() {
        var children = this.node.children;
        for (var i = 0; i < children.length; i++) children[i].active = false;
      },
      showStartPrompt: function showStartPrompt() {
        this.hideAllChild();
        this.mask.active = true;
        this.startPrompt.showView();
        cc.director.SoundManager.playSound("btnEffect");
      },
      hideStartPrompt: function hideStartPrompt() {
        this.hideAllChild();
        this.startPrompt.hideView();
        cc.director.SoundManager.playSound("btnEffect");
      },
      showBoxPanel: function showBoxPanel(e) {
        var node = e.target;
        var color;
        color = "pinkBox" == node.name ? 2 : 1;
        this.hideAllChild();
        this.mask.active = true;
        this.boxPanel.showView(color);
        cc.director.SoundManager.playSound("btnEffect");
      },
      hideBoxPanel: function hideBoxPanel() {
        this.hideAllChild();
        this.boxPanel.hideView();
        cc.director.SoundManager.playSound("btnEffect");
      },
      showSettingPanel: function showSettingPanel() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.mask.active = true;
        this.setting.showView();
      },
      hideSettingPanel: function hideSettingPanel() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.setting.hideView();
      },
      showTips: function showTips(event) {
        this.tips.stopAllActions();
        this.tips.scale = .1;
        this.tips.active = true;
        var tips_word = this.tips.getChildByName("wordSprite").getComponent(cc.Sprite);
        tips_word.spriteFrame = this.tipsViewList[event.wordIndex];
        var action = cc.sequence(cc.spawn(cc.scaleTo(.5, 1), cc.fadeIn(.5)), cc.delayTime(1), cc.fadeOut(.5));
        action.tag = 1;
        this.tips.runAction(action);
      },
      showGameToolShop: function showGameToolShop(type, index) {
        this.hideAllChild();
        this.mask.active = true;
        this.gameToolShop.showView(type, index);
      },
      hideGameToolShop: function hideGameToolShop() {
        this.hideAllChild();
        this.gameToolShop.hideView();
      },
      showCoinsPanel: function showCoinsPanel() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.mask.active = true;
        this.freeCoinsPanel.showView();
      },
      hideCoinsPanel: function hideCoinsPanel() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.freeCoinsPanel.hideView();
      },
      showDailyBouns: function showDailyBouns() {
        cc.systemEvent.emit("END_FINGER_GUIDE");
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.mask.active = true;
        this.dailyBouns.showView();
        window.NativeManager.showInterstitialAd(2);
      },
      hideDailyBouns: function hideDailyBouns() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.dailyBouns.hideView();
      },
      showGameEvaluation: function showGameEvaluation(type) {
        if (!!this.reviewUs.node.active) return;
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.mask.active = true;
        this.reviewUs.showView(type);
      },
      hideGameEvaluation: function hideGameEvaluation() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.reviewUs.hideView();
      },
      showLotteryView: function showLotteryView() {
        cc.systemEvent.emit("END_FINGER_GUIDE");
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.mask.active = true;
        this.lottery.showView();
      },
      hideLotteryView: function hideLotteryView() {
        cc.director.SoundManager.playSound("btnEffect");
        this.lottery.hideView();
      },
      showHinderPreview: function showHinderPreview() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.hinderPreview.showView();
      },
      hideHinderPreview: function hideHinderPreview() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.hinderPreview.hideView();
      },
      shareGame: function shareGame() {
        window.NativeManager.goShare();
      },
      showChangeNamePrompt: function showChangeNamePrompt() {
        cc.director.SoundManager.playSound("btnEffect");
        this.hideAllChild();
        this.mask.active = true;
        cc.systemEvent.emit("CHANGE_NAME_SHOW");
      },
      hideChangeNamePrompt: function hideChangeNamePrompt() {
        cc.director.SoundManager.playSound("btnEffect");
        this.showSettingPanel();
        cc.systemEvent.emit("CHANGE_NAME_HIDE");
      },
      showTipsPromptView: function showTipsPromptView() {},
      hideTipsPromptView: function hideTipsPromptView() {},
      start: function start() {
        this.setting.loadEffectSetting();
        this.setting.loadBgmSetting();
      }
    });
    cc._RF.pop();
  }, {
    "../utils": "utils",
    "./boxPanel": "boxPanel",
    "./dailyBouns": "dailyBouns",
    "./freeCoinsPanel": "freeCoinsPanel",
    "./gameToolShop": "gameToolShop",
    "./hinderPreview": "hinderPreview",
    "./lottery": "lottery",
    "./rank": "rank",
    "./reviewUs": "reviewUs",
    "./setting": "setting",
    "./startPrompt": "startPrompt"
  } ],
  setting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "558f1rpfQBIopED3v/mkNbv", "setting");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        effectBtn: cc.Node,
        musicBtn: cc.Node,
        exitBtn: cc.Node,
        bgmViewList: [ cc.SpriteFrame ],
        effectViewList: [ cc.SpriteFrame ],
        btn_changeName: cc.Node
      },
      loadEffectSetting: function loadEffectSetting() {
        var isVoiceOn = cc.director.SoundManager.canSound();
        if (isVoiceOn) {
          cc.director.SoundManager.openSound();
          Utils.changeLocalNodeTexture(this.effectBtn, this.effectViewList, 0);
        } else {
          cc.director.SoundManager.closeSound();
          Utils.changeLocalNodeTexture(this.effectBtn, this.effectViewList, 1);
        }
      },
      loadBgmSetting: function loadBgmSetting() {
        var isBgmOn = cc.sys.localStorage.getItem("bgm");
        if (!isBgmOn) cc.sys.localStorage.setItem("bgm", 1); else {
          isBgmOn = parseInt(isBgmOn);
          if (isBgmOn) {
            this.setBgm(1);
            Utils.changeLocalNodeTexture(this.musicBtn, this.bgmViewList, 0);
          } else {
            this.setBgm(2);
            Utils.changeLocalNodeTexture(this.musicBtn, this.bgmViewList, 1);
          }
        }
      },
      setEffect: function setEffect() {
        cc.director.SoundManager.playSound("btnEffect");
        var isVoiceOn = cc.director.SoundManager.canSound();
        cc.director.SoundManager.playSound("btn");
        if (isVoiceOn) {
          cc.director.SoundManager.closeSound();
          Utils.changeLocalNodeTexture(this.effectBtn, this.effectViewList, 1);
        } else {
          cc.director.SoundManager.openSound();
          Utils.changeLocalNodeTexture(this.effectBtn, this.effectViewList, 0);
        }
      },
      setBgmStatus: function setBgmStatus() {
        cc.director.SoundManager.playSound("btnEffect");
        var isBgmOn = cc.sys.localStorage.getItem("bgm");
        if (!!isBgmOn) {
          isBgmOn = parseInt(isBgmOn);
          if (isBgmOn) {
            this.setBgm(2);
            Utils.changeLocalNodeTexture(this.musicBtn, this.bgmViewList, 1);
            cc.sys.localStorage.setItem("bgm", 0);
          } else {
            this.setBgm(1);
            Utils.changeLocalNodeTexture(this.musicBtn, this.bgmViewList, 0);
            cc.sys.localStorage.setItem("bgm", 1);
          }
        }
      },
      showView: function showView() {
        this.couldChangeName();
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
      },
      hideView: function hideView() {
        this.node.active = false;
      },
      setBgm: function setBgm(type) {
        var audio = cc.find("Canvas").getComponent(cc.AudioSource);
        1 == type ? audio.play() : audio.stop();
      },
      jumpToMainScreen: function jumpToMainScreen() {
        cc.director.dialogScript.showQuitView();
      },
      couldChangeName: function couldChangeName() {
        var localData = cc.sys.localStorage.getItem("localData");
        if (!localData) console.log("\u53ef\u4ee5\u6539\u540d"); else {
          localData = JSON.parse(localData);
          0 == localData.issetname || !this.btn_changeName || (this.btn_changeName.getComponent(cc.Button).interactable = false);
        }
      },
      judgeIsNeedDialog: function judgeIsNeedDialog() {
        var localData = cc.sys.localStorage.getItem("localData");
        if (!localData) cc.director.screenDialog.showChangeNamePrompt(); else {
          localData = JSON.parse(localData);
          0 == localData.issetname ? cc.director.screenDialog.showChangeNamePrompt() : console.log("you had already change your name");
        }
      },
      connectFB: function connectFB() {
        var callback = function callback(isSucc, lid) {
          if (isSucc) {
            var localData = cc.sys.localStorage.getItem("localData");
            var uid, params = {};
            if (!localData) uid = window.NativeManager.getUid(); else {
              localData = JSON.parse(localData);
              uid = localData.uid && "" != localData.uid ? localData.uid : window.NativeManager.getUid();
            }
            params.lid = lid;
            params.country = "";
            params.platform = "";
            var callback1 = function callback1(res) {
              if (!res || 0 !== res.code) cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
                type: 0
              }); else {
                var data = res.data;
                cc.sys.localStorage.setItem("localData", JSON.stringify(data));
                cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
                  type: 1
                });
              }
            };
            cc.director.ServerManager.login(2, uid, params, callback1);
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 0
          });
        };
        window.NativeManager.login(callback);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils"
  } ],
  shop_android: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "770934zmRxLHZ441hxk+oRQ", "shop_android");
    "use strict";
    var Utils = require("../utils");
    var Config = require("../psconfig");
    var GameData = require("../gameData");
    var delayTime = 4;
    cc.Class({
      extends: cc.Component,
      properties: {
        realMoneyShop: cc.Node,
        coinsShop: cc.Node,
        labelList: [ cc.Node ],
        toolItemList: [ cc.Node ],
        shop: require("./shop"),
        btn_item: cc.Node,
        btnItemList: [ cc.SpriteFrame ],
        btn_prop: cc.Node,
        btnPropList: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("UPDATE_TOOLLIST_SHOP", this.updatePlayerToolCount, this);
      },
      initCoinsShopPrice: function initCoinsShopPrice() {
        var price;
        this.playCostList = Config.playerTooLCostList;
        for (var i = 0; i < this.playCostList.length; i++) {
          price = this.playCostList[i].price;
          var labelStr = this.labelList[i].getComponent(cc.Label);
          labelStr.string = price + "";
        }
      },
      updatePlayerToolCount: function updatePlayerToolCount(event) {
        var toolData = GameData.game_prop;
        event.tag || GameData.changeGameTool("playerTool", 1, event.type, true);
        var item = this.toolItemList[event.type];
        var number = item.getChildByName("number").getComponent(cc.Label);
        number.string = "" + toolData[event.type].number;
        !event.isLast || this.shop.playerToolAwayFromView();
      },
      hideview: function hideview() {
        this.node.active = false;
        this.shop.playerToolAwayFromView();
      },
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.showRealMoneyShop();
        this.shop.playerToolIntoView(true);
      },
      showRealMoneyShop: function showRealMoneyShop() {
        this.realMoneyShop.active = true;
        this.coinsShop.active = false;
        this.btn_item.getComponent(cc.Sprite).spriteFrame = this.btnItemList[0];
        this.btn_prop.getComponent(cc.Sprite).spriteFrame = this.btnPropList[1];
      },
      showCoinShop: function showCoinShop() {
        this.realMoneyShop.active = false;
        this.coinsShop.active = true;
        this.btn_item.getComponent(cc.Sprite).spriteFrame = this.btnItemList[1];
        this.btn_prop.getComponent(cc.Sprite).spriteFrame = this.btnPropList[0];
      },
      buyPlayerTool: function buyPlayerTool(type, price) {
        GameData.starCount -= price;
        GameData.storeGameData();
        cc.systemEvent.emit("UPDATE_COINS");
        cc.systemEvent.emit("SUCCESS_BUY_ANIMA", {
          type: type,
          price: price
        });
      },
      buyBoxing: function buyBoxing() {
        var price = this.playCostList[0].price;
        GameData.starCount >= price ? this.buyPlayerTool(0, price) : cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 2
        });
      },
      buAvanil: function buAvanil() {
        var price = this.playCostList[1].price;
        GameData.starCount >= price ? this.buyPlayerTool(1, price) : cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 2
        });
      },
      buyHammer: function buyHammer() {
        var price = this.playCostList[2].price;
        GameData.starCount >= price ? this.buyPlayerTool(2, price) : cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 2
        });
      },
      buyDice: function buyDice() {
        var price = this.playCostList[3].price;
        GameData.starCount >= price ? this.buyPlayerTool(3, price) : cc.systemEvent.emit("TIPS_SUCCESS", {
          wordIndex: 2
        });
      },
      updateGameData: function updateGameData() {
        this.scheduleOnce(function() {
          var data = GameData.getGameData();
          Utils.updateGameInfo(data);
        }, 3);
      },
      gameTrade: function gameTrade() {
        var self = this;
        var type = 1;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("GIFT_SELL_SUCCESS", {
              type: type - 1
            });
            cc.director.funcView.hideShop();
            self.shop.playerToolIntoView();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      gameTrade1: function gameTrade1() {
        var self = this;
        var type = 2;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("GIFT_SELL_SUCCESS", {
              type: type - 1
            });
            cc.director.funcView.hideShop();
            self.shop.playerToolIntoView();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      gameTrade2: function gameTrade2() {
        var self = this;
        var type = 3;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("GIFT_SELL_SUCCESS", {
              type: type - 1
            });
            cc.director.funcView.hideShop();
            self.shop.playerToolIntoView();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      gameTrade3: function gameTrade3() {
        var self = this;
        var type = 4;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("GIFT_SELL_SUCCESS", {
              type: type - 1
            });
            cc.director.funcView.hideShop();
            self.shop.playerToolIntoView();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      gameTrade4: function gameTrade4() {
        var self = this;
        var type = 5;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("GIFT_SELL_SUCCESS", {
              type: type - 1
            });
            cc.director.funcView.hideShop();
            self.shop.playerToolIntoView();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      gameTrade5: function gameTrade5() {
        var self = this;
        var type = 6;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("GIFT_SELL_SUCCESS", {
              type: type - 1
            });
            cc.director.funcView.hideShop();
            self.shop.playerToolIntoView();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      buyCoins: function buyCoins() {
        var self = this;
        var type = 7;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        var coins = Config.coinsList[type - 7];
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("TOOLOBTAIN", {
              type: 0,
              number: coins
            });
            cc.director.funcView.hideShop();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      buyCoins1: function buyCoins1() {
        var self = this;
        var type = 8;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        var coins = Config.coinsList[type - 7];
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("TOOLOBTAIN", {
              type: 0,
              number: coins
            });
            cc.director.funcView.hideShop();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      buyCoins2: function buyCoins2() {
        var self = this;
        var type = 9;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        var coins = Config.coinsList[type - 7];
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("TOOLOBTAIN", {
              type: 0,
              number: coins
            });
            cc.director.funcView.hideShop();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      buyCoins3: function buyCoins3() {
        var self = this;
        var type = 10;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        var coins = Config.coinsList[type - 7];
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("TOOLOBTAIN", {
              type: 0,
              number: coins
            });
            cc.director.funcView.hideShop();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        }, delayTime);
      },
      buyCoins4: function buyCoins4() {
        var self = this;
        var type = 11;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        var coins = Config.coinsList[type - 7];
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("TOOLOBTAIN", {
              type: 0,
              number: coins
            });
            cc.director.funcView.hideShop();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
        }, delayTime);
      },
      buyCoins5: function buyCoins5() {
        var self = this;
        var type = 12;
        cc.systemEvent.emit("LOAD_TIPS_SHOW");
        var coins = Config.coinsList[type - 7];
        window.NativeManager.purchaseGoods(type, callback);
        var callback = function callback(res) {
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
          if (res >= 0) {
            cc.systemEvent.emit("TOOLOBTAIN", {
              type: 0,
              number: coins
            });
            cc.director.funcView.hideShop();
            self.updateGameData();
          } else cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
        };
        this.scheduleOnce(function() {
          cc.systemEvent.emit("TIPS_PROMPT_SHOW", {
            type: 4
          });
          cc.systemEvent.emit("LOAD_TIPS_HIDE");
        }, delayTime);
      },
      start: function start() {
        this.initCoinsShopPrice();
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils",
    "./shop": "shop"
  } ],
  shop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "176c7pLz8VA5bhBAHBir9tE", "shop");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    var shopList = Config.playerTooLCostList;
    cc.Class({
      extends: cc.Component,
      properties: {
        contentList: cc.Node,
        item: cc.Prefab,
        footer: cc.Node,
        toolItemList: [ cc.Node ]
      },
      onLoad: function onLoad() {
        this.node.on("buyPlayerTool", this.buyPlayerTool, this);
        this.winSize = cc.view.getDesignResolutionSize();
        cc.systemEvent.on("UPDATE_TOOLLIST_SHOP", this.updatePlayerToolCount, this);
      },
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.initShopList();
        this.playerToolIntoView(true);
      },
      initShopList: function initShopList() {
        this.contentList.children.length > 0 && this.contentList.removeAllChildren();
        for (var i = 0; i < shopList.length; i++) {
          var item = cc.instantiate(this.item);
          var script = item.getComponent("item_shop");
          script.initItemView(shopList[i]);
          item.parent = this.contentList;
        }
      },
      hideView: function hideView() {
        this.node.active = false;
      },
      buyPlayerTool: function buyPlayerTool(event) {
        var type = event.detail.data.type;
        var price = event.detail.data.price;
        GameData.starCount -= price;
        GameData.storeGameData();
        cc.systemEvent.emit("UPDATE_COINS");
        cc.systemEvent.emit("SUCCESS_BUY_ANIMA", {
          type: type
        });
      },
      updatePlayerToolCount: function updatePlayerToolCount(event) {
        var toolData = GameData.game_prop;
        toolData.length <= 0 && (toolData = [ {
          type: 0,
          name: "battle",
          number: 0
        }, {
          type: 1,
          name: "fork",
          number: 0
        }, {
          type: 2,
          name: "hammer",
          number: 0
        }, {
          type: 3,
          name: "dice",
          number: 0
        } ]);
        if (!event || "number" != typeof event.type) for (var i = 0; i < this.toolItemList.length; i++) {
          var _item = this.toolItemList[i];
          var _number = _item.getChildByName("number").getComponent(cc.Label);
          _number.string = "" + toolData[i].number;
        } else {
          GameData.changeGameTool("playerTool", 1, event.type, true);
          var item = this.toolItemList[event.type];
          var number = item.getChildByName("number").getComponent(cc.Label);
          number.string = "" + toolData[event.type].number;
        }
      },
      playerToolIntoView: function playerToolIntoView(isUpdate) {
        this.winSize || (this.winSize = cc.view.getDesignResolutionSize());
        this.footer.position = cc.v2(0, -this.winSize.height / 2 - this.footer.height);
        !isUpdate || this.updatePlayerToolCount();
        this.footer.active = true;
        var action = cc.spawn(cc.fadeIn(.3), cc.moveTo(.3, cc.v2(0, -this.winSize.height / 2 + this.footer.height / 2)).easing(cc.easeBackOut(3)));
        this.footer.runAction(action);
      },
      playerToolAwayFromView: function playerToolAwayFromView() {
        this.winSize || (this.winSize = cc.view.getDesignResolutionSize());
        var self = this;
        var action = cc.sequence(cc.spawn(cc.fadeOut(.3), cc.moveTo(.3, cc.v2(0, -this.winSize.height / 2))), cc.callFunc(function() {
          self.footer.active = false;
        }));
        this.footer.runAction(action);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  squirrel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "109fa1gqfVEo55DACxZMtYq", "squirrel");
    "use strict";
    var Utils = require("../utils");
    var Config = require("../psconfig");
    cc.Class({
      extends: cc.Component,
      properties: {},
      initBearData: function initBearData(list) {
        this.list = list;
        this.comfirmBearWidthAndHeight(list);
      },
      comfirmBearPosition: function comfirmBearPosition(list) {
        var position;
        if (!!list && list.length > 0) {
          var xPos = (list[1][0] + list[0][0]) / 2;
          var yPos = (list[1][1] + list[0][1]) / 2;
          position = Utils.grid2Pos(xPos, yPos);
        }
        return position || false;
      },
      comfirmBearWidthAndHeight: function comfirmBearWidthAndHeight(list) {
        var xCount = Math.abs(list[1][0] - list[0][0]) + 1;
        var yCount = Math.abs(list[1][1] - list[0][1]) + 1;
        var scale;
        if (xCount - yCount > 0) {
          this.node.height = xCount * Config.cellSize;
          this.node.width = yCount * Config.cellSize;
          this.node.rotation = 0;
        } else {
          this.node.width = xCount * Config.cellSize;
          this.node.height = yCount * Config.cellSize;
          this.node.rotation = 90;
        }
      },
      judgeBearIsHide: function judgeBearIsHide(list) {
        var xStart = this.list[0][0];
        var xEnd = this.list[1][0];
        var yStart = this.list[0][1];
        var yEnd = this.list[1][1];
        var isHide = false;
        for (var i = xStart; i <= xEnd; i++) {
          for (var j = yStart; j <= yEnd; j++) if (list[i][j] >= 1) {
            isHide = true;
            break;
          }
          if (isHide) break;
        }
        return isHide;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ],
  startPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a6a3AtXNRDN7fMMPypkfNG", "startPrompt");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        funcView: require("./funcView"),
        currentLevel: cc.Label,
        toolArea: cc.Node,
        selectArea: cc.Node,
        bigStar: cc.Prefab,
        guideView: require("./guideScreenNode")
      },
      onLoad: function onLoad() {
        this.toolAreaScript = this.toolArea.getComponent("toolChoose");
      },
      showView: function showView() {
        if (8 == GameData.bestLevel) {
          var localRecord = cc.sys.localStorage.getItem("gameToolGuide");
          if (!localRecord) {
            GameData.gameToolList = [ 1, 1, 1 ];
            GameData.storeGameData();
          }
          cc.systemEvent.emit("STOP_TOUCH", {
            number: 1
          });
          this.scheduleOnce(function() {
            this.guideView.showGameToolGuide();
            cc.systemEvent.emit("STOP_TOUCH", {
              number: 2
            });
          }, .6);
        }
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.toolAreaScript.updateGameToolNumber(GameData.gameToolList);
        this.currentLevel.string = GameData.bestLevel + 1 + "";
      },
      hideView: function hideView() {
        this.node.active = false;
        this.toolAreaScript.resumeData();
      },
      jumpToGameView: function jumpToGameView() {
        if (GameData.lifeNumber > 0) {
          cc.director.SoundManager.playSound("btnEffect");
          GameData.storeGameData();
          this.markTime();
          cc.director.loadScene("interface");
          cc.director.jumpCode = 1;
        } else {
          this.funcView.showPowerPool();
          this.node.parent.getComponent("screenDialog").hideStartPrompt();
        }
      },
      markTime: function markTime() {
        var time = cc.sys.localStorage.getItem("restTime");
        if (time) return;
        var current = Math.floor(new Date().getTime() / 1e3);
        cc.sys.localStorage.setItem("restTime", JSON.stringify(current));
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils",
    "./funcView": "funcView",
    "./guideScreenNode": "guideScreenNode"
  } ],
  target: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d00b9ToLDhFM67YiD9Zqh0h", "target");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        viewList: [ cc.SpriteFrame ],
        nodeList: [ cc.Node ],
        step: cc.Label,
        hinderListView: [ cc.SpriteFrame ],
        gameMask: cc.Node,
        resultTips: require("./resultTips"),
        boom_star: cc.Prefab
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("NUMBER_COUNT", this.countBlockNumber, this);
        cc.systemEvent.on("STEP_COUNT", this.countGameStep, this);
        cc.systemEvent.on("GAMEMASK_CONTROL", this.controlGameMask, this);
      },
      resumeGameStatues: function resumeGameStatues() {
        this.isPass = false;
        this.isGameEnd = false;
        this.initTargetNumber();
      },
      hideTargetNode: function hideTargetNode() {
        for (var i = 0; i < this.nodeList.length; i++) {
          this.nodeList[i].active = false;
          var finishIcon = this.nodeList[i].getChildByName("finishIcon");
          finishIcon.active = false;
        }
      },
      controlGameMask: function controlGameMask(event) {
        1 == event.order ? this.gameMask.active = true : this.gameMask.active = false;
      },
      initTargetNumber: function initTargetNumber() {
        this.targetList = {};
      },
      updateNodeTag: function updateNodeTag(list, step) {
        this.originStep = step;
        this.stepCount = step;
        this.tContent = list;
        this.updateGameStep(this.stepCount);
        this.hideTargetNode();
        var gap = this.computedNodeGap(list.length, this.node, this.nodeList[0]);
        for (var i = 0; i < list.length; i++) {
          var node = this.nodeList[i];
          node.position = cc.v2(gap * (i + 1) + node.width * i + node.width / 2, 0);
          node.active = true;
          node.name = list[i][0] + "";
          var sprite = node.getChildByName("icon");
          var type = list[i][0] < 20 ? list[i][0] : list[i][0] - 20;
          list[i][0] < 20 ? Utils.changeLocalNodeTexture(sprite, this.viewList, type) : 38 == list[i][0] ? Utils.changeLocalNodeTexture(sprite, this.hinderListView, 10) : 39 == list[i][0] ? Utils.changeLocalNodeTexture(sprite, this.hinderListView, 11) : 37 == list[i][0] ? Utils.changeLocalNodeTexture(sprite, this.hinderListView, 12) : Utils.changeLocalNodeTexture(sprite, this.hinderListView, type);
          this.updateTargetNumber(list[i][0], list[i][1]);
          this.targetList[list[i][0] + ""] = list[i][1];
        }
      },
      updateTargetNumber: function updateTargetNumber(type, num) {
        var children = this.node.getChildByName(type + "");
        var numNode = children.getChildByName("num");
        var number = numNode.getComponent(cc.Label);
        if (num > 0) {
          number.string = num + "";
          numNode.active = true;
          var act = children.getActionByTag(2);
          if (!!act && !act.isDone()) return;
          var action = cc.sequence(cc.scaleTo(.2, .9), cc.scaleTo(.2, 1.1), cc.scaleTo(.2, 1));
          action.tag = 2;
          children.runAction(action);
          var star = cc.instantiate(this.boom_star);
          star.parent = children;
          star.getComponent(cc.ParticleSystem).resetSystem();
        } else {
          numNode.active = false;
          var finishIcon = children.getChildByName("finishIcon");
          finishIcon.active = true;
        }
      },
      updateGameStep: function updateGameStep(num) {
        this.step.string = num + "";
      },
      computedNodeGap: function computedNodeGap(num, parent, child) {
        var gap = (parent.width - num * child.width) / (num + 1);
        return gap;
      },
      countGameStep: function countGameStep() {
        this.stepCount--;
        if (this.stepCount > 0) {
          this.updateGameStep(this.stepCount);
          this.isPass || 5 != this.stepCount || cc.systemEvent.emit("FIVE_STEP_TIPS");
        } else {
          this.isGameEnd = true;
          this.updateGameStep("0");
          cc.director.container.canclePlayerNotice();
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 1
          });
          this.checkDeath();
        }
      },
      checkDeath: function checkDeath() {
        this.scheduleOnce(function() {
          0 == cc.director.isPine && (cc.director.isrunning || 1 == cc.director.isSuperTool || 1 == cc.director.needWait ? this.checkDeath() : this.scheduleOnce(function() {
            0 != cc.director.isPine || cc.director.isrunning || cc.director.isMoving || this.scheduleOnce(function() {
              this.isPass || cc.director.dialogScript.showResultTipsView(2);
            }, 2);
          }, .3));
        }.bind(this), .5);
      },
      showSuccess: function showSuccess() {
        1 == cc.director.isSuperTool ? this.scheduleOnce(function() {
          this.showSuccess();
        }.bind(this), .5) : this.scheduleOnce(function() {
          cc.director.dialogScript.showResultTipsView(1);
        }, 2);
      },
      isFinishedTarget: function isFinishedTarget() {
        if (this.isPass) return;
        var isFinished = true;
        for (var item in this.targetList) if (this.targetList[item + ""] > 0) {
          isFinished = false;
          break;
        }
        if (isFinished && this.stepCount >= 0) {
          this.isPass = true;
          this.isGameEnd = true;
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 1
          });
          cc.director.container.canclePlayerNotice();
          this.showSuccess();
        } else cc.director.checkLastPine > 0 && (this.stepCount > 0 ? cc.director.isPine = 0 : this.scheduleOnce(function() {
          cc.director.checkLastPine--;
          cc.director.checkLastPine <= 0 && cc.director.dialogScript.showResultTipsView(2);
        }, 1.1));
      },
      changeStepToRocket: function changeStepToRocket(list, startPos) {
        var item = list.pop();
        this.updateGameStep(list.length);
        this.countGameStep();
        cc.systemEvent.emit("FIREINTHEHOLE", {
          startPos: startPos,
          endGrid: item,
          step: this.stepCount
        });
        list.length > 0 && this.scheduleOnce(function() {
          this.changeStepToRocket(list, startPos);
        }, .1);
      },
      submitPlayerUsedStep: function submitPlayerUsedStep() {
        var costStep = this.originStep - this.stepCount;
        var isProp = !cc.director.isPlayerUsedTool ? 0 : 1;
        window.NativeManager.tjReport(GameData.bestLevel + 1, costStep, isProp);
      },
      countBlockNumber: function countBlockNumber(event) {
        var obj = event;
        if (this.judgeType(obj.type) || 100 == obj.type) {
          if (100 != obj.type) {
            var name;
            obj.type >= 23 && obj.type <= 25 ? obj.type = 25 : obj.type >= 29 && obj.type <= 36 && (obj.type = 29);
            name = obj.type + "";
            if (this.targetList[name] >= 0) {
              this.targetList[name] > 0 && this.targetList[name]--;
              this.updateTargetNumber(obj.type, this.targetList[name]);
            } else this.targetList[name] = 0;
          }
          20 != event.type && this.isFinishedTarget();
        }
      },
      judgeType: function judgeType(type) {
        var isContain = false;
        for (var i = 0; i < this.tContent.length; i++) if (25 == this.tContent[i][0]) {
          if (type >= 23 && type <= 25) {
            isContain = true;
            break;
          }
        } else if (29 == this.tContent[i][0]) {
          if (type >= 29 && type <= 36) {
            isContain = true;
            break;
          }
        } else if (this.tContent[i][0] == type) {
          isContain = true;
          break;
        }
        return isContain;
      },
      getTargetIconWolrdPosition: function getTargetIconWolrdPosition(tag) {
        var node = this.node.getChildByName("" + tag);
        if (!node) return false;
        var worldPosition = node.parent.convertToWorldSpaceAR(node.position);
        return worldPosition;
      },
      checkTargetAgain: function checkTargetAgain() {
        var isFinished = true;
        for (var item in this.targetList) if (this.targetList[item + ""] > 0) {
          isFinished = false;
          break;
        }
        return isFinished;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    "../utils": "utils",
    "./resultTips": "resultTips"
  } ],
  tipsPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6a36PoEp1HEIWB4/jlaVts", "tipsPrompt");
    "use strict";
    var Utils = require("../utils");
    cc.Class({
      extends: cc.Component,
      properties: {
        tipsWord: cc.Sprite,
        tipsWordList: [ cc.SpriteFrame ]
      },
      showView: function showView(type) {
        cc.director.screenDialog.hideAllChild();
        cc.director.screenDialog.mask.active = true;
        this.type = type;
        this.node.active = true;
        this.showPromptWithScale(this.node);
        this.tipsWord.spriteFrame = this.tipsWordList[type];
      },
      showPromptWithScale: function showPromptWithScale(node) {
        node.scale = .2;
        node.runAction(cc.scaleTo(.3, .8).easing(cc.easeBackOut(3)));
      },
      hideView: function hideView() {
        this.node.active = false;
        cc.director.screenDialog.hideAllChild();
        this.type < 4 && cc.director.screenDialog.showSettingPanel();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../utils": "utils"
  } ],
  toolChoose: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9c4abhCZBZLhp2uoVIEiC84", "toolChoose");
    "use strict";
    var GameData = require("../gameData");
    cc.Class({
      extends: cc.Component,
      properties: {
        screenDialog: require("screenDialog"),
        btnList: [ cc.Node ],
        btnView: [ cc.SpriteFrame ],
        btnChooseView: [ cc.SpriteFrame ],
        lockIcon: cc.SpriteFrame
      },
      onLoad: function onLoad() {
        this.toolList = [ 300, 35, 4 ];
        this.toolNum = [ 0, 0, 0 ];
      },
      initBtnTag: function initBtnTag() {
        for (var i = 0; i < this.btnList.length; i++) this.btnList[i].name = i.toString();
      },
      updateGameToolNumber: function updateGameToolNumber(list) {
        if (GameData.bestLevel < 8) this.lockTool(); else for (var i = 0; i < list.length; i++) {
          var item = this.btnList[i];
          var number = item.getChildByName("count").getComponent(cc.Label);
          var addIcon = item.getChildByName("addIcon");
          this.addEventListener(item);
          if (list[i] > 0) {
            number.string = "" + list[i];
            number.node.active = true;
            addIcon.active = false;
          } else {
            number.node.active = false;
            addIcon.active = true;
          }
        }
      },
      lockTool: function lockTool() {
        for (var i = 0; i < this.btnList.length; i++) {
          var item = this.btnList[i];
          var view = item.getChildByName("view");
          var addIcon = item.getChildByName("addIcon");
          var num = item.getChildByName("count");
          addIcon.active = num.active = false;
          view.getComponent(cc.Sprite).spriteFrame = this.lockIcon;
        }
      },
      addEventListener: function addEventListener(node) {
        node.on(cc.Node.EventType.TOUCH_END, this.gameToolBtnTouchEvent, this);
      },
      gameToolBtnTouchEvent: function gameToolBtnTouchEvent(event) {
        cc.director.SoundManager.playSound("btnEffect");
        var node = event.target;
        var tag = parseInt(node.name);
        var numNode = node.getChildByName("count");
        var view = node.getChildByName("view");
        if (GameData.gameToolList[tag] > 0) {
          if (!node.hasBeenChoosed) {
            view.getComponent(cc.Sprite).spriteFrame = this.btnChooseView[tag];
            node.hasBeenChoosed = true;
            this.toolNum[tag] = 1;
            numNode.active = false;
          } else {
            view.getComponent(cc.Sprite).spriteFrame = this.btnView[tag];
            node.hasBeenChoosed = false;
            this.toolNum[tag] = 0;
            numNode.active = true;
          }
          GameData.choosedList = this.toolNum;
        } else {
          var scene = cc.director.getScene();
          "gameView" == scene.name && cc.director.dialogScript.showPlayerShop(tag, 1);
          "mainScreen" == scene.name && this.screenDialog.showGameToolShop(tag, 1);
        }
      },
      resumeData: function resumeData() {
        for (var i = 0; i < this.btnList.length; i++) {
          var item = this.btnList[i];
          item.getChildByName("view").getComponent(cc.Sprite).spriteFrame = this.btnView[i];
          var numNode = item.getChildByName("count");
          if (!item.hasBeenChoosed) numNode.active = true; else {
            numNode.active = false;
            item.hasBeenChoosed = false;
          }
        }
      },
      getTooNumList: function getTooNumList() {
        return this.toolNum;
      },
      start: function start() {
        this.initBtnTag();
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData",
    screenDialog: "screenDialog"
  } ],
  toolExplain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6dd36oSgGVPVZVkSbwycjb8", "toolExplain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        mask: cc.Node,
        funcNode: cc.Node,
        item: cc.Node,
        explainView: cc.Sprite,
        iconView: cc.Sprite,
        explain_list: [ cc.SpriteFrame ],
        icon_list: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        var winSize = cc.view.getVisibleSize();
        this.startPos = cc.v2(0, (winSize.height + this.funcNode.height) / 2);
        this.endPos = cc.v2(0, (winSize.height - this.funcNode.height) / 2);
        cc.systemEvent.on("FUNCTION_EXPLAIN_ON", this.showView, this);
        cc.systemEvent.on("FUNCTION_EXPLAIN_OFF", this.hideView, this);
      },
      showView: function showView(event) {
        var type = event.type;
        var itemPos = event.itemPos;
        this.item.position = this.node.convertToNodeSpaceAR(itemPos);
        this.explainView.spriteFrame = this.explain_list[type];
        this.iconView.spriteFrame = this.icon_list[type];
        this.item.getComponent(cc.Sprite).spriteFrame = this.icon_list[type];
        this.show_();
        this.initFuncNode();
      },
      hideView: function hideView() {
        this.hide_();
      },
      initFuncNode: function initFuncNode() {
        this.funcNode.stopAllActions();
        this.funcNode.position = this.startPos;
        this.funcNode.runAction(cc.spawn(cc.fadeIn(.1), cc.moveTo(.5, this.endPos)));
      },
      show_: function show_() {
        this.mask.active = true;
        this.mask.opacity = 220;
        this.funcNode.active = true;
        this.item.active = true;
        this.item.opacity = 255;
      },
      hide_: function hide_() {
        cc.director.SoundManager.playSound("btnEffect");
        this.funcNode.stopAllActions();
        this.nodeFadeOut(this.mask);
        this.nodeFadeOut(this.item);
        this.funcNode.runAction(cc.sequence(cc.moveTo(.5, this.startPos), cc.fadeOut(.1)));
      },
      nodeFadeOut: function nodeFadeOut(node) {
        node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(function() {
          node.active = false;
        })));
      },
      cancleTool: function cancleTool() {
        cc.systemEvent.emit("CLEAR_BTN");
        cc.systemEvent.emit("FUNCTION_EXPLAIN_OFF");
      },
      start: function start() {
        this.initFuncNode();
      }
    });
    cc._RF.pop();
  }, {} ],
  toolItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c86e9NbU2VL1L2ZuzlBTgZp", "toolItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        viewList: [ cc.SpriteFrame ]
      },
      changeItemTexture: function changeItemTexture(type) {
        this.node.getComponent(cc.Sprite).spriteFrame = this.viewList[type];
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  toolList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a89c0TBPEtC2YhaYfaDQFno", "toolList");
    "use strict";
    var GameData = require("../gameData");
    var unlockList = [ 1, 5, 10, 15 ];
    cc.Class({
      extends: cc.Component,
      properties: {
        btn1: cc.Node,
        btn2: cc.Node,
        btn3: cc.Node,
        btn4: cc.Node,
        lockList: [ cc.SpriteFrame ],
        unlockList: [ cc.SpriteFrame ],
        lockIcon: cc.SpriteFrame
      },
      onLoad: function onLoad() {
        this.focusIndex = -1;
        cc.director.changeList = [];
        cc.systemEvent.on("CLEAR_BTN", this.clearBtnFocusEffect, this);
        cc.systemEvent.on("UPDATE_TOOL", this.updateToolCountDisplay, this);
        cc.systemEvent.on("BUY_TOOL", this.buyTool, this);
        cc.systemEvent.on("UPDATE_STATUS", this.loadBtnstatu, this);
        cc.systemEvent.on("LIMITED_BTN", this.limitedUnlockTool, this);
        cc.systemEvent.on("JUDGELEVEL", this.judgeLevel, this);
        this.initBtnName();
      },
      initBtnName: function initBtnName() {
        this.btn1.name = "btn1";
        this.btn2.name = "btn2";
        this.btn3.name = "btn3";
        this.btn4.name = "btn4";
      },
      updateToolCost: function updateToolCost(type) {
        var name = "btn" + type;
        var node = this.node.getChildByName(name).getChildByName("priceNode");
        var scoreLabel = node.getChildByName("price").getComponent(cc.Label);
        scoreLabel.string = "" + this.toolCost[type - 1];
      },
      updateToolBtnStatus: function updateToolBtnStatus(type, statu) {
        var name = "btn" + type;
        var node = this.node.getChildByName(name);
        node.getComponent(cc.Button).interactable = false;
        node.getComponent(cc.Sprite).spriteFrame = 1 == statu ? this.lockList[type - 1] : this.lockList[4];
      },
      unlockToolbtn: function unlockToolbtn(type) {
        var name = "btn" + type;
        var node = this.node.getChildByName(name);
        node.getComponent(cc.Button).interactable = true;
        node.getComponent(cc.Sprite).spriteFrame = this.unlockList[type - 1];
      },
      initToolDisplay: function initToolDisplay() {
        for (var i = 1; i < 5; i++) cc.systemEvent.emit("UPDATE_TOOL", {
          type: i
        });
      },
      updateToolCountDisplay: function updateToolCountDisplay(event) {
        var data = event;
        var name = "btn" + data.type;
        var eNumber = !event.number ? 1 : event.number;
        var node = this.node.getChildByName(name);
        var child_label = node.getChildByName("number").getComponent(cc.Label);
        1 == data.statuCode && (GameData.game_prop[data.type - 1].number += eNumber);
        2 == data.statuCode && (GameData.game_prop[data.type - 1].number -= eNumber);
        child_label.string = "" + GameData.game_prop[data.type - 1].number;
        var addIcon = node.getChildByName("addIcon");
        if (GameData.game_prop[data.type - 1].number <= 0) {
          addIcon.active = true;
          child_label.node.active = false;
        } else {
          addIcon.active = false;
          child_label.node.active = true;
        }
        3 != data.statuCode && GameData.storeGameData();
      },
      buyTool: function buyTool(e) {
        var type = e.detail.type;
        if (GameData.starCount >= this.toolCost[type - 1]) {
          GameData.starCount -= this.toolCost[type - 1];
          GameData.storeGameData();
        }
      },
      buy_1: function buy_1() {
        this.buyTool(1);
      },
      buy_2: function buy_2() {
        this.buyTool(2);
      },
      buy_3: function buy_3() {
        this.buyTool(3);
      },
      buy_4: function buy_4() {
        this.buyTool(4);
      },
      btn1Event: function btn1Event(event) {
        cc.director.SoundManager.playSound("btnEffect");
        var index = 1;
        var node = event.target;
        var wp = node.parent.convertToWorldSpaceAR(node);
        if (GameData.game_prop[index - 1].number > 0) if (this.focusIndex != index) {
          -1 != this.focusIndex && this.clearBtnFocusEffect();
          this.focusIndex = index;
          this.onFocusEffect(this.btn1);
          cc.director.toolType = index;
          cc.systemEvent.emit("FUNCTION_EXPLAIN_ON", {
            type: index - 1,
            itemPos: wp
          });
        } else this.clearBtnFocusEffect(); else cc.director.dialogScript.showPlayerShop(index, 2);
      },
      btn2Event: function btn2Event(event) {
        var index = 2;
        cc.director.SoundManager.playSound("btnEffect");
        var node = event.target;
        var wp = node.parent.convertToWorldSpaceAR(node);
        if (GameData.game_prop[index - 1].number > 0) if (this.focusIndex != index) {
          -1 != this.focusIndex && this.clearBtnFocusEffect();
          this.focusIndex = index;
          this.onFocusEffect(this.btn2);
          cc.director.toolType = index;
          cc.systemEvent.emit("FUNCTION_EXPLAIN_ON", {
            type: index - 1,
            itemPos: wp
          });
        } else this.clearBtnFocusEffect(); else cc.director.dialogScript.showPlayerShop(index, 2);
      },
      btn3Event: function btn3Event(event) {
        var index = 3;
        cc.director.SoundManager.playSound("btnEffect");
        var node = event.target;
        var wp = node.parent.convertToWorldSpaceAR(node);
        if (GameData.game_prop[index - 1].number > 0) if (this.focusIndex != index) {
          -1 != this.focusIndex && this.clearBtnFocusEffect();
          this.focusIndex = index;
          this.onFocusEffect(this.btn3);
          cc.director.toolType = index;
          cc.systemEvent.emit("FUNCTION_EXPLAIN_ON", {
            type: index - 1,
            itemPos: wp
          });
        } else this.clearBtnFocusEffect(); else cc.director.dialogScript.showPlayerShop(index, 2);
      },
      btn4Event: function btn4Event(event) {
        var index = 4;
        cc.director.SoundManager.playSound("btnEffect");
        var node = event.target;
        var wp = node.parent.convertToWorldSpaceAR(node);
        if (GameData.game_prop[index - 1].number > 0) if (this.focusIndex != index) {
          -1 != this.focusIndex && this.clearBtnFocusEffect();
          this.focusIndex = index;
          this.onFocusEffect(this.btn4);
          cc.director.toolType = index;
          cc.systemEvent.emit("FUNCTION_EXPLAIN_ON", {
            type: index - 1,
            itemPos: wp
          });
        } else this.clearBtnFocusEffect(); else cc.director.dialogScript.showPlayerShop(index, 2);
      },
      onFocusEffect: function onFocusEffect(node) {
        var action = cc.sequence(cc.scaleTo(.5, .9), cc.scaleTo(.5, 1)).repeatForever();
        action.tag = 1;
        node.runAction(action);
      },
      clearBtnFocusEffect: function clearBtnFocusEffect() {
        var children = this.node.children;
        if (this.focusIndex - 1 >= 0) {
          children[this.focusIndex - 1].stopActionByTag(1);
          children[this.focusIndex - 1].scale = 1;
          this.focusIndex = -1;
          cc.director.toolType = -1;
        }
      },
      getUnlockBtnList: function getUnlockBtnList(level) {
        var type;
        var list = [];
        for (var i = 0; i < unlockList.length; i++) if (level >= unlockList[i]) {
          type = i + 1;
          list.push(type);
        }
        return list;
      },
      loadBtnstatu: function loadBtnstatu() {
        var data = GameData.getGameData();
        var list = this.getUnlockBtnList(data.bestLevel);
        for (var i = 0; i < list.length; i++) this.unlockToolbtn(list[i]);
      },
      limitedUnlockTool: function limitedUnlockTool() {
        var data = GameData.getGameData();
        var list = this.getUnlockBtnList(data.bestLevel);
        for (var i = 0; i < list.length; i++) this.updateToolBtnStatus(list[i], 1);
      },
      lockedAllPlayerTool: function lockedAllPlayerTool() {
        for (var i = 1; i < 5; i++) {
          var name = "btn" + i;
          var item = this.node.getChildByName(name);
          item.getChildByName("number").active = false;
          item.getComponent(cc.Button).interactable = false;
          item.getComponent(cc.Sprite).spriteFrame = this.lockIcon;
          item.getChildByName("lockLevel").active = true;
        }
      },
      unlockPlayerTool: function unlockPlayerTool() {
        var nameList = [ "btn1", "btn2", "btn3", "btn4" ];
        if (GameData.bestLevel < 41) for (var i = 0; i < nameList.length; i++) {
          var name = nameList[i];
          var record = cc.sys.localStorage.getItem(name);
          !record || this.changeBtnStatus(i + 1);
        } else for (var _i = 0; _i < nameList.length; _i++) {
          var _name = nameList[_i];
          var item = this.node.getChildByName(_name);
          item.getChildByName("number").active = true;
          item.getComponent(cc.Button).interactable = true;
          item.getComponent(cc.Sprite).spriteFrame = this.unlockList[_i];
          item.getChildByName("lockLevel").active = false;
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: _i + 1
          });
        }
      },
      changeBtnStatus: function changeBtnStatus(num) {
        var name = "btn" + num;
        var item = this.node.getChildByName(name);
        var record = cc.sys.localStorage.getItem(name);
        if (!!record) {
          item.getChildByName("number").active = true;
          item.getComponent(cc.Button).interactable = true;
          item.getComponent(cc.Sprite).spriteFrame = this.unlockList[num - 1];
          item.getChildByName("lockLevel").active = false;
          cc.systemEvent.emit("UPDATE_TOOL", {
            type: num
          });
        }
      },
      judgeEjectToolIntroduce: function judgeEjectToolIntroduce(num) {
        var name = "btn" + num;
        var record = cc.sys.localStorage.getItem(name);
        var item = this.node.getChildByName(name);
        if (!record) {
          var worldPos = item.parent.convertToWorldSpaceAR(item.position);
          cc.systemEvent.emit("PLAYER_TOOL_ANIMATION", {
            pos: worldPos,
            num: num
          });
          cc.sys.localStorage.setItem(name, "yes");
        }
      },
      judgeLevel: function judgeLevel() {
        9 == GameData.bestLevel ? this.judgeEjectToolIntroduce(1) : 20 == GameData.bestLevel ? this.judgeEjectToolIntroduce(2) : 30 == GameData.bestLevel ? this.judgeEjectToolIntroduce(3) : 40 == GameData.bestLevel && this.judgeEjectToolIntroduce(4);
      },
      start: function start() {
        this.lockedAllPlayerTool();
        this.unlockPlayerTool();
      }
    });
    cc._RF.pop();
  }, {
    "../gameData": "gameData"
  } ],
  toolRock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ed37au8epD5YFa2vt48xPj", "toolRock");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  toolcombine_effect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c4fc4kaa4lEM5mO+VHTvoqA", "toolcombine_effect");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        light: cc.Node,
        particle: cc.ParticleSystem
      },
      effect: function effect() {
        this.light.opacity = 200;
        var action = cc.spawn(cc.scaleTo(.5, 2), cc.fadeOut(.5));
        this.particle.resetSystem();
        this.light.runAction(action);
      },
      start: function start() {
        this.effect();
      }
    });
    cc._RF.pop();
  }, {} ],
  "use_v2.0.x_cc.Toggle_event": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b0250ncLwFL95En+/Bw6Iw9", "use_v2.0.x_cc.Toggle_event");
    "use strict";
    cc.Toggle && (cc.Toggle._triggerEventInScript_check = true);
    cc._RF.pop();
  }, {} ],
  utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "63d08Jw2rhGWLSCBzmgKq6a", "utils");
    "use strict";
    var Config = require("./psconfig");
    var gap = 1.9;
    var randomColorByArray = function randomColorByArray(array) {
      var i = Math.floor(Math.random() * array.length);
      return array[i];
    };
    function initMatrixDataPortraitRandom() {
      var matrixData = new Array(Config.matrixRow);
      for (var row = 0; row < Config.matrixRow; row++) {
        matrixData[row] = new Array(Config.matrixCol);
        for (var col = 0; col < Config.matrixCol; col++) matrixData[row][col] = randomColorByArray(Config.totalColors);
      }
      return matrixData;
    }
    function addHinder(list, num, type) {
      var tempList = [];
      while (tempList.length < num) {
        var randomX = Math.floor(Math.random() * Config.matrixRow);
        var randomY = Math.floor(Math.random() * Config.matrixCol);
        var item = cc.v2(randomX, randomY);
        if (!this.indexOfV2(tempList, item) && list[randomX][randomY] >= 0 && list[randomX][randomY] < Config.rType) {
          list[randomX][randomY] = type;
          tempList.push(item);
        }
      }
      return list;
    }
    function getColData(matrix, pos) {
      var col = pos.y;
      var list = [];
      list.push(pos);
      for (var i = 0; i < matrix[col].length; i++) if (matrix[i][col] >= 0 && i != pos.x && 20 != matrix[i][col]) {
        var item = cc.v2(i, col);
        list.push(item);
      }
      return list;
    }
    function getRowData(matrix, pos) {
      var row = pos.x;
      var list = [];
      list.push(pos);
      for (var i = 0; i < matrix[row].length; i++) if (matrix[row][i] >= 0 && i != pos.y && 20 != matrix[row][i]) {
        var item = cc.v2(row, i);
        list.push(item);
      }
      return list;
    }
    function getBalloonClearList(matrix, list, type) {
      var balloonList = [];
      for (var i = 0; i < list.length; i++) {
        var itemList = this.getItemAdjacentPos(list[i]);
        for (var j = 0; j < itemList.length; j++) {
          var subItem = itemList[j];
          var cubeType = matrix[subItem.x][subItem.y];
          this.indexOfV2(list, subItem) || this.indexOfV2(balloonList, subItem) || (23 == type && cubeType >= type && cubeType <= type + 2 ? balloonList.push(subItem) : 29 == type && cubeType >= type && cubeType <= type + 7 ? balloonList.push(subItem) : cubeType == type && balloonList.push(subItem));
        }
      }
      return balloonList;
    }
    function getItemAdjacentPos(pos) {
      var list = [];
      if (pos.x - 1 >= 0) {
        var item = cc.v2(pos.x - 1, pos.y);
        this.indexOfV2(list, item) || list.push(item);
      }
      if (pos.x + 1 < Config.matrixCol) {
        var _item = cc.v2(pos.x + 1, pos.y);
        this.indexOfV2(list, _item) || list.push(_item);
      }
      if (pos.y - 1 >= 0) {
        var _item2 = cc.v2(pos.x, pos.y - 1);
        this.indexOfV2(list, _item2) || list.push(_item2);
      }
      if (pos.y + 1 < Config.matrixRow) {
        var _item3 = cc.v2(pos.x, pos.y + 1);
        this.indexOfV2(list, _item3) || list.push(_item3);
      }
      return list;
    }
    function randomGetGrid(num, mlist) {
      var list = [];
      var count = 0;
      for (var i = 0; i < mlist.length; i++) for (var j = 0; j < mlist[i].length; j++) mlist[i][j] >= 0 && mlist[i][j] < Config.rType && count++;
      if (0 == count) return list;
      num = count > num ? num : count;
      while (list.length < num) {
        var xRandom = Math.floor(Math.random() * Config.matrixCol);
        var yRandom = Math.floor(Math.random() * Config.matrixRow);
        var item = cc.v2(xRandom, yRandom);
        mlist[xRandom][yRandom] >= 0 && mlist[xRandom][yRandom] < Config.rType && !this.indexOfV2(list, item) && list.push(item);
      }
      return list;
    }
    function creatSpecialStarList() {
      var list = [];
      var x, y;
      do {
        x = Math.floor(10 * Math.random());
        y = Math.floor(10 * Math.random());
        var p = cc.v2(x, y);
        this.indexOfV2(list, p) || list.push(p);
      } while (list.length < 3);
      return list;
    }
    function girdToPos(gx, gy, flexGap) {
      var px = flexGap + gap + .5 * Config.cellSize + (Config.cellSize + gap) * gy;
      var py = flexGap + gap + .5 * Config.cellSize + (Config.cellSize + gap) * gx;
      return cc.v2(px, py);
    }
    function grid2Pos(gx, gy) {
      var px = gap + .5 * Config.cellSize + (Config.cellSize + gap) * gy;
      var py = gap + .5 * Config.cellSize + (Config.cellSize + gap) * gx;
      return cc.v2(px, py);
    }
    function pos2Grid(px, py) {
      var gx = (py - .5 * Config.cellSize - gap) / (Config.cellSize + gap);
      var gy = (px - .5 * Config.cellSize - gap) / (Config.cellSize + gap);
      return cc.v2(Math.round(gx), Math.round(gy));
    }
    function indexValue(row, col) {
      return row * Config.matrixCol + col;
    }
    function resolveIndex(index) {
      var col = index % Config.matrixCol;
      var row = (index - col) / Config.matrixCol;
      return cc.v2(row, col);
    }
    function indexOfV2(array, p) {
      return array.some(function(elem, index, arr) {
        return elem.x == p.x && elem.y == p.y;
      });
    }
    function rainbowStarRemoveList(data, p) {
      var list = [];
      var sRow = p.x - 1 >= 0 ? p.x - 1 : p.x;
      var sCol = p.y - 1 >= 0 ? p.y - 1 : p.y;
      var eRow = p.x + 1 < Config.matrixCol ? p.x + 1 : p.x;
      var eCol = p.y + 1 < Config.matrixCol ? p.y + 1 : p.y;
      list.push(p);
      for (var i = sRow; i <= eRow; i++) for (var j = sCol; j <= eCol; j++) if (data[i][j] >= 0) {
        if (i == p.x && j == p.y) continue;
        var item = cc.v2(i, j);
        list.push(item);
      }
      return list;
    }
    function getSameBlockList(data, p, type) {
      var tag = type;
      var list = [];
      list.push(p);
      for (var i = 0; i < data.length; i++) for (var j = 0; j < data[i].length; j++) if (data[i][j] == tag) {
        var vector = cc.v2(i, j);
        list.push(vector);
      }
      return list;
    }
    function needCombineTool(data, p) {
      var list = [];
      var toolList = [];
      toolList.push(p);
      do {
        var any = toolList.pop();
        if (any.y - 1 >= 0 && data[any.x][any.y - 1] >= Config.rType && data[any.x][any.y - 1] < 20) {
          var item = cc.v2(any.x, any.y - 1);
          this.indexOfV2(list, item) || this.indexOfV2(toolList, item) || toolList.push(item);
        }
        if (any.y + 1 < Config.matrixCol && data[any.x][any.y + 1] >= Config.rType && data[any.x][any.y + 1] < 20) {
          var _item4 = cc.v2(any.x, any.y + 1);
          this.indexOfV2(list, _item4) || this.indexOfV2(toolList, _item4) || toolList.push(_item4);
        }
        if (any.x - 1 >= 0 && data[any.x - 1][any.y] >= Config.rType && data[any.x - 1][any.y] < 20) {
          var _item5 = cc.v2(any.x - 1, any.y);
          this.indexOfV2(list, _item5) || this.indexOfV2(toolList, _item5) || toolList.push(_item5);
        }
        if (any.x + 1 < Config.matrixRow && data[any.x + 1][any.y] >= Config.rType && data[any.x + 1][any.y] < 20) {
          var _item6 = cc.v2(any.x + 1, any.y);
          this.indexOfV2(list, _item6) || this.indexOfV2(toolList, _item6) || toolList.push(_item6);
        }
        list.push(any);
      } while (toolList.length > 0);
      return list;
    }
    function getRowAndCol(data, p) {
      var list = this.getColData(data, p);
      var rowList = this.getRowData(data, p);
      for (var i = 0; i < rowList.length; i++) this.indexOfV2(list, rowList[i]) || list.push(rowList[i]);
      return list;
    }
    function get3Row(data, p) {
      var list = this.getRowData(data, p);
      var rowList1, rowList2;
      var count = 2;
      while (count > 0) {
        if (p.x - 1 >= 0) {
          var vector = cc.v2(p.x - 1, p.y);
          rowList1 = this.getRowData(data, vector);
          for (var i = 0; i < rowList1.length; i++) this.indexOfV2(list, rowList1[i]) || list.push(rowList1[i]);
        }
        if (p.x + 1 < Config.matrixRow) {
          var _vector = cc.v2(p.x + 1, p.y);
          rowList2 = this.getRowData(data, _vector);
          for (var _i = 0; _i < rowList2.length; _i++) this.indexOfV2(list, rowList2[_i]) || list.push(rowList2[_i]);
        }
        count--;
      }
      return list;
    }
    function get3Col(data, p) {
      var list = this.get3Row(data, p);
      var cStart = p.y - 1 >= 0 ? p.y - 1 : 0;
      var cEnd = p.y + 1 < Config.matrixCol ? p.y + 1 : Config.matrixCol - 1;
      for (var i = 0; i < data.length; i++) for (var j = 0; j < data[i].length; j++) if (j >= cStart && j <= cEnd) {
        var item = cc.v2(i, j);
        this.indexOfV2(list, item) || list.push(item);
      }
      return list;
    }
    function getThreeBlockArea(data, p) {
      var list = [];
      var rStart = p.x - 2 >= 0 ? p.x - 2 : 0;
      var rEnd = p.x + 2 < Config.matrixRow ? p.x + 2 : Config.matrixRow - 1;
      var cStart = p.y - 2 >= 0 ? p.y - 2 : 0;
      var cEnd = p.y + 2 < Config.matrixRow ? p.y + 2 : Config.matrixCol - 1;
      for (var i = 0; i < data.length; i++) if (i >= rStart && i <= rEnd) for (var j = 0; j < data[i].length; j++) if (j >= cStart && j <= cEnd && -2 != data[i][j]) {
        var item = cc.v2(i, j);
        list.push(item);
      }
      return list;
    }
    function canRemoveList(data) {
      var list = [];
      for (var i = 0; i < Config.matrixRow; i++) for (var j = 0; j < Config.matrixCol; j++) {
        var grid = cc.v2(i, j);
        if (this.checkItem(grid, list)) continue;
        var item = this.needRemoveList(data, grid);
        if (item.length > 1) return item;
      }
    }
    function noticeLongestList(data) {
      var list = [];
      for (var i = 0; i < Config.matrixRow; i++) for (var j = 0; j < Config.matrixCol; j++) if (data[i][j] < 8 && data[i][j] >= 0) {
        var grid = cc.v2(i, j);
        if (this.checkItem(grid, list)) continue;
        var item = this.needRemoveList(data, grid);
        item.length > 1 && list.push(item);
      }
      list.sort(function(a, b) {
        return a.length - b.length;
      });
      return list.length > 0 && list.pop();
    }
    function chooseRemoveList(data) {
      var list = [];
      for (var i = 0; i < Config.matrixRow; i++) for (var j = 0; j < Config.matrixCol; j++) {
        var grid = cc.v2(i, j);
        if (this.checkItem(grid, list)) continue;
        var item = this.needRemoveList(data, grid);
        if (item.length > 1) {
          var child = item[0];
          var type = data[child.x][child.y];
          type < Config.rType && type >= 0 && item.length >= 5 && list.push(item);
        }
      }
      return list;
    }
    function checkItem(item, list) {
      var isContain = false;
      for (var i = 0; i < list.length; i++) {
        var cList = list[i];
        if (this.indexOfV2(cList, item)) {
          isContain = true;
          break;
        }
      }
      return isContain;
    }
    function needRemoveList(data, p) {
      var list = [];
      var travelList = [];
      travelList.push(p);
      var tag = data[p.x][p.y];
      if (tag <= -2) return list;
      do {
        var any = travelList.pop();
        if (any.y - 1 >= 0 && tag == data[any.x][any.y - 1]) {
          var tp = cc.v2(any.x, any.y - 1);
          this.indexOfV2(list, tp) || this.indexOfV2(travelList, tp) || travelList.push(tp);
        }
        if (any.y + 1 < Config.matrixCol && tag == data[any.x][any.y + 1]) {
          var tp = cc.v2(any.x, any.y + 1);
          this.indexOfV2(list, tp) || this.indexOfV2(travelList, tp) || travelList.push(tp);
        }
        if (any.x - 1 >= 0 && tag == data[any.x - 1][any.y]) {
          var tp = cc.v2(any.x - 1, any.y);
          this.indexOfV2(list, tp) || this.indexOfV2(travelList, tp) || travelList.push(tp);
        }
        if (any.x + 1 < Config.matrixRow && tag == data[any.x + 1][any.y]) {
          var tp = cc.v2(any.x + 1, any.y);
          this.indexOfV2(list, tp) || this.indexOfV2(travelList, tp) || travelList.push(tp);
        }
        list.push(any);
      } while (travelList.length > 0);
      return list;
    }
    function getScore(count) {
      var score = 0;
      for (var i = 1; i <= count; i++) score += this.getOneScore(i);
      return score;
    }
    function getOneScore(i) {
      return 10 + 5 * i;
    }
    function getExtraScore(i) {
      return 2e3 - 200 * (i - 1);
    }
    function needCheckCols(list) {
      var checkCols = [];
      list.forEach(function(elem, index, arr) {
        -1 == checkCols.indexOf(elem.y) && checkCols.push(elem.y);
      });
      checkCols.sort(function(a, b) {
        return b - a;
      });
      return checkCols;
    }
    function gameOver(matrix) {
      for (var row = 0; row < Config.matrixRow; row++) for (var col = 0; col < Config.matrixCol; col++) {
        var tag = matrix[row][col];
        if (tag >= 0 && tag < 20) {
          var any = cc.v2(row, col);
          if (any.y - 1 >= 0 && tag == matrix[any.x][any.y - 1]) return false;
          if (any.y + 1 < Config.matrixCol && tag == matrix[any.x][any.y + 1]) return false;
          if (any.x - 1 >= 0 && tag == matrix[any.x - 1][any.y]) return false;
          if (any.x + 1 < Config.matrixRow && tag == matrix[any.x + 1][any.y]) return false;
        }
      }
      return true;
    }
    function showPromptWithScale(node) {
      node.scale = .2;
      node.runAction(cc.scaleTo(.3, 1).easing(cc.easeBackOut(3)));
    }
    function isNewDay() {
      var zeroTime = Math.floor(new Date(new Date().toLocaleDateString()).getTime() / 1e3);
      var data = cc.sys.localStorage.getItem("currentZeroTime");
      if (!data) {
        cc.sys.localStorage.setItem("currentZeroTime", zeroTime);
        return true;
      }
      var oldZeroTime = parseInt(data);
      if (oldZeroTime >= zeroTime) return false;
      if (oldZeroTime < zeroTime) {
        cc.sys.localStorage.setItem("currentZeroTime", zeroTime);
        return true;
      }
    }
    function nodeScale(node, start, end, time, repeat) {
      -1 != repeat ? node.runAction(cc.sequence(cc.scaleTo(time, start), cc.scaleTo(time, end)).repeat(repeat)) : node.runAction(cc.sequence(cc.scaleTo(time, start), cc.scaleTo(time, end)).repeatForever());
    }
    function setItemPicture(url, node) {
      cc.loader.load(url, function(err, texture) {
        !texture || (node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture));
      });
    }
    function changeLocalNodeTexture(node, list, type) {
      var sprite = node.getComponent(cc.Sprite);
      sprite.spriteFrame = list[type];
    }
    function getNodeWorldPosition(node) {
      return node.parent.convertToWorldSpaceAR(node.position);
    }
    function resize() {
      var cvs = cc.find("Canvas").getComponent(cc.Canvas);
      this.curDR || (this.curDR = cvs.designResolution);
      var dr = this.curDR;
      var s = cc.view.getFrameSize();
      var rw = s.width;
      var rh = s.height;
      var finalW = rw;
      var finalH = rh;
      if (rw / rh > dr.width / dr.height) {
        finalH = dr.height;
        finalW = finalH * rw / rh;
      } else {
        finalW = dr.width;
        finalH = rh / rw * finalW;
      }
      cvs.designResolution = cc.size(finalW, finalH);
      cvs.node.width = finalW;
      cvs.node.height = finalH;
      cvs.node.emit("resize");
    }
    function getRandomBlockPosition(list, len) {
      var rList = [];
      while (rList.length < len) {
        var randomX = parseInt(Math.random() * Config.matrixRow);
        var randomY = parseInt(Math.random() * Config.matrixCol);
        if (list[randomX][randomY] >= 0 && list[randomX][randomY] < 8) {
          var item = cc.v2(randomX, randomY);
          this.indexOfV2(rList, item) || rList.push(item);
        }
      }
      return rList;
    }
    function computedNodeGap(num, parent, child) {
      var gap = (parent.width - num * child.width) / (num + 1);
      return gap;
    }
    function countDonwTime(end) {
      var date = new Date();
      var str = "";
      var now = Math.floor(date.getTime() / 1e3);
      var leftTime = end - now;
      var h, m, s;
      if (!(leftTime >= 0)) return false;
      h = Math.floor(leftTime / 60 / 60 % 24);
      m = Math.floor(leftTime / 60 % 60);
      s = Math.floor(leftTime % 60);
      var hour, min, sec;
      hour = h < 10 ? "0" + h : "" + h;
      min = m < 10 ? "0" + m : "" + m;
      sec = s < 10 ? "0" + s : "" + s;
      str = h > 0 ? hour + ":" + min + ":" + sec : min + ":" + sec;
      return str;
    }
    function judgeNearNode(list) {
      var toolEffectList = [];
      for (var i = 0; i < Config.matrixRow; i++) for (var j = 0; j < Config.matrixCol; j++) if (list[i][j] >= 8 && list[i][j] < 11) {
        var item = cc.v2(i, j);
        this.judgeNearBy(item, list) && toolEffectList.push(cc.v2(i, j));
      }
      return toolEffectList;
    }
    function judgeNearBy(pos, list) {
      var isTool = false;
      pos.x - 1 >= 0 && list[pos.x - 1][pos.y] >= 8 && list[pos.x - 1][pos.y] < 11 && (isTool = true);
      pos.x + 1 < Config.matrixRow && list[pos.x + 1][pos.y] >= 8 && list[pos.x + 1][pos.y] < 11 && (isTool = true);
      pos.y + 1 < Config.matrixCol && list[pos.x][pos.y + 1] >= 8 && list[pos.x][pos.y + 1] < 11 && (isTool = true);
      pos.y - 1 >= 0 && list[pos.x][pos.y - 1] >= 8 && list[pos.x][pos.y - 1] < 11 && (isTool = true);
      return isTool;
    }
    function judgeBounder(pos, list) {
      var boundList = [];
      pos.y + 1 >= Config.matrixCol ? boundList[3] = 1 : -2 == list[pos.x][pos.y + 1] ? boundList[3] = 1 : boundList[3] = 0;
      pos.y - 1 < 0 ? boundList[2] = 1 : -2 == list[pos.x][pos.y - 1] ? boundList[2] = 1 : boundList[2] = 0;
      pos.x - 1 < 0 ? boundList[1] = 1 : -2 == list[pos.x - 1][pos.y] ? boundList[1] = 1 : boundList[1] = 0;
      pos.x + 1 >= Config.matrixRow ? boundList[0] = 1 : -2 == list[pos.x + 1][pos.y] ? boundList[0] = 1 : boundList[0] = 0;
      return boundList;
    }
    function judgeAngle(pos, list) {
      var angleList = [ 0, 0, 0, 0 ];
      pos.x - 1 >= 0 && pos.y + 1 < Config.matrixCol && -2 != list[pos.x - 1][pos.y + 1] && (angleList[2] = 1);
      pos.x + 1 < Config.matrixRow && pos.y + 1 < Config.matrixCol && -2 != list[pos.x + 1][pos.y + 1] && (angleList[1] = 2);
      pos.x + 1 < Config.matrixRow && pos.y - 1 >= 0 && -2 != list[pos.x + 1][pos.y - 1] && (angleList[0] = 3);
      pos.x - 1 >= 0 && pos.y - 1 >= 0 && -2 != list[pos.x - 1][pos.y - 1] && (angleList[3] = 4);
      return angleList;
    }
    function judgeOperateLevel(len) {
      if (len < 5) return false;
      if (len >= 5 && len < 7) return 1;
      if (7 == len) return 2;
      if (len >= 8) return 3;
    }
    function getCurrentMapVineList(data) {
      var list = [];
      for (var i = 0; i < data.length; i++) for (var j = 0; j < data.length; j++) {
        var item = data[i][j];
        22 != item || this.indexOfV2(list, item) || list.push(cc.v2(i, j));
      }
      return list.length > 0 && list;
    }
    function judgeCurrentMapHinderByType(data, type) {
      var list = [];
      for (var i = 0; i < data.length; i++) for (var j = 0; j < data.length; j++) {
        var item = data[i][j];
        item != type || this.indexOfV2(list, item) || list.push(cc.v2(i, j));
      }
      return list.length > 0 && list;
    }
    function getWindmillEffectAreaList(data, p) {
      var list = [];
      var sRow = p.x - 1 >= 0 ? p.x - 1 : p.x;
      var sCol = p.y - 1 >= 0 ? p.y - 1 : p.y;
      var eRow = p.x + 2 < Config.matrixCol ? p.x + 2 : p.x + 1 < Config.matrixCol ? p.x + 1 : p.x;
      var eCol = p.y + 1 < Config.matrixCol ? p.y + 1 : p.y;
      list.push(p);
      for (var i = sRow; i <= eRow; i++) for (var j = sCol; j <= eCol; j++) if (data[i][j] >= 0) {
        if (i == p.x && j == p.y) continue;
        var item = cc.v2(i, j);
        list.push(item);
      }
      return list;
    }
    function updateGameInfo(data) {
      var localData = cc.sys.localStorage.getItem("localData");
      var uid, tool = {}, params = {};
      if (localData) {
        localData = JSON.parse(localData);
        uid = "" == localData.uid ? window.NativeManager.getUid() : localData.uid;
      } else {
        uid = window.NativeManager.getUid();
        console.log("localData is not exist");
      }
      tool.game = data.gameToolList;
      tool.player = data.game_prop;
      params.name = "";
      params.level = data.bestLevel;
      params.coin = data.starCount;
      params.star = data.totalStar;
      params.lasttime = Math.floor(new Date().getTime() / 1e3);
      params.data = JSON.stringify(tool);
      var callback = function callback(res) {
        console.log(res);
      };
    }
    module.exports = {
      resize: resize,
      initMatrixDataPortraitRandom: initMatrixDataPortraitRandom,
      grid2Pos: grid2Pos,
      pos2Grid: pos2Grid,
      indexValue: indexValue,
      resolveIndex: resolveIndex,
      indexOfV2: indexOfV2,
      needRemoveList: needRemoveList,
      getScore: getScore,
      getOneScore: getOneScore,
      needCheckCols: needCheckCols,
      randomColorByArray: randomColorByArray,
      gameOver: gameOver,
      getExtraScore: getExtraScore,
      rainbowStarRemoveList: rainbowStarRemoveList,
      creatSpecialStarList: creatSpecialStarList,
      showPromptWithScale: showPromptWithScale,
      isNewDay: isNewDay,
      nodeScale: nodeScale,
      setItemPicture: setItemPicture,
      changeLocalNodeTexture: changeLocalNodeTexture,
      getColData: getColData,
      getRowData: getRowData,
      getSameBlockList: getSameBlockList,
      needCombineTool: needCombineTool,
      getRowAndCol: getRowAndCol,
      get3Row: get3Row,
      get3Col: get3Col,
      getThreeBlockArea: getThreeBlockArea,
      getItemAdjacentPos: getItemAdjacentPos,
      getBalloonClearList: getBalloonClearList,
      randomGetGrid: randomGetGrid,
      getRandomBlockPosition: getRandomBlockPosition,
      computedNodeGap: computedNodeGap,
      countDonwTime: countDonwTime,
      judgeNearNode: judgeNearNode,
      judgeNearBy: judgeNearBy,
      girdToPos: girdToPos,
      judgeBounder: judgeBounder,
      judgeAngle: judgeAngle,
      addHinder: addHinder,
      chooseRemoveList: chooseRemoveList,
      checkItem: checkItem,
      canRemoveList: canRemoveList,
      noticeLongestList: noticeLongestList,
      judgeOperateLevel: judgeOperateLevel,
      getCurrentMapVineList: getCurrentMapVineList,
      judgeCurrentMapHinderByType: judgeCurrentMapHinderByType,
      getWindmillEffectAreaList: getWindmillEffectAreaList,
      updateGameInfo: updateGameInfo
    };
    cc._RF.pop();
  }, {
    "./psconfig": "psconfig"
  } ],
  viewReward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ecaaf8gatOrr43kATlIfRS", "viewReward");
    "use strict";
    var Utils = require("../utils");
    var GameData = require("../gameData");
    var Config = require("../psconfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        target: require("../component/target"),
        coinsNumber: cc.Label,
        icon_fiveStep: cc.Node,
        icon_plus: cc.Node,
        icon_rocket: cc.Node,
        icon_bomb: cc.Node,
        icon_disco: cc.Node,
        view_txt_step: cc.Node,
        view_txt_stepAndTool: cc.Node
      },
      hideAllIcon: function hideAllIcon() {
        this.icon_fiveStep.active = false;
        this.icon_plus.active = false;
        this.icon_rocket.active = false;
        this.icon_bomb.active = false;
        this.icon_disco.active = false;
        this.view_txt_step.active = false;
        this.view_txt_stepAndTool.active = false;
      },
      showView: function showView() {
        this.node.active = true;
        Utils.showPromptWithScale(this.node);
        this.hideAllIcon();
        this.continueTimes ? this.continueTimes < Config.continueCostList.length - 1 ? this.continueTimes += 1 : this.continueTimes = Config.continueCostList.length - 1 : this.continueTimes = 1;
        this.changeViewByTimes(this.continueTimes);
      },
      hideView: function hideView(tag) {
        this.node.active = false;
        if (tag) return;
        if (GameData.lifeNumber > 1) cc.director.dialogScript.showRetryPrompt(); else {
          GameData.lifeNumber -= 1;
          window.NativeManager.reportLifeChanged(GameData.lifeNumber);
          GameData.storeGameData();
          cc.director.loadScene("interface");
          cc.director.jumpCode = 2;
        }
        this.unschedule(this.downTimeCount);
      },
      buttonControl: function buttonControl() {
        var hasVideo = window.NativeManager.hasRewardVideo();
        this.btn_continue_video.active = !!hasVideo;
        this.btn_continue_coins.active = !this.btn_continue_video.active;
      },
      addGameStepByCoins: function addGameStepByCoins() {
        var cost, list;
        if (!this.continueTimes) cost = Config.continueCostList[0]; else {
          cc.systemEvent.emit("GAMEMASK_CONTROL", {
            order: 1
          });
          cost = Config.continueCostList[this.continueTimes - 1];
          2 == this.continueTimes ? list = [ 1, 0, 0 ] : 3 == this.continueTimes ? list = [ 1, 1, 0 ] : 4 == this.continueTimes ? list = [ 1, 1, 1 ] : 1 == this.continueTimes && (list = [ 0, 0, 0 ]);
        }
        if (GameData.starCount >= cost) {
          this.unschedule(this.downTimeCount);
          cc.director.dialogScript.hideAllChildrenNode();
          this.hideView(1);
          this.addMovesEffect();
          cc.director.container.addGameToolToContainer(list, true);
          !cc.director.container.target.isGameEnd || (cc.director.container.target.isGameEnd = false);
          cc.systemEvent.emit("REDUCE_COINS_ANIMATION", {
            cost: cost
          });
        } else cc.systemEvent.emit("GAMEVIEW_TIPS", {
          wordIndex: 2
        });
      },
      addGameStepByVideo: function addGameStepByVideo() {
        var self = this;
        var callback = function callback(res) {
          if (!!res) {
            self.unschedule(self.downTimeCount);
            cc.director.dialogScript.hideAllChildrenNode();
            self.hideView(1);
            self.addMovesEffect();
            !cc.director.container.target.isGameEnd || (cc.director.container.target.isGameEnd = false);
          }
        };
        var hasVideo = window.NativeManager.hasRewardVideo();
        hasVideo ? window.NativeManager.showRewardVideo(callback) : cc.systemEvent.emit("GAMEVIEW_TIPS", {
          wordIndex: 0
        });
      },
      downTimeCount: function downTimeCount() {
        if (this.timeNum > 1) {
          this.timeNum--;
          this.timeCount.string = this.timeNum + "";
          cc.director.SoundManager.playSound("timeCount");
        } else {
          this.unschedule(this.downTimeCount);
          cc.director.dialogScript.hideAllChildrenNode();
          this.hideView(0);
        }
      },
      addMovesEffect: function addMovesEffect() {
        var node = this.target.step.node;
        var wp = node.parent.convertToWorldSpaceAR(node.position);
        cc.systemEvent.emit("MOVE_ADD", {
          pos: wp
        });
      },
      changeViewByTimes: function changeViewByTimes(index) {
        this.coinsNumber.string = Config.continueCostList[index - 1] + "";
        switch (index) {
         case 1:
          this.icon_fiveStep.active = true;
          this.icon_fiveStep.position = cc.v2(0, 0);
          this.view_txt_step.active = true;
          break;

         case 2:
          this.icon_fiveStep.active = true;
          this.icon_fiveStep.position = cc.v2(-150, 0);
          this.icon_plus.active = true;
          this.view_txt_stepAndTool.active = true;
          this.icon_rocket.active = true;
          this.icon_rocket.scale = 1.5;
          this.icon_rocket.position = cc.v2(0, 0);
          break;

         case 3:
          this.icon_fiveStep.active = true;
          this.icon_fiveStep.position = cc.v2(-150, 0);
          this.icon_plus.active = true;
          this.view_txt_stepAndTool.active = true;
          this.icon_rocket.active = true;
          this.icon_rocket.scale = 1;
          this.icon_rocket.position = cc.v2(-54.5, -10);
          this.icon_bomb.active = true;
          this.icon_bomb.position = cc.v2(54.5, -10);
          break;

         case 4:
          this.icon_fiveStep.active = true;
          this.icon_plus.active = true;
          this.icon_fiveStep.position = cc.v2(-150, 0);
          this.view_txt_stepAndTool.active = true;
          this.icon_rocket.active = true;
          this.icon_rocket.scale = 1;
          this.icon_rocket.position = cc.v2(-54.5, -52.5);
          this.icon_bomb.active = true;
          this.icon_bomb.position = cc.v2(54.5, -52.5);
          this.icon_disco.active = true;
          this.icon_disco.position = cc.v2(0, 42);
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    "../component/target": "target",
    "../gameData": "gameData",
    "../psconfig": "psconfig",
    "../utils": "utils"
  } ]
}, {}, [ "use_v2.0.x_cc.Toggle_event", "GameManager", "LeaderBoardManager", "NativeManager", "RegistManager", "ServerManager", "SoundManager", "canvas", "actionUiLayer", "bgPrompt", "bubbleCubeContainer", "container", "glassGround", "goal", "goalDisplay", "progressBar", "quitTips", "resultPrompt", "resultTips", "retryPrompt", "target", "toolExplain", "toolList", "viewReward", "dialog", "FarmData", "FarmManager", "aniamationLayer", "farmDialog", "farmLevel_levelUp", "farm_exchange", "farm_fountain", "farm_friend", "farm_header", "farm_levelUp", "farm_message", "farm_offlineExp", "farm_operateInterface", "farm_plantPrompt", "farm_plantUnlock", "farm_propsPrompt", "farm_shop", "farm_stuffAnimation", "farm_tips", "farm_unlockLand", "farm_warehouse", "framUtils", "plantAnimaNode", "cropItem", "expItem", "groundLand", "item_fallWater", "item_farm_backpack", "item_farm_message", "item_farm_plant_seed", "item_farm_prop", "item_farm_rank", "item_farm_seed", "item_farm_warehouse", "item_friend", "progressNode", "rank_farm", "gameData", "guideNode", "interface", "levelResource", "loading", "mainScreen", "acitonLayer", "animaTips", "boxPanel", "changeName", "dailyBouns", "freeCoinsPanel", "funcView", "gameToolShop", "guideScreenNode", "header", "hinderPreview", "lottery", "powerPool", "rank", "reviewUs", "screenDialog", "setting", "shop", "shop_android", "startPrompt", "tipsPrompt", "toolChoose", "newLevelResource", "arrow", "block", "ground", "item_daily", "item_daily_view", "item_hinderPreview", "item_rank", "item_shop", "line", "prompt", "rocket", "squirrel", "toolItem", "toolRock", "toolcombine_effect", "psconfig", "utils" ]);